
Snake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a090  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018b8  0800a280  0800a280  0001a280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb38  0800bb38  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800bb38  0800bb38  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bb38  0800bb38  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb38  0800bb38  0001bb38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb3c  0800bb3c  0001bb3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800bb40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e50  20000078  0800bbb8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ec8  0800bbb8  00020ec8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b45  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000304c  00000000  00000000  00033be6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001198  00000000  00000000  00036c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001020  00000000  00000000  00037dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019477  00000000  00000000  00038df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e7df  00000000  00000000  00052267  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000886be  00000000  00000000  00060a46  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e9104  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d10  00000000  00000000  000e9180  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000078 	.word	0x20000078
 800020c:	00000000 	.word	0x00000000
 8000210:	0800a268 	.word	0x0800a268

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000007c 	.word	0x2000007c
 800022c:	0800a268 	.word	0x0800a268

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800037e:	f1a4 0401 	sub.w	r4, r4, #1
 8000382:	d1e9      	bne.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__aeabi_d2uiz>:
 80009dc:	004a      	lsls	r2, r1, #1
 80009de:	d211      	bcs.n	8000a04 <__aeabi_d2uiz+0x28>
 80009e0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009e4:	d211      	bcs.n	8000a0a <__aeabi_d2uiz+0x2e>
 80009e6:	d50d      	bpl.n	8000a04 <__aeabi_d2uiz+0x28>
 80009e8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009ec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009f0:	d40e      	bmi.n	8000a10 <__aeabi_d2uiz+0x34>
 80009f2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009fa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009fe:	fa23 f002 	lsr.w	r0, r3, r2
 8000a02:	4770      	bx	lr
 8000a04:	f04f 0000 	mov.w	r0, #0
 8000a08:	4770      	bx	lr
 8000a0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a0e:	d102      	bne.n	8000a16 <__aeabi_d2uiz+0x3a>
 8000a10:	f04f 30ff 	mov.w	r0, #4294967295
 8000a14:	4770      	bx	lr
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	4770      	bx	lr

08000a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <HAL_Init+0x28>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <HAL_Init+0x28>)
 8000a26:	f043 0310 	orr.w	r3, r3, #16
 8000a2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	f000 f8f3 	bl	8000c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a32:	2000      	movs	r0, #0
 8000a34:	f008 fda6 	bl	8009584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a38:	f008 fd6c 	bl	8009514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40022000 	.word	0x40022000

08000a48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <HAL_IncTick+0x1c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <HAL_IncTick+0x20>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4413      	add	r3, r2
 8000a58:	4a03      	ldr	r2, [pc, #12]	; (8000a68 <HAL_IncTick+0x20>)
 8000a5a:	6013      	str	r3, [r2, #0]
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr
 8000a64:	20000004 	.word	0x20000004
 8000a68:	20000e08 	.word	0x20000e08

08000a6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a70:	4b02      	ldr	r3, [pc, #8]	; (8000a7c <HAL_GetTick+0x10>)
 8000a72:	681b      	ldr	r3, [r3, #0]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	20000e08 	.word	0x20000e08

08000a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a88:	f7ff fff0 	bl	8000a6c <HAL_GetTick>
 8000a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a98:	d005      	beq.n	8000aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <HAL_Delay+0x40>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aa6:	bf00      	nop
 8000aa8:	f7ff ffe0 	bl	8000a6c <HAL_GetTick>
 8000aac:	4602      	mov	r2, r0
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d8f7      	bhi.n	8000aa8 <HAL_Delay+0x28>
  {
  }
}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000004 	.word	0x20000004

08000ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af6:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <__NVIC_SetPriorityGrouping+0x44>)
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	60d3      	str	r3, [r2, #12]
}
 8000afc:	bf00      	nop
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <__NVIC_GetPriorityGrouping+0x18>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	0a1b      	lsrs	r3, r3, #8
 8000b16:	f003 0307 	and.w	r3, r3, #7
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	db0b      	blt.n	8000b52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	f003 021f 	and.w	r2, r3, #31
 8000b40:	4906      	ldr	r1, [pc, #24]	; (8000b5c <__NVIC_EnableIRQ+0x34>)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	095b      	lsrs	r3, r3, #5
 8000b48:	2001      	movs	r0, #1
 8000b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	e000e100 	.word	0xe000e100

08000b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	6039      	str	r1, [r7, #0]
 8000b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	db0a      	blt.n	8000b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	490c      	ldr	r1, [pc, #48]	; (8000bac <__NVIC_SetPriority+0x4c>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	0112      	lsls	r2, r2, #4
 8000b80:	b2d2      	uxtb	r2, r2
 8000b82:	440b      	add	r3, r1
 8000b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b88:	e00a      	b.n	8000ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4908      	ldr	r1, [pc, #32]	; (8000bb0 <__NVIC_SetPriority+0x50>)
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	f003 030f 	and.w	r3, r3, #15
 8000b96:	3b04      	subs	r3, #4
 8000b98:	0112      	lsls	r2, r2, #4
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	440b      	add	r3, r1
 8000b9e:	761a      	strb	r2, [r3, #24]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000e100 	.word	0xe000e100
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b089      	sub	sp, #36	; 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	f1c3 0307 	rsb	r3, r3, #7
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	bf28      	it	cs
 8000bd2:	2304      	movcs	r3, #4
 8000bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	2b06      	cmp	r3, #6
 8000bdc:	d902      	bls.n	8000be4 <NVIC_EncodePriority+0x30>
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3b03      	subs	r3, #3
 8000be2:	e000      	b.n	8000be6 <NVIC_EncodePriority+0x32>
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43da      	mvns	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa01 f303 	lsl.w	r3, r1, r3
 8000c06:	43d9      	mvns	r1, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	4313      	orrs	r3, r2
         );
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3724      	adds	r7, #36	; 0x24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ff4f 	bl	8000ac4 <__NVIC_SetPriorityGrouping>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4603      	mov	r3, r0
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
 8000c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c40:	f7ff ff64 	bl	8000b0c <__NVIC_GetPriorityGrouping>
 8000c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	68b9      	ldr	r1, [r7, #8]
 8000c4a:	6978      	ldr	r0, [r7, #20]
 8000c4c:	f7ff ffb2 	bl	8000bb4 <NVIC_EncodePriority>
 8000c50:	4602      	mov	r2, r0
 8000c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c56:	4611      	mov	r1, r2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff81 	bl	8000b60 <__NVIC_SetPriority>
}
 8000c5e:	bf00      	nop
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff57 	bl	8000b28 <__NVIC_EnableIRQ>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b08b      	sub	sp, #44	; 0x2c
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c96:	e133      	b.n	8000f00 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	69fa      	ldr	r2, [r7, #28]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	f040 8122 	bne.w	8000efa <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2b12      	cmp	r3, #18
 8000cbc:	d034      	beq.n	8000d28 <HAL_GPIO_Init+0xa4>
 8000cbe:	2b12      	cmp	r3, #18
 8000cc0:	d80d      	bhi.n	8000cde <HAL_GPIO_Init+0x5a>
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d02b      	beq.n	8000d1e <HAL_GPIO_Init+0x9a>
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d804      	bhi.n	8000cd4 <HAL_GPIO_Init+0x50>
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d031      	beq.n	8000d32 <HAL_GPIO_Init+0xae>
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d01c      	beq.n	8000d0c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cd2:	e048      	b.n	8000d66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cd4:	2b03      	cmp	r3, #3
 8000cd6:	d043      	beq.n	8000d60 <HAL_GPIO_Init+0xdc>
 8000cd8:	2b11      	cmp	r3, #17
 8000cda:	d01b      	beq.n	8000d14 <HAL_GPIO_Init+0x90>
          break;
 8000cdc:	e043      	b.n	8000d66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cde:	4a8f      	ldr	r2, [pc, #572]	; (8000f1c <HAL_GPIO_Init+0x298>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d026      	beq.n	8000d32 <HAL_GPIO_Init+0xae>
 8000ce4:	4a8d      	ldr	r2, [pc, #564]	; (8000f1c <HAL_GPIO_Init+0x298>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d806      	bhi.n	8000cf8 <HAL_GPIO_Init+0x74>
 8000cea:	4a8d      	ldr	r2, [pc, #564]	; (8000f20 <HAL_GPIO_Init+0x29c>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d020      	beq.n	8000d32 <HAL_GPIO_Init+0xae>
 8000cf0:	4a8c      	ldr	r2, [pc, #560]	; (8000f24 <HAL_GPIO_Init+0x2a0>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d01d      	beq.n	8000d32 <HAL_GPIO_Init+0xae>
          break;
 8000cf6:	e036      	b.n	8000d66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cf8:	4a8b      	ldr	r2, [pc, #556]	; (8000f28 <HAL_GPIO_Init+0x2a4>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d019      	beq.n	8000d32 <HAL_GPIO_Init+0xae>
 8000cfe:	4a8b      	ldr	r2, [pc, #556]	; (8000f2c <HAL_GPIO_Init+0x2a8>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d016      	beq.n	8000d32 <HAL_GPIO_Init+0xae>
 8000d04:	4a8a      	ldr	r2, [pc, #552]	; (8000f30 <HAL_GPIO_Init+0x2ac>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d013      	beq.n	8000d32 <HAL_GPIO_Init+0xae>
          break;
 8000d0a:	e02c      	b.n	8000d66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	623b      	str	r3, [r7, #32]
          break;
 8000d12:	e028      	b.n	8000d66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	623b      	str	r3, [r7, #32]
          break;
 8000d1c:	e023      	b.n	8000d66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	3308      	adds	r3, #8
 8000d24:	623b      	str	r3, [r7, #32]
          break;
 8000d26:	e01e      	b.n	8000d66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	330c      	adds	r3, #12
 8000d2e:	623b      	str	r3, [r7, #32]
          break;
 8000d30:	e019      	b.n	8000d66 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d102      	bne.n	8000d40 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	623b      	str	r3, [r7, #32]
          break;
 8000d3e:	e012      	b.n	8000d66 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d105      	bne.n	8000d54 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d48:	2308      	movs	r3, #8
 8000d4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	69fa      	ldr	r2, [r7, #28]
 8000d50:	611a      	str	r2, [r3, #16]
          break;
 8000d52:	e008      	b.n	8000d66 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d54:	2308      	movs	r3, #8
 8000d56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	69fa      	ldr	r2, [r7, #28]
 8000d5c:	615a      	str	r2, [r3, #20]
          break;
 8000d5e:	e002      	b.n	8000d66 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d60:	2300      	movs	r3, #0
 8000d62:	623b      	str	r3, [r7, #32]
          break;
 8000d64:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	2bff      	cmp	r3, #255	; 0xff
 8000d6a:	d801      	bhi.n	8000d70 <HAL_GPIO_Init+0xec>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	e001      	b.n	8000d74 <HAL_GPIO_Init+0xf0>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3304      	adds	r3, #4
 8000d74:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	2bff      	cmp	r3, #255	; 0xff
 8000d7a:	d802      	bhi.n	8000d82 <HAL_GPIO_Init+0xfe>
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	e002      	b.n	8000d88 <HAL_GPIO_Init+0x104>
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d84:	3b08      	subs	r3, #8
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	210f      	movs	r1, #15
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	401a      	ands	r2, r3
 8000d9a:	6a39      	ldr	r1, [r7, #32]
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	431a      	orrs	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	f000 80a2 	beq.w	8000efa <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000db6:	4b5f      	ldr	r3, [pc, #380]	; (8000f34 <HAL_GPIO_Init+0x2b0>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	4a5e      	ldr	r2, [pc, #376]	; (8000f34 <HAL_GPIO_Init+0x2b0>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6193      	str	r3, [r2, #24]
 8000dc2:	4b5c      	ldr	r3, [pc, #368]	; (8000f34 <HAL_GPIO_Init+0x2b0>)
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000dce:	4a5a      	ldr	r2, [pc, #360]	; (8000f38 <HAL_GPIO_Init+0x2b4>)
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd2:	089b      	lsrs	r3, r3, #2
 8000dd4:	3302      	adds	r3, #2
 8000dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dda:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	220f      	movs	r2, #15
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	4013      	ands	r3, r2
 8000df0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a51      	ldr	r2, [pc, #324]	; (8000f3c <HAL_GPIO_Init+0x2b8>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d01f      	beq.n	8000e3a <HAL_GPIO_Init+0x1b6>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a50      	ldr	r2, [pc, #320]	; (8000f40 <HAL_GPIO_Init+0x2bc>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d019      	beq.n	8000e36 <HAL_GPIO_Init+0x1b2>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a4f      	ldr	r2, [pc, #316]	; (8000f44 <HAL_GPIO_Init+0x2c0>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d013      	beq.n	8000e32 <HAL_GPIO_Init+0x1ae>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a4e      	ldr	r2, [pc, #312]	; (8000f48 <HAL_GPIO_Init+0x2c4>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d00d      	beq.n	8000e2e <HAL_GPIO_Init+0x1aa>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a4d      	ldr	r2, [pc, #308]	; (8000f4c <HAL_GPIO_Init+0x2c8>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d007      	beq.n	8000e2a <HAL_GPIO_Init+0x1a6>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a4c      	ldr	r2, [pc, #304]	; (8000f50 <HAL_GPIO_Init+0x2cc>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d101      	bne.n	8000e26 <HAL_GPIO_Init+0x1a2>
 8000e22:	2305      	movs	r3, #5
 8000e24:	e00a      	b.n	8000e3c <HAL_GPIO_Init+0x1b8>
 8000e26:	2306      	movs	r3, #6
 8000e28:	e008      	b.n	8000e3c <HAL_GPIO_Init+0x1b8>
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	e006      	b.n	8000e3c <HAL_GPIO_Init+0x1b8>
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e004      	b.n	8000e3c <HAL_GPIO_Init+0x1b8>
 8000e32:	2302      	movs	r3, #2
 8000e34:	e002      	b.n	8000e3c <HAL_GPIO_Init+0x1b8>
 8000e36:	2301      	movs	r3, #1
 8000e38:	e000      	b.n	8000e3c <HAL_GPIO_Init+0x1b8>
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e3e:	f002 0203 	and.w	r2, r2, #3
 8000e42:	0092      	lsls	r2, r2, #2
 8000e44:	4093      	lsls	r3, r2
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e4c:	493a      	ldr	r1, [pc, #232]	; (8000f38 <HAL_GPIO_Init+0x2b4>)
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	3302      	adds	r3, #2
 8000e54:	68fa      	ldr	r2, [r7, #12]
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d006      	beq.n	8000e74 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e66:	4b3b      	ldr	r3, [pc, #236]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	493a      	ldr	r1, [pc, #232]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	600b      	str	r3, [r1, #0]
 8000e72:	e006      	b.n	8000e82 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e74:	4b37      	ldr	r3, [pc, #220]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	4935      	ldr	r1, [pc, #212]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000e7e:	4013      	ands	r3, r2
 8000e80:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d006      	beq.n	8000e9c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e8e:	4b31      	ldr	r3, [pc, #196]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000e90:	685a      	ldr	r2, [r3, #4]
 8000e92:	4930      	ldr	r1, [pc, #192]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	604b      	str	r3, [r1, #4]
 8000e9a:	e006      	b.n	8000eaa <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e9c:	4b2d      	ldr	r3, [pc, #180]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	492b      	ldr	r1, [pc, #172]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d006      	beq.n	8000ec4 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000eb6:	4b27      	ldr	r3, [pc, #156]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	4926      	ldr	r1, [pc, #152]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	608b      	str	r3, [r1, #8]
 8000ec2:	e006      	b.n	8000ed2 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ec4:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	4921      	ldr	r1, [pc, #132]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000ece:	4013      	ands	r3, r2
 8000ed0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d006      	beq.n	8000eec <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ede:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000ee0:	68da      	ldr	r2, [r3, #12]
 8000ee2:	491c      	ldr	r1, [pc, #112]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	60cb      	str	r3, [r1, #12]
 8000eea:	e006      	b.n	8000efa <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000eee:	68da      	ldr	r2, [r3, #12]
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	4917      	ldr	r1, [pc, #92]	; (8000f54 <HAL_GPIO_Init+0x2d0>)
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efc:	3301      	adds	r3, #1
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f06:	fa22 f303 	lsr.w	r3, r2, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f47f aec4 	bne.w	8000c98 <HAL_GPIO_Init+0x14>
  }
}
 8000f10:	bf00      	nop
 8000f12:	372c      	adds	r7, #44	; 0x2c
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	10210000 	.word	0x10210000
 8000f20:	10110000 	.word	0x10110000
 8000f24:	10120000 	.word	0x10120000
 8000f28:	10310000 	.word	0x10310000
 8000f2c:	10320000 	.word	0x10320000
 8000f30:	10220000 	.word	0x10220000
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010000 	.word	0x40010000
 8000f3c:	40010800 	.word	0x40010800
 8000f40:	40010c00 	.word	0x40010c00
 8000f44:	40011000 	.word	0x40011000
 8000f48:	40011400 	.word	0x40011400
 8000f4c:	40011800 	.word	0x40011800
 8000f50:	40011c00 	.word	0x40011c00
 8000f54:	40010400 	.word	0x40010400

08000f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	807b      	strh	r3, [r7, #2]
 8000f64:	4613      	mov	r3, r2
 8000f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f68:	787b      	ldrb	r3, [r7, #1]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f6e:	887a      	ldrh	r2, [r7, #2]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f74:	e003      	b.n	8000f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f76:	887b      	ldrh	r3, [r7, #2]
 8000f78:	041a      	lsls	r2, r3, #16
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	611a      	str	r2, [r3, #16]
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	887b      	ldrh	r3, [r7, #2]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d003      	beq.n	8000fa8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fa0:	887a      	ldrh	r2, [r7, #2]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000fa6:	e002      	b.n	8000fae <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fa8:	887a      	ldrh	r2, [r7, #2]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	611a      	str	r2, [r3, #16]
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr

08000fb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e26c      	b.n	80014a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 8087 	beq.w	80010e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fd8:	4b92      	ldr	r3, [pc, #584]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 030c 	and.w	r3, r3, #12
 8000fe0:	2b04      	cmp	r3, #4
 8000fe2:	d00c      	beq.n	8000ffe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fe4:	4b8f      	ldr	r3, [pc, #572]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 030c 	and.w	r3, r3, #12
 8000fec:	2b08      	cmp	r3, #8
 8000fee:	d112      	bne.n	8001016 <HAL_RCC_OscConfig+0x5e>
 8000ff0:	4b8c      	ldr	r3, [pc, #560]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ffc:	d10b      	bne.n	8001016 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ffe:	4b89      	ldr	r3, [pc, #548]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d06c      	beq.n	80010e4 <HAL_RCC_OscConfig+0x12c>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d168      	bne.n	80010e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e246      	b.n	80014a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800101e:	d106      	bne.n	800102e <HAL_RCC_OscConfig+0x76>
 8001020:	4b80      	ldr	r3, [pc, #512]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a7f      	ldr	r2, [pc, #508]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	e02e      	b.n	800108c <HAL_RCC_OscConfig+0xd4>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10c      	bne.n	8001050 <HAL_RCC_OscConfig+0x98>
 8001036:	4b7b      	ldr	r3, [pc, #492]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a7a      	ldr	r2, [pc, #488]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 800103c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	4b78      	ldr	r3, [pc, #480]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a77      	ldr	r2, [pc, #476]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001048:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	e01d      	b.n	800108c <HAL_RCC_OscConfig+0xd4>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001058:	d10c      	bne.n	8001074 <HAL_RCC_OscConfig+0xbc>
 800105a:	4b72      	ldr	r3, [pc, #456]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a71      	ldr	r2, [pc, #452]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	4b6f      	ldr	r3, [pc, #444]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a6e      	ldr	r2, [pc, #440]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 800106c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	e00b      	b.n	800108c <HAL_RCC_OscConfig+0xd4>
 8001074:	4b6b      	ldr	r3, [pc, #428]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a6a      	ldr	r2, [pc, #424]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 800107a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	4b68      	ldr	r3, [pc, #416]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a67      	ldr	r2, [pc, #412]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800108a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d013      	beq.n	80010bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001094:	f7ff fcea 	bl	8000a6c <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800109c:	f7ff fce6 	bl	8000a6c <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b64      	cmp	r3, #100	; 0x64
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e1fa      	b.n	80014a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ae:	4b5d      	ldr	r3, [pc, #372]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0f0      	beq.n	800109c <HAL_RCC_OscConfig+0xe4>
 80010ba:	e014      	b.n	80010e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010bc:	f7ff fcd6 	bl	8000a6c <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c4:	f7ff fcd2 	bl	8000a6c <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b64      	cmp	r3, #100	; 0x64
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e1e6      	b.n	80014a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d6:	4b53      	ldr	r3, [pc, #332]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f0      	bne.n	80010c4 <HAL_RCC_OscConfig+0x10c>
 80010e2:	e000      	b.n	80010e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d063      	beq.n	80011ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010f2:	4b4c      	ldr	r3, [pc, #304]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 030c 	and.w	r3, r3, #12
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00b      	beq.n	8001116 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010fe:	4b49      	ldr	r3, [pc, #292]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 030c 	and.w	r3, r3, #12
 8001106:	2b08      	cmp	r3, #8
 8001108:	d11c      	bne.n	8001144 <HAL_RCC_OscConfig+0x18c>
 800110a:	4b46      	ldr	r3, [pc, #280]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d116      	bne.n	8001144 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001116:	4b43      	ldr	r3, [pc, #268]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d005      	beq.n	800112e <HAL_RCC_OscConfig+0x176>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d001      	beq.n	800112e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e1ba      	b.n	80014a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112e:	4b3d      	ldr	r3, [pc, #244]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	4939      	ldr	r1, [pc, #228]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 800113e:	4313      	orrs	r3, r2
 8001140:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001142:	e03a      	b.n	80011ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	691b      	ldr	r3, [r3, #16]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d020      	beq.n	800118e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800114c:	4b36      	ldr	r3, [pc, #216]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 800114e:	2201      	movs	r2, #1
 8001150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001152:	f7ff fc8b 	bl	8000a6c <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800115a:	f7ff fc87 	bl	8000a6c <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e19b      	b.n	80014a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116c:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0f0      	beq.n	800115a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001178:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	4927      	ldr	r1, [pc, #156]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 8001188:	4313      	orrs	r3, r2
 800118a:	600b      	str	r3, [r1, #0]
 800118c:	e015      	b.n	80011ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800118e:	4b26      	ldr	r3, [pc, #152]	; (8001228 <HAL_RCC_OscConfig+0x270>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001194:	f7ff fc6a 	bl	8000a6c <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800119c:	f7ff fc66 	bl	8000a6c <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e17a      	b.n	80014a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ae:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f0      	bne.n	800119c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d03a      	beq.n	800123c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d019      	beq.n	8001202 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <HAL_RCC_OscConfig+0x274>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d4:	f7ff fc4a 	bl	8000a6c <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011dc:	f7ff fc46 	bl	8000a6c <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e15a      	b.n	80014a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <HAL_RCC_OscConfig+0x26c>)
 80011f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d0f0      	beq.n	80011dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011fa:	2001      	movs	r0, #1
 80011fc:	f000 fb0a 	bl	8001814 <RCC_Delay>
 8001200:	e01c      	b.n	800123c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001202:	4b0a      	ldr	r3, [pc, #40]	; (800122c <HAL_RCC_OscConfig+0x274>)
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001208:	f7ff fc30 	bl	8000a6c <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800120e:	e00f      	b.n	8001230 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001210:	f7ff fc2c 	bl	8000a6c <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d908      	bls.n	8001230 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e140      	b.n	80014a4 <HAL_RCC_OscConfig+0x4ec>
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000
 8001228:	42420000 	.word	0x42420000
 800122c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001230:	4b9e      	ldr	r3, [pc, #632]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 8001232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1e9      	bne.n	8001210 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 80a6 	beq.w	8001396 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800124e:	4b97      	ldr	r3, [pc, #604]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10d      	bne.n	8001276 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	4b94      	ldr	r3, [pc, #592]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	4a93      	ldr	r2, [pc, #588]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 8001260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001264:	61d3      	str	r3, [r2, #28]
 8001266:	4b91      	ldr	r3, [pc, #580]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001272:	2301      	movs	r3, #1
 8001274:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001276:	4b8e      	ldr	r3, [pc, #568]	; (80014b0 <HAL_RCC_OscConfig+0x4f8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800127e:	2b00      	cmp	r3, #0
 8001280:	d118      	bne.n	80012b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001282:	4b8b      	ldr	r3, [pc, #556]	; (80014b0 <HAL_RCC_OscConfig+0x4f8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a8a      	ldr	r2, [pc, #552]	; (80014b0 <HAL_RCC_OscConfig+0x4f8>)
 8001288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800128e:	f7ff fbed 	bl	8000a6c <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001296:	f7ff fbe9 	bl	8000a6c <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b64      	cmp	r3, #100	; 0x64
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e0fd      	b.n	80014a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a8:	4b81      	ldr	r3, [pc, #516]	; (80014b0 <HAL_RCC_OscConfig+0x4f8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0f0      	beq.n	8001296 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d106      	bne.n	80012ca <HAL_RCC_OscConfig+0x312>
 80012bc:	4b7b      	ldr	r3, [pc, #492]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	4a7a      	ldr	r2, [pc, #488]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6213      	str	r3, [r2, #32]
 80012c8:	e02d      	b.n	8001326 <HAL_RCC_OscConfig+0x36e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10c      	bne.n	80012ec <HAL_RCC_OscConfig+0x334>
 80012d2:	4b76      	ldr	r3, [pc, #472]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	4a75      	ldr	r2, [pc, #468]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 80012d8:	f023 0301 	bic.w	r3, r3, #1
 80012dc:	6213      	str	r3, [r2, #32]
 80012de:	4b73      	ldr	r3, [pc, #460]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	4a72      	ldr	r2, [pc, #456]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 80012e4:	f023 0304 	bic.w	r3, r3, #4
 80012e8:	6213      	str	r3, [r2, #32]
 80012ea:	e01c      	b.n	8001326 <HAL_RCC_OscConfig+0x36e>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	2b05      	cmp	r3, #5
 80012f2:	d10c      	bne.n	800130e <HAL_RCC_OscConfig+0x356>
 80012f4:	4b6d      	ldr	r3, [pc, #436]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	4a6c      	ldr	r2, [pc, #432]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 80012fa:	f043 0304 	orr.w	r3, r3, #4
 80012fe:	6213      	str	r3, [r2, #32]
 8001300:	4b6a      	ldr	r3, [pc, #424]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	4a69      	ldr	r2, [pc, #420]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6213      	str	r3, [r2, #32]
 800130c:	e00b      	b.n	8001326 <HAL_RCC_OscConfig+0x36e>
 800130e:	4b67      	ldr	r3, [pc, #412]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 8001310:	6a1b      	ldr	r3, [r3, #32]
 8001312:	4a66      	ldr	r2, [pc, #408]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 8001314:	f023 0301 	bic.w	r3, r3, #1
 8001318:	6213      	str	r3, [r2, #32]
 800131a:	4b64      	ldr	r3, [pc, #400]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 800131c:	6a1b      	ldr	r3, [r3, #32]
 800131e:	4a63      	ldr	r2, [pc, #396]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 8001320:	f023 0304 	bic.w	r3, r3, #4
 8001324:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d015      	beq.n	800135a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132e:	f7ff fb9d 	bl	8000a6c <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001334:	e00a      	b.n	800134c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001336:	f7ff fb99 	bl	8000a6c <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	f241 3288 	movw	r2, #5000	; 0x1388
 8001344:	4293      	cmp	r3, r2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e0ab      	b.n	80014a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800134c:	4b57      	ldr	r3, [pc, #348]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0ee      	beq.n	8001336 <HAL_RCC_OscConfig+0x37e>
 8001358:	e014      	b.n	8001384 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135a:	f7ff fb87 	bl	8000a6c <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001360:	e00a      	b.n	8001378 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001362:	f7ff fb83 	bl	8000a6c <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001370:	4293      	cmp	r3, r2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e095      	b.n	80014a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001378:	4b4c      	ldr	r3, [pc, #304]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1ee      	bne.n	8001362 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001384:	7dfb      	ldrb	r3, [r7, #23]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d105      	bne.n	8001396 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800138a:	4b48      	ldr	r3, [pc, #288]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	4a47      	ldr	r2, [pc, #284]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 8001390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001394:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 8081 	beq.w	80014a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013a0:	4b42      	ldr	r3, [pc, #264]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 030c 	and.w	r3, r3, #12
 80013a8:	2b08      	cmp	r3, #8
 80013aa:	d061      	beq.n	8001470 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69db      	ldr	r3, [r3, #28]
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d146      	bne.n	8001442 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013b4:	4b3f      	ldr	r3, [pc, #252]	; (80014b4 <HAL_RCC_OscConfig+0x4fc>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ba:	f7ff fb57 	bl	8000a6c <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c2:	f7ff fb53 	bl	8000a6c <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e067      	b.n	80014a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013d4:	4b35      	ldr	r3, [pc, #212]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1f0      	bne.n	80013c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e8:	d108      	bne.n	80013fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013ea:	4b30      	ldr	r3, [pc, #192]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	492d      	ldr	r1, [pc, #180]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013fc:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a19      	ldr	r1, [r3, #32]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140c:	430b      	orrs	r3, r1
 800140e:	4927      	ldr	r1, [pc, #156]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 8001410:	4313      	orrs	r3, r2
 8001412:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001414:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <HAL_RCC_OscConfig+0x4fc>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141a:	f7ff fb27 	bl	8000a6c <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001422:	f7ff fb23 	bl	8000a6c <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e037      	b.n	80014a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001434:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x46a>
 8001440:	e02f      	b.n	80014a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001442:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <HAL_RCC_OscConfig+0x4fc>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001448:	f7ff fb10 	bl	8000a6c <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001450:	f7ff fb0c 	bl	8000a6c <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e020      	b.n	80014a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x498>
 800146e:	e018      	b.n	80014a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d101      	bne.n	800147c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e013      	b.n	80014a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <HAL_RCC_OscConfig+0x4f4>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	429a      	cmp	r2, r3
 800148e:	d106      	bne.n	800149e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800149a:	429a      	cmp	r2, r3
 800149c:	d001      	beq.n	80014a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40007000 	.word	0x40007000
 80014b4:	42420060 	.word	0x42420060

080014b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e0d0      	b.n	800166e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014cc:	4b6a      	ldr	r3, [pc, #424]	; (8001678 <HAL_RCC_ClockConfig+0x1c0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0307 	and.w	r3, r3, #7
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d910      	bls.n	80014fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014da:	4b67      	ldr	r3, [pc, #412]	; (8001678 <HAL_RCC_ClockConfig+0x1c0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f023 0207 	bic.w	r2, r3, #7
 80014e2:	4965      	ldr	r1, [pc, #404]	; (8001678 <HAL_RCC_ClockConfig+0x1c0>)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ea:	4b63      	ldr	r3, [pc, #396]	; (8001678 <HAL_RCC_ClockConfig+0x1c0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d001      	beq.n	80014fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e0b8      	b.n	800166e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d020      	beq.n	800154a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	2b00      	cmp	r3, #0
 8001512:	d005      	beq.n	8001520 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001514:	4b59      	ldr	r3, [pc, #356]	; (800167c <HAL_RCC_ClockConfig+0x1c4>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	4a58      	ldr	r2, [pc, #352]	; (800167c <HAL_RCC_ClockConfig+0x1c4>)
 800151a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800151e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0308 	and.w	r3, r3, #8
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800152c:	4b53      	ldr	r3, [pc, #332]	; (800167c <HAL_RCC_ClockConfig+0x1c4>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	4a52      	ldr	r2, [pc, #328]	; (800167c <HAL_RCC_ClockConfig+0x1c4>)
 8001532:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001536:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001538:	4b50      	ldr	r3, [pc, #320]	; (800167c <HAL_RCC_ClockConfig+0x1c4>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	494d      	ldr	r1, [pc, #308]	; (800167c <HAL_RCC_ClockConfig+0x1c4>)
 8001546:	4313      	orrs	r3, r2
 8001548:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d040      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d107      	bne.n	800156e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155e:	4b47      	ldr	r3, [pc, #284]	; (800167c <HAL_RCC_ClockConfig+0x1c4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d115      	bne.n	8001596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e07f      	b.n	800166e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b02      	cmp	r3, #2
 8001574:	d107      	bne.n	8001586 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001576:	4b41      	ldr	r3, [pc, #260]	; (800167c <HAL_RCC_ClockConfig+0x1c4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d109      	bne.n	8001596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e073      	b.n	800166e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001586:	4b3d      	ldr	r3, [pc, #244]	; (800167c <HAL_RCC_ClockConfig+0x1c4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e06b      	b.n	800166e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001596:	4b39      	ldr	r3, [pc, #228]	; (800167c <HAL_RCC_ClockConfig+0x1c4>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f023 0203 	bic.w	r2, r3, #3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	4936      	ldr	r1, [pc, #216]	; (800167c <HAL_RCC_ClockConfig+0x1c4>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015a8:	f7ff fa60 	bl	8000a6c <HAL_GetTick>
 80015ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ae:	e00a      	b.n	80015c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b0:	f7ff fa5c 	bl	8000a6c <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80015be:	4293      	cmp	r3, r2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e053      	b.n	800166e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c6:	4b2d      	ldr	r3, [pc, #180]	; (800167c <HAL_RCC_ClockConfig+0x1c4>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 020c 	and.w	r2, r3, #12
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d1eb      	bne.n	80015b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015d8:	4b27      	ldr	r3, [pc, #156]	; (8001678 <HAL_RCC_ClockConfig+0x1c0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d210      	bcs.n	8001608 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e6:	4b24      	ldr	r3, [pc, #144]	; (8001678 <HAL_RCC_ClockConfig+0x1c0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f023 0207 	bic.w	r2, r3, #7
 80015ee:	4922      	ldr	r1, [pc, #136]	; (8001678 <HAL_RCC_ClockConfig+0x1c0>)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f6:	4b20      	ldr	r3, [pc, #128]	; (8001678 <HAL_RCC_ClockConfig+0x1c0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d001      	beq.n	8001608 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e032      	b.n	800166e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	d008      	beq.n	8001626 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <HAL_RCC_ClockConfig+0x1c4>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	4916      	ldr	r1, [pc, #88]	; (800167c <HAL_RCC_ClockConfig+0x1c4>)
 8001622:	4313      	orrs	r3, r2
 8001624:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	2b00      	cmp	r3, #0
 8001630:	d009      	beq.n	8001646 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001632:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_RCC_ClockConfig+0x1c4>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	490e      	ldr	r1, [pc, #56]	; (800167c <HAL_RCC_ClockConfig+0x1c4>)
 8001642:	4313      	orrs	r3, r2
 8001644:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001646:	f000 f821 	bl	800168c <HAL_RCC_GetSysClockFreq>
 800164a:	4601      	mov	r1, r0
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <HAL_RCC_ClockConfig+0x1c4>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	091b      	lsrs	r3, r3, #4
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <HAL_RCC_ClockConfig+0x1c8>)
 8001658:	5cd3      	ldrb	r3, [r2, r3]
 800165a:	fa21 f303 	lsr.w	r3, r1, r3
 800165e:	4a09      	ldr	r2, [pc, #36]	; (8001684 <HAL_RCC_ClockConfig+0x1cc>)
 8001660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_RCC_ClockConfig+0x1d0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f007 ff8c 	bl	8009584 <HAL_InitTick>

  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40022000 	.word	0x40022000
 800167c:	40021000 	.word	0x40021000
 8001680:	0800bac8 	.word	0x0800bac8
 8001684:	20000010 	.word	0x20000010
 8001688:	20000000 	.word	0x20000000

0800168c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800168c:	b490      	push	{r4, r7}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001692:	4b2a      	ldr	r3, [pc, #168]	; (800173c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001694:	1d3c      	adds	r4, r7, #4
 8001696:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001698:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800169c:	4b28      	ldr	r3, [pc, #160]	; (8001740 <HAL_RCC_GetSysClockFreq+0xb4>)
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016b6:	4b23      	ldr	r3, [pc, #140]	; (8001744 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f003 030c 	and.w	r3, r3, #12
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	d002      	beq.n	80016cc <HAL_RCC_GetSysClockFreq+0x40>
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d003      	beq.n	80016d2 <HAL_RCC_GetSysClockFreq+0x46>
 80016ca:	e02d      	b.n	8001728 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016cc:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016ce:	623b      	str	r3, [r7, #32]
      break;
 80016d0:	e02d      	b.n	800172e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	0c9b      	lsrs	r3, r3, #18
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016de:	4413      	add	r3, r2
 80016e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d013      	beq.n	8001718 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	0c5b      	lsrs	r3, r3, #17
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016fe:	4413      	add	r3, r2
 8001700:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001704:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	4a0f      	ldr	r2, [pc, #60]	; (8001748 <HAL_RCC_GetSysClockFreq+0xbc>)
 800170a:	fb02 f203 	mul.w	r2, r2, r3
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	fbb2 f3f3 	udiv	r3, r2, r3
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
 8001716:	e004      	b.n	8001722 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	4a0c      	ldr	r2, [pc, #48]	; (800174c <HAL_RCC_GetSysClockFreq+0xc0>)
 800171c:	fb02 f303 	mul.w	r3, r2, r3
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	623b      	str	r3, [r7, #32]
      break;
 8001726:	e002      	b.n	800172e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <HAL_RCC_GetSysClockFreq+0xbc>)
 800172a:	623b      	str	r3, [r7, #32]
      break;
 800172c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800172e:	6a3b      	ldr	r3, [r7, #32]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3728      	adds	r7, #40	; 0x28
 8001734:	46bd      	mov	sp, r7
 8001736:	bc90      	pop	{r4, r7}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	0800a280 	.word	0x0800a280
 8001740:	0800a290 	.word	0x0800a290
 8001744:	40021000 	.word	0x40021000
 8001748:	007a1200 	.word	0x007a1200
 800174c:	003d0900 	.word	0x003d0900

08001750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001754:	4b02      	ldr	r3, [pc, #8]	; (8001760 <HAL_RCC_GetHCLKFreq+0x10>)
 8001756:	681b      	ldr	r3, [r3, #0]
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	20000010 	.word	0x20000010

08001764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001768:	f7ff fff2 	bl	8001750 <HAL_RCC_GetHCLKFreq>
 800176c:	4601      	mov	r1, r0
 800176e:	4b05      	ldr	r3, [pc, #20]	; (8001784 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	0a1b      	lsrs	r3, r3, #8
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	4a03      	ldr	r2, [pc, #12]	; (8001788 <HAL_RCC_GetPCLK1Freq+0x24>)
 800177a:	5cd3      	ldrb	r3, [r2, r3]
 800177c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001780:	4618      	mov	r0, r3
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40021000 	.word	0x40021000
 8001788:	0800bad8 	.word	0x0800bad8

0800178c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001790:	f7ff ffde 	bl	8001750 <HAL_RCC_GetHCLKFreq>
 8001794:	4601      	mov	r1, r0
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	0adb      	lsrs	r3, r3, #11
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	4a03      	ldr	r2, [pc, #12]	; (80017b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017a2:	5cd3      	ldrb	r3, [r2, r3]
 80017a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40021000 	.word	0x40021000
 80017b0:	0800bad8 	.word	0x0800bad8

080017b4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	220f      	movs	r2, #15
 80017c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <HAL_RCC_GetClockConfig+0x58>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 0203 	and.w	r2, r3, #3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80017d0:	4b0e      	ldr	r3, [pc, #56]	; (800180c <HAL_RCC_GetClockConfig+0x58>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_RCC_GetClockConfig+0x58>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <HAL_RCC_GetClockConfig+0x58>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	08db      	lsrs	r3, r3, #3
 80017ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_RCC_GetClockConfig+0x5c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0207 	and.w	r2, r3, #7
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	40021000 	.word	0x40021000
 8001810:	40022000 	.word	0x40022000

08001814 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800181c:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <RCC_Delay+0x34>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0a      	ldr	r2, [pc, #40]	; (800184c <RCC_Delay+0x38>)
 8001822:	fba2 2303 	umull	r2, r3, r2, r3
 8001826:	0a5b      	lsrs	r3, r3, #9
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	fb02 f303 	mul.w	r3, r2, r3
 800182e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001830:	bf00      	nop
  }
  while (Delay --);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1e5a      	subs	r2, r3, #1
 8001836:	60fa      	str	r2, [r7, #12]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1f9      	bne.n	8001830 <RCC_Delay+0x1c>
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	20000010 	.word	0x20000010
 800184c:	10624dd3 	.word	0x10624dd3

08001850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e01d      	b.n	800189e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d106      	bne.n	800187c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f815 	bl	80018a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2202      	movs	r2, #2
 8001880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3304      	adds	r3, #4
 800188c:	4619      	mov	r1, r3
 800188e:	4610      	mov	r0, r2
 8001890:	f000 f962 	bl	8001b58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 0201 	orr.w	r2, r2, #1
 80018ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2b06      	cmp	r3, #6
 80018e0:	d007      	beq.n	80018f2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f042 0201 	orr.w	r2, r2, #1
 80018f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr

080018fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b02      	cmp	r3, #2
 8001912:	d122      	bne.n	800195a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b02      	cmp	r3, #2
 8001920:	d11b      	bne.n	800195a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f06f 0202 	mvn.w	r2, #2
 800192a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f8ed 	bl	8001b20 <HAL_TIM_IC_CaptureCallback>
 8001946:	e005      	b.n	8001954 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 f8e0 	bl	8001b0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 f8ef 	bl	8001b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b04      	cmp	r3, #4
 8001966:	d122      	bne.n	80019ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	2b04      	cmp	r3, #4
 8001974:	d11b      	bne.n	80019ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f06f 0204 	mvn.w	r2, #4
 800197e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2202      	movs	r2, #2
 8001984:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 f8c3 	bl	8001b20 <HAL_TIM_IC_CaptureCallback>
 800199a:	e005      	b.n	80019a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f8b6 	bl	8001b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f8c5 	bl	8001b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d122      	bne.n	8001a02 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d11b      	bne.n	8001a02 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f06f 0208 	mvn.w	r2, #8
 80019d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2204      	movs	r2, #4
 80019d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f899 	bl	8001b20 <HAL_TIM_IC_CaptureCallback>
 80019ee:	e005      	b.n	80019fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f88c 	bl	8001b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f89b 	bl	8001b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	f003 0310 	and.w	r3, r3, #16
 8001a0c:	2b10      	cmp	r3, #16
 8001a0e:	d122      	bne.n	8001a56 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	f003 0310 	and.w	r3, r3, #16
 8001a1a:	2b10      	cmp	r3, #16
 8001a1c:	d11b      	bne.n	8001a56 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f06f 0210 	mvn.w	r2, #16
 8001a26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2208      	movs	r2, #8
 8001a2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f86f 	bl	8001b20 <HAL_TIM_IC_CaptureCallback>
 8001a42:	e005      	b.n	8001a50 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 f862 	bl	8001b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f871 	bl	8001b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d10e      	bne.n	8001a82 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d107      	bne.n	8001a82 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f06f 0201 	mvn.w	r2, #1
 8001a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f007 fa57 	bl	8008f30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a8c:	2b80      	cmp	r3, #128	; 0x80
 8001a8e:	d10e      	bne.n	8001aae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a9a:	2b80      	cmp	r3, #128	; 0x80
 8001a9c:	d107      	bne.n	8001aae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f8d8 	bl	8001c5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab8:	2b40      	cmp	r3, #64	; 0x40
 8001aba:	d10e      	bne.n	8001ada <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac6:	2b40      	cmp	r3, #64	; 0x40
 8001ac8:	d107      	bne.n	8001ada <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 f835 	bl	8001b44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	f003 0320 	and.w	r3, r3, #32
 8001ae4:	2b20      	cmp	r3, #32
 8001ae6:	d10e      	bne.n	8001b06 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	f003 0320 	and.w	r3, r3, #32
 8001af2:	2b20      	cmp	r3, #32
 8001af4:	d107      	bne.n	8001b06 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f06f 0220 	mvn.w	r2, #32
 8001afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f8a3 	bl	8001c4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr

08001b32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr
	...

08001b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a33      	ldr	r2, [pc, #204]	; (8001c38 <TIM_Base_SetConfig+0xe0>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d013      	beq.n	8001b98 <TIM_Base_SetConfig+0x40>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a32      	ldr	r2, [pc, #200]	; (8001c3c <TIM_Base_SetConfig+0xe4>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d00f      	beq.n	8001b98 <TIM_Base_SetConfig+0x40>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7e:	d00b      	beq.n	8001b98 <TIM_Base_SetConfig+0x40>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a2f      	ldr	r2, [pc, #188]	; (8001c40 <TIM_Base_SetConfig+0xe8>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d007      	beq.n	8001b98 <TIM_Base_SetConfig+0x40>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a2e      	ldr	r2, [pc, #184]	; (8001c44 <TIM_Base_SetConfig+0xec>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d003      	beq.n	8001b98 <TIM_Base_SetConfig+0x40>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a2d      	ldr	r2, [pc, #180]	; (8001c48 <TIM_Base_SetConfig+0xf0>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d108      	bne.n	8001baa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a22      	ldr	r2, [pc, #136]	; (8001c38 <TIM_Base_SetConfig+0xe0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d013      	beq.n	8001bda <TIM_Base_SetConfig+0x82>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a21      	ldr	r2, [pc, #132]	; (8001c3c <TIM_Base_SetConfig+0xe4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d00f      	beq.n	8001bda <TIM_Base_SetConfig+0x82>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc0:	d00b      	beq.n	8001bda <TIM_Base_SetConfig+0x82>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a1e      	ldr	r2, [pc, #120]	; (8001c40 <TIM_Base_SetConfig+0xe8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d007      	beq.n	8001bda <TIM_Base_SetConfig+0x82>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	; (8001c44 <TIM_Base_SetConfig+0xec>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d003      	beq.n	8001bda <TIM_Base_SetConfig+0x82>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a1c      	ldr	r2, [pc, #112]	; (8001c48 <TIM_Base_SetConfig+0xf0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d108      	bne.n	8001bec <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <TIM_Base_SetConfig+0xe0>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d003      	beq.n	8001c20 <TIM_Base_SetConfig+0xc8>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a08      	ldr	r2, [pc, #32]	; (8001c3c <TIM_Base_SetConfig+0xe4>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d103      	bne.n	8001c28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	691a      	ldr	r2, [r3, #16]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	615a      	str	r2, [r3, #20]
}
 8001c2e:	bf00      	nop
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	40012c00 	.word	0x40012c00
 8001c3c:	40013400 	.word	0x40013400
 8001c40:	40000400 	.word	0x40000400
 8001c44:	40000800 	.word	0x40000800
 8001c48:	40000c00 	.word	0x40000c00

08001c4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr

08001c5e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr

08001c70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e03f      	b.n	8001d02 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d106      	bne.n	8001c9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f007 fd78 	bl	800978c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2224      	movs	r2, #36	; 0x24
 8001ca0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f90b 	bl	8001ed0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	695a      	ldr	r2, [r3, #20]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ce8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b088      	sub	sp, #32
 8001d0e:	af02      	add	r7, sp, #8
 8001d10:	60f8      	str	r0, [r7, #12]
 8001d12:	60b9      	str	r1, [r7, #8]
 8001d14:	603b      	str	r3, [r7, #0]
 8001d16:	4613      	mov	r3, r2
 8001d18:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b20      	cmp	r3, #32
 8001d28:	f040 8083 	bne.w	8001e32 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d002      	beq.n	8001d38 <HAL_UART_Transmit+0x2e>
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e07b      	b.n	8001e34 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d101      	bne.n	8001d4a <HAL_UART_Transmit+0x40>
 8001d46:	2302      	movs	r3, #2
 8001d48:	e074      	b.n	8001e34 <HAL_UART_Transmit+0x12a>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2221      	movs	r2, #33	; 0x21
 8001d5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001d60:	f7fe fe84 	bl	8000a6c <HAL_GetTick>
 8001d64:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	88fa      	ldrh	r2, [r7, #6]
 8001d6a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	88fa      	ldrh	r2, [r7, #6]
 8001d70:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d72:	e042      	b.n	8001dfa <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d8a:	d122      	bne.n	8001dd2 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	2200      	movs	r2, #0
 8001d94:	2180      	movs	r1, #128	; 0x80
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f000 f850 	bl	8001e3c <UART_WaitOnFlagUntilTimeout>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e046      	b.n	8001e34 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001db8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d103      	bne.n	8001dca <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	e017      	b.n	8001dfa <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	e013      	b.n	8001dfa <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2180      	movs	r1, #128	; 0x80
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f000 f82d 	bl	8001e3c <UART_WaitOnFlagUntilTimeout>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e023      	b.n	8001e34 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	60ba      	str	r2, [r7, #8]
 8001df2:	781a      	ldrb	r2, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1b7      	bne.n	8001d74 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2140      	movs	r1, #64	; 0x40
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 f814 	bl	8001e3c <UART_WaitOnFlagUntilTimeout>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e00a      	b.n	8001e34 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2220      	movs	r2, #32
 8001e22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e000      	b.n	8001e34 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001e32:	2302      	movs	r3, #2
  }
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	603b      	str	r3, [r7, #0]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e4c:	e02c      	b.n	8001ea8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e54:	d028      	beq.n	8001ea8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d007      	beq.n	8001e6c <UART_WaitOnFlagUntilTimeout+0x30>
 8001e5c:	f7fe fe06 	bl	8000a6c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d21d      	bcs.n	8001ea8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e7a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	695a      	ldr	r2, [r3, #20]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0201 	bic.w	r2, r2, #1
 8001e8a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2220      	movs	r2, #32
 8001e90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2220      	movs	r2, #32
 8001e98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e00f      	b.n	8001ec8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	bf0c      	ite	eq
 8001eb8:	2301      	moveq	r3, #1
 8001eba:	2300      	movne	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d0c3      	beq.n	8001e4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001f0a:	f023 030c 	bic.w	r3, r3, #12
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	68f9      	ldr	r1, [r7, #12]
 8001f14:	430b      	orrs	r3, r1
 8001f16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	699a      	ldr	r2, [r3, #24]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a52      	ldr	r2, [pc, #328]	; (800207c <UART_SetConfig+0x1ac>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d14e      	bne.n	8001fd6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f38:	f7ff fc28 	bl	800178c <HAL_RCC_GetPCLK2Freq>
 8001f3c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	009a      	lsls	r2, r3, #2
 8001f48:	441a      	add	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f54:	4a4a      	ldr	r2, [pc, #296]	; (8002080 <UART_SetConfig+0x1b0>)
 8001f56:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5a:	095b      	lsrs	r3, r3, #5
 8001f5c:	0119      	lsls	r1, r3, #4
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	009a      	lsls	r2, r3, #2
 8001f68:	441a      	add	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f74:	4b42      	ldr	r3, [pc, #264]	; (8002080 <UART_SetConfig+0x1b0>)
 8001f76:	fba3 0302 	umull	r0, r3, r3, r2
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	2064      	movs	r0, #100	; 0x64
 8001f7e:	fb00 f303 	mul.w	r3, r0, r3
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	3332      	adds	r3, #50	; 0x32
 8001f88:	4a3d      	ldr	r2, [pc, #244]	; (8002080 <UART_SetConfig+0x1b0>)
 8001f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f94:	4419      	add	r1, r3
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009a      	lsls	r2, r3, #2
 8001fa0:	441a      	add	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fac:	4b34      	ldr	r3, [pc, #208]	; (8002080 <UART_SetConfig+0x1b0>)
 8001fae:	fba3 0302 	umull	r0, r3, r3, r2
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	2064      	movs	r0, #100	; 0x64
 8001fb6:	fb00 f303 	mul.w	r3, r0, r3
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	3332      	adds	r3, #50	; 0x32
 8001fc0:	4a2f      	ldr	r2, [pc, #188]	; (8002080 <UART_SetConfig+0x1b0>)
 8001fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc6:	095b      	lsrs	r3, r3, #5
 8001fc8:	f003 020f 	and.w	r2, r3, #15
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	440a      	add	r2, r1
 8001fd2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001fd4:	e04d      	b.n	8002072 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001fd6:	f7ff fbc5 	bl	8001764 <HAL_RCC_GetPCLK1Freq>
 8001fda:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009a      	lsls	r2, r3, #2
 8001fe6:	441a      	add	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff2:	4a23      	ldr	r2, [pc, #140]	; (8002080 <UART_SetConfig+0x1b0>)
 8001ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff8:	095b      	lsrs	r3, r3, #5
 8001ffa:	0119      	lsls	r1, r3, #4
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	009a      	lsls	r2, r3, #2
 8002006:	441a      	add	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002012:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <UART_SetConfig+0x1b0>)
 8002014:	fba3 0302 	umull	r0, r3, r3, r2
 8002018:	095b      	lsrs	r3, r3, #5
 800201a:	2064      	movs	r0, #100	; 0x64
 800201c:	fb00 f303 	mul.w	r3, r0, r3
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	011b      	lsls	r3, r3, #4
 8002024:	3332      	adds	r3, #50	; 0x32
 8002026:	4a16      	ldr	r2, [pc, #88]	; (8002080 <UART_SetConfig+0x1b0>)
 8002028:	fba2 2303 	umull	r2, r3, r2, r3
 800202c:	095b      	lsrs	r3, r3, #5
 800202e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002032:	4419      	add	r1, r3
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	009a      	lsls	r2, r3, #2
 800203e:	441a      	add	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	fbb2 f2f3 	udiv	r2, r2, r3
 800204a:	4b0d      	ldr	r3, [pc, #52]	; (8002080 <UART_SetConfig+0x1b0>)
 800204c:	fba3 0302 	umull	r0, r3, r3, r2
 8002050:	095b      	lsrs	r3, r3, #5
 8002052:	2064      	movs	r0, #100	; 0x64
 8002054:	fb00 f303 	mul.w	r3, r0, r3
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	3332      	adds	r3, #50	; 0x32
 800205e:	4a08      	ldr	r2, [pc, #32]	; (8002080 <UART_SetConfig+0x1b0>)
 8002060:	fba2 2303 	umull	r2, r3, r2, r3
 8002064:	095b      	lsrs	r3, r3, #5
 8002066:	f003 020f 	and.w	r2, r3, #15
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	440a      	add	r2, r1
 8002070:	609a      	str	r2, [r3, #8]
}
 8002072:	bf00      	nop
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40013800 	.word	0x40013800
 8002080:	51eb851f 	.word	0x51eb851f

08002084 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002096:	2b84      	cmp	r3, #132	; 0x84
 8002098:	d005      	beq.n	80020a6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800209a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4413      	add	r3, r2
 80020a2:	3303      	adds	r3, #3
 80020a4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80020a6:	68fb      	ldr	r3, [r7, #12]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr

080020b2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80020b6:	f000 fa4b 	bl	8002550 <vTaskStartScheduler>
  
  return osOK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	bd80      	pop	{r7, pc}

080020c0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80020c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af02      	add	r7, sp, #8
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685c      	ldr	r4, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020d6:	b29e      	uxth	r6, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff ffd0 	bl	8002084 <makeFreeRtosPriority>
 80020e4:	4602      	mov	r2, r0
 80020e6:	f107 030c 	add.w	r3, r7, #12
 80020ea:	9301      	str	r3, [sp, #4]
 80020ec:	9200      	str	r2, [sp, #0]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	4632      	mov	r2, r6
 80020f2:	4629      	mov	r1, r5
 80020f4:	4620      	mov	r0, r4
 80020f6:	f000 f8cd 	bl	8002294 <xTaskCreate>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d001      	beq.n	8002104 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8002100:	2300      	movs	r3, #0
 8002102:	e000      	b.n	8002106 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8002104:	68fb      	ldr	r3, [r7, #12]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800210e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b084      	sub	sp, #16
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <osDelay+0x16>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	e000      	b.n	8002126 <osDelay+0x18>
 8002124:	2301      	movs	r3, #1
 8002126:	4618      	mov	r0, r3
 8002128:	f000 f9de 	bl	80024e8 <vTaskDelay>
  
  return osOK;
 800212c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f103 0208 	add.w	r2, r3, #8
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f04f 32ff 	mov.w	r2, #4294967295
 800214e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f103 0208 	add.w	r2, r3, #8
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f103 0208 	add.w	r2, r3, #8
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	601a      	str	r2, [r3, #0]
}
 80021c8:	bf00      	nop
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr

080021d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021d2:	b480      	push	{r7}
 80021d4:	b085      	sub	sp, #20
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e8:	d103      	bne.n	80021f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	e00c      	b.n	800220c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3308      	adds	r3, #8
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	e002      	b.n	8002200 <vListInsert+0x2e>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	429a      	cmp	r2, r3
 800220a:	d2f6      	bcs.n	80021fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	601a      	str	r2, [r3, #0]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr

08002242 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002242:	b480      	push	{r7}
 8002244:	b085      	sub	sp, #20
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6892      	ldr	r2, [r2, #8]
 8002258:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6852      	ldr	r2, [r2, #4]
 8002262:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	429a      	cmp	r2, r3
 800226c:	d103      	bne.n	8002276 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	1e5a      	subs	r2, r3, #1
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08c      	sub	sp, #48	; 0x30
 8002298:	af04      	add	r7, sp, #16
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	4613      	mov	r3, r2
 80022a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022a4:	88fb      	ldrh	r3, [r7, #6]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 fe17 	bl	8002edc <pvPortMalloc>
 80022ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00e      	beq.n	80022d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80022b6:	2054      	movs	r0, #84	; 0x54
 80022b8:	f000 fe10 	bl	8002edc <pvPortMalloc>
 80022bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	631a      	str	r2, [r3, #48]	; 0x30
 80022ca:	e005      	b.n	80022d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80022cc:	6978      	ldr	r0, [r7, #20]
 80022ce:	f000 fec7 	bl	8003060 <vPortFree>
 80022d2:	e001      	b.n	80022d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d013      	beq.n	8002306 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80022de:	88fa      	ldrh	r2, [r7, #6]
 80022e0:	2300      	movs	r3, #0
 80022e2:	9303      	str	r3, [sp, #12]
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	9302      	str	r3, [sp, #8]
 80022e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68b9      	ldr	r1, [r7, #8]
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 f80e 	bl	8002316 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80022fa:	69f8      	ldr	r0, [r7, #28]
 80022fc:	f000 f88a 	bl	8002414 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002300:	2301      	movs	r3, #1
 8002302:	61bb      	str	r3, [r7, #24]
 8002304:	e002      	b.n	800230c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002306:	f04f 33ff 	mov.w	r3, #4294967295
 800230a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800230c:	69bb      	ldr	r3, [r7, #24]
	}
 800230e:	4618      	mov	r0, r3
 8002310:	3720      	adds	r7, #32
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b088      	sub	sp, #32
 800231a:	af00      	add	r7, sp, #0
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800232e:	3b01      	subs	r3, #1
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	f023 0307 	bic.w	r3, r3, #7
 800233c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	2b00      	cmp	r3, #0
 8002346:	d009      	beq.n	800235c <prvInitialiseNewTask+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234c:	f383 8811 	msr	BASEPRI, r3
 8002350:	f3bf 8f6f 	isb	sy
 8002354:	f3bf 8f4f 	dsb	sy
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	e7fe      	b.n	800235a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800235c:	2300      	movs	r3, #0
 800235e:	61fb      	str	r3, [r7, #28]
 8002360:	e012      	b.n	8002388 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	4413      	add	r3, r2
 8002368:	7819      	ldrb	r1, [r3, #0]
 800236a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	4413      	add	r3, r2
 8002370:	3334      	adds	r3, #52	; 0x34
 8002372:	460a      	mov	r2, r1
 8002374:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	4413      	add	r3, r2
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d006      	beq.n	8002390 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3301      	adds	r3, #1
 8002386:	61fb      	str	r3, [r7, #28]
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	2b0f      	cmp	r3, #15
 800238c:	d9e9      	bls.n	8002362 <prvInitialiseNewTask+0x4c>
 800238e:	e000      	b.n	8002392 <prvInitialiseNewTask+0x7c>
		{
			break;
 8002390:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800239a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239c:	2b06      	cmp	r3, #6
 800239e:	d901      	bls.n	80023a4 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80023a0:	2306      	movs	r3, #6
 80023a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80023a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80023aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023ae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80023b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b2:	2200      	movs	r2, #0
 80023b4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80023b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b8:	3304      	adds	r3, #4
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff feda 	bl	8002174 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80023c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c2:	3318      	adds	r3, #24
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fed5 	bl	8002174 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80023ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d2:	f1c3 0207 	rsb	r2, r3, #7
 80023d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80023da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80023e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e2:	2200      	movs	r2, #0
 80023e4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80023e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	68f9      	ldr	r1, [r7, #12]
 80023f2:	69b8      	ldr	r0, [r7, #24]
 80023f4:	f000 fbd0 	bl	8002b98 <pxPortInitialiseStack>
 80023f8:	4602      	mov	r2, r0
 80023fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80023fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002406:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002408:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800240a:	bf00      	nop
 800240c:	3720      	adds	r7, #32
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800241c:	f000 fca4 	bl	8002d68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002420:	4b2a      	ldr	r3, [pc, #168]	; (80024cc <prvAddNewTaskToReadyList+0xb8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	3301      	adds	r3, #1
 8002426:	4a29      	ldr	r2, [pc, #164]	; (80024cc <prvAddNewTaskToReadyList+0xb8>)
 8002428:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800242a:	4b29      	ldr	r3, [pc, #164]	; (80024d0 <prvAddNewTaskToReadyList+0xbc>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002432:	4a27      	ldr	r2, [pc, #156]	; (80024d0 <prvAddNewTaskToReadyList+0xbc>)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002438:	4b24      	ldr	r3, [pc, #144]	; (80024cc <prvAddNewTaskToReadyList+0xb8>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d110      	bne.n	8002462 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002440:	f000 faa4 	bl	800298c <prvInitialiseTaskLists>
 8002444:	e00d      	b.n	8002462 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002446:	4b23      	ldr	r3, [pc, #140]	; (80024d4 <prvAddNewTaskToReadyList+0xc0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d109      	bne.n	8002462 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800244e:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <prvAddNewTaskToReadyList+0xbc>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002458:	429a      	cmp	r2, r3
 800245a:	d802      	bhi.n	8002462 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800245c:	4a1c      	ldr	r2, [pc, #112]	; (80024d0 <prvAddNewTaskToReadyList+0xbc>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002462:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <prvAddNewTaskToReadyList+0xc4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	3301      	adds	r3, #1
 8002468:	4a1b      	ldr	r2, [pc, #108]	; (80024d8 <prvAddNewTaskToReadyList+0xc4>)
 800246a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	2201      	movs	r2, #1
 8002472:	409a      	lsls	r2, r3
 8002474:	4b19      	ldr	r3, [pc, #100]	; (80024dc <prvAddNewTaskToReadyList+0xc8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4313      	orrs	r3, r2
 800247a:	4a18      	ldr	r2, [pc, #96]	; (80024dc <prvAddNewTaskToReadyList+0xc8>)
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4a15      	ldr	r2, [pc, #84]	; (80024e0 <prvAddNewTaskToReadyList+0xcc>)
 800248c:	441a      	add	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3304      	adds	r3, #4
 8002492:	4619      	mov	r1, r3
 8002494:	4610      	mov	r0, r2
 8002496:	f7ff fe79 	bl	800218c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800249a:	f000 fc93 	bl	8002dc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800249e:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <prvAddNewTaskToReadyList+0xc0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00e      	beq.n	80024c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80024a6:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <prvAddNewTaskToReadyList+0xbc>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d207      	bcs.n	80024c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <prvAddNewTaskToReadyList+0xd0>)
 80024b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	f3bf 8f4f 	dsb	sy
 80024c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000194 	.word	0x20000194
 80024d0:	20000094 	.word	0x20000094
 80024d4:	200001a0 	.word	0x200001a0
 80024d8:	200001b0 	.word	0x200001b0
 80024dc:	2000019c 	.word	0x2000019c
 80024e0:	20000098 	.word	0x20000098
 80024e4:	e000ed04 	.word	0xe000ed04

080024e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80024f0:	2300      	movs	r3, #0
 80024f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d016      	beq.n	8002528 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80024fa:	4b13      	ldr	r3, [pc, #76]	; (8002548 <vTaskDelay+0x60>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d009      	beq.n	8002516 <vTaskDelay+0x2e>
 8002502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002506:	f383 8811 	msr	BASEPRI, r3
 800250a:	f3bf 8f6f 	isb	sy
 800250e:	f3bf 8f4f 	dsb	sy
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	e7fe      	b.n	8002514 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002516:	f000 f861 	bl	80025dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800251a:	2100      	movs	r1, #0
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 fad5 	bl	8002acc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002522:	f000 f869 	bl	80025f8 <xTaskResumeAll>
 8002526:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d107      	bne.n	800253e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800252e:	4b07      	ldr	r3, [pc, #28]	; (800254c <vTaskDelay+0x64>)
 8002530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	f3bf 8f4f 	dsb	sy
 800253a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	200001bc 	.word	0x200001bc
 800254c:	e000ed04 	.word	0xe000ed04

08002550 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002556:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <vTaskStartScheduler+0x74>)
 8002558:	9301      	str	r3, [sp, #4]
 800255a:	2300      	movs	r3, #0
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	2300      	movs	r3, #0
 8002560:	2280      	movs	r2, #128	; 0x80
 8002562:	4919      	ldr	r1, [pc, #100]	; (80025c8 <vTaskStartScheduler+0x78>)
 8002564:	4819      	ldr	r0, [pc, #100]	; (80025cc <vTaskStartScheduler+0x7c>)
 8002566:	f7ff fe95 	bl	8002294 <xTaskCreate>
 800256a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d115      	bne.n	800259e <vTaskStartScheduler+0x4e>
 8002572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002576:	f383 8811 	msr	BASEPRI, r3
 800257a:	f3bf 8f6f 	isb	sy
 800257e:	f3bf 8f4f 	dsb	sy
 8002582:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002584:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <vTaskStartScheduler+0x80>)
 8002586:	f04f 32ff 	mov.w	r2, #4294967295
 800258a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800258c:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <vTaskStartScheduler+0x84>)
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002592:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <vTaskStartScheduler+0x88>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002598:	f000 fb76 	bl	8002c88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800259c:	e00d      	b.n	80025ba <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a4:	d109      	bne.n	80025ba <vTaskStartScheduler+0x6a>
 80025a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025aa:	f383 8811 	msr	BASEPRI, r3
 80025ae:	f3bf 8f6f 	isb	sy
 80025b2:	f3bf 8f4f 	dsb	sy
 80025b6:	607b      	str	r3, [r7, #4]
 80025b8:	e7fe      	b.n	80025b8 <vTaskStartScheduler+0x68>
}
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	200001b8 	.word	0x200001b8
 80025c8:	0800a294 	.word	0x0800a294
 80025cc:	0800295d 	.word	0x0800295d
 80025d0:	200001b4 	.word	0x200001b4
 80025d4:	200001a0 	.word	0x200001a0
 80025d8:	20000198 	.word	0x20000198

080025dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80025e0:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <vTaskSuspendAll+0x18>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	3301      	adds	r3, #1
 80025e6:	4a03      	ldr	r2, [pc, #12]	; (80025f4 <vTaskSuspendAll+0x18>)
 80025e8:	6013      	str	r3, [r2, #0]
}
 80025ea:	bf00      	nop
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	200001bc 	.word	0x200001bc

080025f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002606:	4b41      	ldr	r3, [pc, #260]	; (800270c <xTaskResumeAll+0x114>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d109      	bne.n	8002622 <xTaskResumeAll+0x2a>
 800260e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002612:	f383 8811 	msr	BASEPRI, r3
 8002616:	f3bf 8f6f 	isb	sy
 800261a:	f3bf 8f4f 	dsb	sy
 800261e:	603b      	str	r3, [r7, #0]
 8002620:	e7fe      	b.n	8002620 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002622:	f000 fba1 	bl	8002d68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002626:	4b39      	ldr	r3, [pc, #228]	; (800270c <xTaskResumeAll+0x114>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	3b01      	subs	r3, #1
 800262c:	4a37      	ldr	r2, [pc, #220]	; (800270c <xTaskResumeAll+0x114>)
 800262e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002630:	4b36      	ldr	r3, [pc, #216]	; (800270c <xTaskResumeAll+0x114>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d161      	bne.n	80026fc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002638:	4b35      	ldr	r3, [pc, #212]	; (8002710 <xTaskResumeAll+0x118>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d05d      	beq.n	80026fc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002640:	e02e      	b.n	80026a0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002642:	4b34      	ldr	r3, [pc, #208]	; (8002714 <xTaskResumeAll+0x11c>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	3318      	adds	r3, #24
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fdf7 	bl	8002242 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3304      	adds	r3, #4
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff fdf2 	bl	8002242 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002662:	2201      	movs	r2, #1
 8002664:	409a      	lsls	r2, r3
 8002666:	4b2c      	ldr	r3, [pc, #176]	; (8002718 <xTaskResumeAll+0x120>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4313      	orrs	r3, r2
 800266c:	4a2a      	ldr	r2, [pc, #168]	; (8002718 <xTaskResumeAll+0x120>)
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4a27      	ldr	r2, [pc, #156]	; (800271c <xTaskResumeAll+0x124>)
 800267e:	441a      	add	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3304      	adds	r3, #4
 8002684:	4619      	mov	r1, r3
 8002686:	4610      	mov	r0, r2
 8002688:	f7ff fd80 	bl	800218c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002690:	4b23      	ldr	r3, [pc, #140]	; (8002720 <xTaskResumeAll+0x128>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002696:	429a      	cmp	r2, r3
 8002698:	d302      	bcc.n	80026a0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800269a:	4b22      	ldr	r3, [pc, #136]	; (8002724 <xTaskResumeAll+0x12c>)
 800269c:	2201      	movs	r2, #1
 800269e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026a0:	4b1c      	ldr	r3, [pc, #112]	; (8002714 <xTaskResumeAll+0x11c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1cc      	bne.n	8002642 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80026ae:	f000 f9e9 	bl	8002a84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80026b2:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <xTaskResumeAll+0x130>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d010      	beq.n	80026e0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80026be:	f000 f837 	bl	8002730 <xTaskIncrementTick>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80026c8:	4b16      	ldr	r3, [pc, #88]	; (8002724 <xTaskResumeAll+0x12c>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f1      	bne.n	80026be <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80026da:	4b13      	ldr	r3, [pc, #76]	; (8002728 <xTaskResumeAll+0x130>)
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80026e0:	4b10      	ldr	r3, [pc, #64]	; (8002724 <xTaskResumeAll+0x12c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d009      	beq.n	80026fc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80026e8:	2301      	movs	r3, #1
 80026ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80026ec:	4b0f      	ldr	r3, [pc, #60]	; (800272c <xTaskResumeAll+0x134>)
 80026ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	f3bf 8f4f 	dsb	sy
 80026f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80026fc:	f000 fb62 	bl	8002dc4 <vPortExitCritical>

	return xAlreadyYielded;
 8002700:	68bb      	ldr	r3, [r7, #8]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	200001bc 	.word	0x200001bc
 8002710:	20000194 	.word	0x20000194
 8002714:	20000154 	.word	0x20000154
 8002718:	2000019c 	.word	0x2000019c
 800271c:	20000098 	.word	0x20000098
 8002720:	20000094 	.word	0x20000094
 8002724:	200001a8 	.word	0x200001a8
 8002728:	200001a4 	.word	0x200001a4
 800272c:	e000ed04 	.word	0xe000ed04

08002730 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800273a:	4b50      	ldr	r3, [pc, #320]	; (800287c <xTaskIncrementTick+0x14c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	f040 808c 	bne.w	800285c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002744:	4b4e      	ldr	r3, [pc, #312]	; (8002880 <xTaskIncrementTick+0x150>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	3301      	adds	r3, #1
 800274a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800274c:	4a4c      	ldr	r2, [pc, #304]	; (8002880 <xTaskIncrementTick+0x150>)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d11f      	bne.n	8002798 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002758:	4b4a      	ldr	r3, [pc, #296]	; (8002884 <xTaskIncrementTick+0x154>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <xTaskIncrementTick+0x46>
 8002762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002766:	f383 8811 	msr	BASEPRI, r3
 800276a:	f3bf 8f6f 	isb	sy
 800276e:	f3bf 8f4f 	dsb	sy
 8002772:	603b      	str	r3, [r7, #0]
 8002774:	e7fe      	b.n	8002774 <xTaskIncrementTick+0x44>
 8002776:	4b43      	ldr	r3, [pc, #268]	; (8002884 <xTaskIncrementTick+0x154>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	4b42      	ldr	r3, [pc, #264]	; (8002888 <xTaskIncrementTick+0x158>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a40      	ldr	r2, [pc, #256]	; (8002884 <xTaskIncrementTick+0x154>)
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	4a40      	ldr	r2, [pc, #256]	; (8002888 <xTaskIncrementTick+0x158>)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	4b40      	ldr	r3, [pc, #256]	; (800288c <xTaskIncrementTick+0x15c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	3301      	adds	r3, #1
 8002790:	4a3e      	ldr	r2, [pc, #248]	; (800288c <xTaskIncrementTick+0x15c>)
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	f000 f976 	bl	8002a84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002798:	4b3d      	ldr	r3, [pc, #244]	; (8002890 <xTaskIncrementTick+0x160>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d34d      	bcc.n	800283e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027a2:	4b38      	ldr	r3, [pc, #224]	; (8002884 <xTaskIncrementTick+0x154>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <xTaskIncrementTick+0x80>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <xTaskIncrementTick+0x82>
 80027b0:	2300      	movs	r3, #0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d004      	beq.n	80027c0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027b6:	4b36      	ldr	r3, [pc, #216]	; (8002890 <xTaskIncrementTick+0x160>)
 80027b8:	f04f 32ff 	mov.w	r2, #4294967295
 80027bc:	601a      	str	r2, [r3, #0]
					break;
 80027be:	e03e      	b.n	800283e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80027c0:	4b30      	ldr	r3, [pc, #192]	; (8002884 <xTaskIncrementTick+0x154>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d203      	bcs.n	80027e0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80027d8:	4a2d      	ldr	r2, [pc, #180]	; (8002890 <xTaskIncrementTick+0x160>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6013      	str	r3, [r2, #0]
						break;
 80027de:	e02e      	b.n	800283e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	3304      	adds	r3, #4
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fd2c 	bl	8002242 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d004      	beq.n	80027fc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	3318      	adds	r3, #24
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fd23 	bl	8002242 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	2201      	movs	r2, #1
 8002802:	409a      	lsls	r2, r3
 8002804:	4b23      	ldr	r3, [pc, #140]	; (8002894 <xTaskIncrementTick+0x164>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4313      	orrs	r3, r2
 800280a:	4a22      	ldr	r2, [pc, #136]	; (8002894 <xTaskIncrementTick+0x164>)
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4a1f      	ldr	r2, [pc, #124]	; (8002898 <xTaskIncrementTick+0x168>)
 800281c:	441a      	add	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	3304      	adds	r3, #4
 8002822:	4619      	mov	r1, r3
 8002824:	4610      	mov	r0, r2
 8002826:	f7ff fcb1 	bl	800218c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800282e:	4b1b      	ldr	r3, [pc, #108]	; (800289c <xTaskIncrementTick+0x16c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	429a      	cmp	r2, r3
 8002836:	d3b4      	bcc.n	80027a2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002838:	2301      	movs	r3, #1
 800283a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800283c:	e7b1      	b.n	80027a2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800283e:	4b17      	ldr	r3, [pc, #92]	; (800289c <xTaskIncrementTick+0x16c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002844:	4914      	ldr	r1, [pc, #80]	; (8002898 <xTaskIncrementTick+0x168>)
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d907      	bls.n	8002866 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8002856:	2301      	movs	r3, #1
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	e004      	b.n	8002866 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800285c:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <xTaskIncrementTick+0x170>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3301      	adds	r3, #1
 8002862:	4a0f      	ldr	r2, [pc, #60]	; (80028a0 <xTaskIncrementTick+0x170>)
 8002864:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002866:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <xTaskIncrementTick+0x174>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800286e:	2301      	movs	r3, #1
 8002870:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002872:	697b      	ldr	r3, [r7, #20]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	200001bc 	.word	0x200001bc
 8002880:	20000198 	.word	0x20000198
 8002884:	2000014c 	.word	0x2000014c
 8002888:	20000150 	.word	0x20000150
 800288c:	200001ac 	.word	0x200001ac
 8002890:	200001b4 	.word	0x200001b4
 8002894:	2000019c 	.word	0x2000019c
 8002898:	20000098 	.word	0x20000098
 800289c:	20000094 	.word	0x20000094
 80028a0:	200001a4 	.word	0x200001a4
 80028a4:	200001a8 	.word	0x200001a8

080028a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80028ae:	4b26      	ldr	r3, [pc, #152]	; (8002948 <vTaskSwitchContext+0xa0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80028b6:	4b25      	ldr	r3, [pc, #148]	; (800294c <vTaskSwitchContext+0xa4>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80028bc:	e03e      	b.n	800293c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80028be:	4b23      	ldr	r3, [pc, #140]	; (800294c <vTaskSwitchContext+0xa4>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80028c4:	4b22      	ldr	r3, [pc, #136]	; (8002950 <vTaskSwitchContext+0xa8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	fab3 f383 	clz	r3, r3
 80028d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80028d2:	7afb      	ldrb	r3, [r7, #11]
 80028d4:	f1c3 031f 	rsb	r3, r3, #31
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	491e      	ldr	r1, [pc, #120]	; (8002954 <vTaskSwitchContext+0xac>)
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d109      	bne.n	8002902 <vTaskSwitchContext+0x5a>
	__asm volatile
 80028ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f2:	f383 8811 	msr	BASEPRI, r3
 80028f6:	f3bf 8f6f 	isb	sy
 80028fa:	f3bf 8f4f 	dsb	sy
 80028fe:	607b      	str	r3, [r7, #4]
 8002900:	e7fe      	b.n	8002900 <vTaskSwitchContext+0x58>
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4a11      	ldr	r2, [pc, #68]	; (8002954 <vTaskSwitchContext+0xac>)
 800290e:	4413      	add	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	3308      	adds	r3, #8
 8002924:	429a      	cmp	r2, r3
 8002926:	d104      	bne.n	8002932 <vTaskSwitchContext+0x8a>
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4a07      	ldr	r2, [pc, #28]	; (8002958 <vTaskSwitchContext+0xb0>)
 800293a:	6013      	str	r3, [r2, #0]
}
 800293c:	bf00      	nop
 800293e:	371c      	adds	r7, #28
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	200001bc 	.word	0x200001bc
 800294c:	200001a8 	.word	0x200001a8
 8002950:	2000019c 	.word	0x2000019c
 8002954:	20000098 	.word	0x20000098
 8002958:	20000094 	.word	0x20000094

0800295c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002964:	f000 f852 	bl	8002a0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002968:	4b06      	ldr	r3, [pc, #24]	; (8002984 <prvIdleTask+0x28>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d9f9      	bls.n	8002964 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <prvIdleTask+0x2c>)
 8002972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	f3bf 8f4f 	dsb	sy
 800297c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002980:	e7f0      	b.n	8002964 <prvIdleTask+0x8>
 8002982:	bf00      	nop
 8002984:	20000098 	.word	0x20000098
 8002988:	e000ed04 	.word	0xe000ed04

0800298c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002992:	2300      	movs	r3, #0
 8002994:	607b      	str	r3, [r7, #4]
 8002996:	e00c      	b.n	80029b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4a12      	ldr	r2, [pc, #72]	; (80029ec <prvInitialiseTaskLists+0x60>)
 80029a4:	4413      	add	r3, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff fbc5 	bl	8002136 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3301      	adds	r3, #1
 80029b0:	607b      	str	r3, [r7, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b06      	cmp	r3, #6
 80029b6:	d9ef      	bls.n	8002998 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80029b8:	480d      	ldr	r0, [pc, #52]	; (80029f0 <prvInitialiseTaskLists+0x64>)
 80029ba:	f7ff fbbc 	bl	8002136 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80029be:	480d      	ldr	r0, [pc, #52]	; (80029f4 <prvInitialiseTaskLists+0x68>)
 80029c0:	f7ff fbb9 	bl	8002136 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80029c4:	480c      	ldr	r0, [pc, #48]	; (80029f8 <prvInitialiseTaskLists+0x6c>)
 80029c6:	f7ff fbb6 	bl	8002136 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80029ca:	480c      	ldr	r0, [pc, #48]	; (80029fc <prvInitialiseTaskLists+0x70>)
 80029cc:	f7ff fbb3 	bl	8002136 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80029d0:	480b      	ldr	r0, [pc, #44]	; (8002a00 <prvInitialiseTaskLists+0x74>)
 80029d2:	f7ff fbb0 	bl	8002136 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80029d6:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <prvInitialiseTaskLists+0x78>)
 80029d8:	4a05      	ldr	r2, [pc, #20]	; (80029f0 <prvInitialiseTaskLists+0x64>)
 80029da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80029dc:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <prvInitialiseTaskLists+0x7c>)
 80029de:	4a05      	ldr	r2, [pc, #20]	; (80029f4 <prvInitialiseTaskLists+0x68>)
 80029e0:	601a      	str	r2, [r3, #0]
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000098 	.word	0x20000098
 80029f0:	20000124 	.word	0x20000124
 80029f4:	20000138 	.word	0x20000138
 80029f8:	20000154 	.word	0x20000154
 80029fc:	20000168 	.word	0x20000168
 8002a00:	20000180 	.word	0x20000180
 8002a04:	2000014c 	.word	0x2000014c
 8002a08:	20000150 	.word	0x20000150

08002a0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a12:	e019      	b.n	8002a48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002a14:	f000 f9a8 	bl	8002d68 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002a18:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <prvCheckTasksWaitingTermination+0x4c>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3304      	adds	r3, #4
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fc0c 	bl	8002242 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <prvCheckTasksWaitingTermination+0x50>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	4a0a      	ldr	r2, [pc, #40]	; (8002a5c <prvCheckTasksWaitingTermination+0x50>)
 8002a32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002a34:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <prvCheckTasksWaitingTermination+0x54>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	4a09      	ldr	r2, [pc, #36]	; (8002a60 <prvCheckTasksWaitingTermination+0x54>)
 8002a3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002a3e:	f000 f9c1 	bl	8002dc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f80e 	bl	8002a64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <prvCheckTasksWaitingTermination+0x54>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1e1      	bne.n	8002a14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20000168 	.word	0x20000168
 8002a5c:	20000194 	.word	0x20000194
 8002a60:	2000017c 	.word	0x2000017c

08002a64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 faf5 	bl	8003060 <vPortFree>
			vPortFree( pxTCB );
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 faf2 	bl	8003060 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ac4 <prvResetNextTaskUnblockTime+0x40>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <prvResetNextTaskUnblockTime+0x14>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <prvResetNextTaskUnblockTime+0x16>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d004      	beq.n	8002aa8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002a9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <prvResetNextTaskUnblockTime+0x44>)
 8002aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002aa6:	e008      	b.n	8002aba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002aa8:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <prvResetNextTaskUnblockTime+0x40>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <prvResetNextTaskUnblockTime+0x44>)
 8002ab8:	6013      	str	r3, [r2, #0]
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr
 8002ac4:	2000014c 	.word	0x2000014c
 8002ac8:	200001b4 	.word	0x200001b4

08002acc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002ad6:	4b29      	ldr	r3, [pc, #164]	; (8002b7c <prvAddCurrentTaskToDelayedList+0xb0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002adc:	4b28      	ldr	r3, [pc, #160]	; (8002b80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fbad 	bl	8002242 <uxListRemove>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10b      	bne.n	8002b06 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002aee:	4b24      	ldr	r3, [pc, #144]	; (8002b80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	2201      	movs	r2, #1
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43da      	mvns	r2, r3
 8002afc:	4b21      	ldr	r3, [pc, #132]	; (8002b84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4013      	ands	r3, r2
 8002b02:	4a20      	ldr	r2, [pc, #128]	; (8002b84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002b04:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0c:	d10a      	bne.n	8002b24 <prvAddCurrentTaskToDelayedList+0x58>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d007      	beq.n	8002b24 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b14:	4b1a      	ldr	r3, [pc, #104]	; (8002b80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	481a      	ldr	r0, [pc, #104]	; (8002b88 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002b1e:	f7ff fb35 	bl	800218c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002b22:	e026      	b.n	8002b72 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4413      	add	r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002b2c:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d209      	bcs.n	8002b50 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b3c:	4b13      	ldr	r3, [pc, #76]	; (8002b8c <prvAddCurrentTaskToDelayedList+0xc0>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	3304      	adds	r3, #4
 8002b46:	4619      	mov	r1, r3
 8002b48:	4610      	mov	r0, r2
 8002b4a:	f7ff fb42 	bl	80021d2 <vListInsert>
}
 8002b4e:	e010      	b.n	8002b72 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b50:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	f7ff fb38 	bl	80021d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002b62:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d202      	bcs.n	8002b72 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002b6c:	4a09      	ldr	r2, [pc, #36]	; (8002b94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	6013      	str	r3, [r2, #0]
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20000198 	.word	0x20000198
 8002b80:	20000094 	.word	0x20000094
 8002b84:	2000019c 	.word	0x2000019c
 8002b88:	20000180 	.word	0x20000180
 8002b8c:	20000150 	.word	0x20000150
 8002b90:	2000014c 	.word	0x2000014c
 8002b94:	200001b4 	.word	0x200001b4

08002b98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	3b04      	subs	r3, #4
 8002ba8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	3b04      	subs	r3, #4
 8002bb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f023 0201 	bic.w	r2, r3, #1
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	3b04      	subs	r3, #4
 8002bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002bc8:	4a08      	ldr	r2, [pc, #32]	; (8002bec <pxPortInitialiseStack+0x54>)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	3b14      	subs	r3, #20
 8002bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	3b20      	subs	r3, #32
 8002bde:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002be0:	68fb      	ldr	r3, [r7, #12]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr
 8002bec:	08002bf1 	.word	0x08002bf1

08002bf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002bfa:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <prvTaskExitError+0x4c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c02:	d009      	beq.n	8002c18 <prvTaskExitError+0x28>
 8002c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c08:	f383 8811 	msr	BASEPRI, r3
 8002c0c:	f3bf 8f6f 	isb	sy
 8002c10:	f3bf 8f4f 	dsb	sy
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	e7fe      	b.n	8002c16 <prvTaskExitError+0x26>
 8002c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1c:	f383 8811 	msr	BASEPRI, r3
 8002c20:	f3bf 8f6f 	isb	sy
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002c2a:	bf00      	nop
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0fc      	beq.n	8002c2c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002c32:	bf00      	nop
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	20000008 	.word	0x20000008

08002c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002c40:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <pxCurrentTCBConst2>)
 8002c42:	6819      	ldr	r1, [r3, #0]
 8002c44:	6808      	ldr	r0, [r1, #0]
 8002c46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002c4a:	f380 8809 	msr	PSP, r0
 8002c4e:	f3bf 8f6f 	isb	sy
 8002c52:	f04f 0000 	mov.w	r0, #0
 8002c56:	f380 8811 	msr	BASEPRI, r0
 8002c5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8002c5e:	4770      	bx	lr

08002c60 <pxCurrentTCBConst2>:
 8002c60:	20000094 	.word	0x20000094
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002c64:	bf00      	nop
 8002c66:	bf00      	nop

08002c68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002c68:	4806      	ldr	r0, [pc, #24]	; (8002c84 <prvPortStartFirstTask+0x1c>)
 8002c6a:	6800      	ldr	r0, [r0, #0]
 8002c6c:	6800      	ldr	r0, [r0, #0]
 8002c6e:	f380 8808 	msr	MSP, r0
 8002c72:	b662      	cpsie	i
 8002c74:	b661      	cpsie	f
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	f3bf 8f6f 	isb	sy
 8002c7e:	df00      	svc	0
 8002c80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002c82:	bf00      	nop
 8002c84:	e000ed08 	.word	0xe000ed08

08002c88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c8e:	4b31      	ldr	r3, [pc, #196]	; (8002d54 <xPortStartScheduler+0xcc>)
 8002c90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	22ff      	movs	r2, #255	; 0xff
 8002c9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	4b29      	ldr	r3, [pc, #164]	; (8002d58 <xPortStartScheduler+0xd0>)
 8002cb4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002cb6:	4b29      	ldr	r3, [pc, #164]	; (8002d5c <xPortStartScheduler+0xd4>)
 8002cb8:	2207      	movs	r2, #7
 8002cba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cbc:	e009      	b.n	8002cd2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002cbe:	4b27      	ldr	r3, [pc, #156]	; (8002d5c <xPortStartScheduler+0xd4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	4a25      	ldr	r2, [pc, #148]	; (8002d5c <xPortStartScheduler+0xd4>)
 8002cc6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cd2:	78fb      	ldrb	r3, [r7, #3]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cda:	2b80      	cmp	r3, #128	; 0x80
 8002cdc:	d0ef      	beq.n	8002cbe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002cde:	4b1f      	ldr	r3, [pc, #124]	; (8002d5c <xPortStartScheduler+0xd4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f1c3 0307 	rsb	r3, r3, #7
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d009      	beq.n	8002cfe <xPortStartScheduler+0x76>
 8002cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cee:	f383 8811 	msr	BASEPRI, r3
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	f3bf 8f4f 	dsb	sy
 8002cfa:	60bb      	str	r3, [r7, #8]
 8002cfc:	e7fe      	b.n	8002cfc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002cfe:	4b17      	ldr	r3, [pc, #92]	; (8002d5c <xPortStartScheduler+0xd4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	021b      	lsls	r3, r3, #8
 8002d04:	4a15      	ldr	r2, [pc, #84]	; (8002d5c <xPortStartScheduler+0xd4>)
 8002d06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d08:	4b14      	ldr	r3, [pc, #80]	; (8002d5c <xPortStartScheduler+0xd4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d10:	4a12      	ldr	r2, [pc, #72]	; (8002d5c <xPortStartScheduler+0xd4>)
 8002d12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002d1c:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <xPortStartScheduler+0xd8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a0f      	ldr	r2, [pc, #60]	; (8002d60 <xPortStartScheduler+0xd8>)
 8002d22:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002d28:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <xPortStartScheduler+0xd8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a0c      	ldr	r2, [pc, #48]	; (8002d60 <xPortStartScheduler+0xd8>)
 8002d2e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002d32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002d34:	f000 f8b0 	bl	8002e98 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002d38:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <xPortStartScheduler+0xdc>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002d3e:	f7ff ff93 	bl	8002c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002d42:	f7ff fdb1 	bl	80028a8 <vTaskSwitchContext>
	prvTaskExitError();
 8002d46:	f7ff ff53 	bl	8002bf0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	e000e400 	.word	0xe000e400
 8002d58:	200001c0 	.word	0x200001c0
 8002d5c:	200001c4 	.word	0x200001c4
 8002d60:	e000ed20 	.word	0xe000ed20
 8002d64:	20000008 	.word	0x20000008

08002d68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d72:	f383 8811 	msr	BASEPRI, r3
 8002d76:	f3bf 8f6f 	isb	sy
 8002d7a:	f3bf 8f4f 	dsb	sy
 8002d7e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002d80:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <vPortEnterCritical+0x54>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	3301      	adds	r3, #1
 8002d86:	4a0d      	ldr	r2, [pc, #52]	; (8002dbc <vPortEnterCritical+0x54>)
 8002d88:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002d8a:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <vPortEnterCritical+0x54>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d10e      	bne.n	8002db0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d92:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <vPortEnterCritical+0x58>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d009      	beq.n	8002db0 <vPortEnterCritical+0x48>
 8002d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da0:	f383 8811 	msr	BASEPRI, r3
 8002da4:	f3bf 8f6f 	isb	sy
 8002da8:	f3bf 8f4f 	dsb	sy
 8002dac:	603b      	str	r3, [r7, #0]
 8002dae:	e7fe      	b.n	8002dae <vPortEnterCritical+0x46>
	}
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	20000008 	.word	0x20000008
 8002dc0:	e000ed04 	.word	0xe000ed04

08002dc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002dca:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <vPortExitCritical+0x48>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d109      	bne.n	8002de6 <vPortExitCritical+0x22>
 8002dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd6:	f383 8811 	msr	BASEPRI, r3
 8002dda:	f3bf 8f6f 	isb	sy
 8002dde:	f3bf 8f4f 	dsb	sy
 8002de2:	607b      	str	r3, [r7, #4]
 8002de4:	e7fe      	b.n	8002de4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002de6:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <vPortExitCritical+0x48>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	4a07      	ldr	r2, [pc, #28]	; (8002e0c <vPortExitCritical+0x48>)
 8002dee:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002df0:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <vPortExitCritical+0x48>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d104      	bne.n	8002e02 <vPortExitCritical+0x3e>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr
 8002e0c:	20000008 	.word	0x20000008

08002e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002e10:	f3ef 8009 	mrs	r0, PSP
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	4b0d      	ldr	r3, [pc, #52]	; (8002e50 <pxCurrentTCBConst>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002e20:	6010      	str	r0, [r2, #0]
 8002e22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002e26:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002e2a:	f380 8811 	msr	BASEPRI, r0
 8002e2e:	f7ff fd3b 	bl	80028a8 <vTaskSwitchContext>
 8002e32:	f04f 0000 	mov.w	r0, #0
 8002e36:	f380 8811 	msr	BASEPRI, r0
 8002e3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002e3e:	6819      	ldr	r1, [r3, #0]
 8002e40:	6808      	ldr	r0, [r1, #0]
 8002e42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002e46:	f380 8809 	msr	PSP, r0
 8002e4a:	f3bf 8f6f 	isb	sy
 8002e4e:	4770      	bx	lr

08002e50 <pxCurrentTCBConst>:
 8002e50:	20000094 	.word	0x20000094
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop

08002e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8002e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e62:	f383 8811 	msr	BASEPRI, r3
 8002e66:	f3bf 8f6f 	isb	sy
 8002e6a:	f3bf 8f4f 	dsb	sy
 8002e6e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002e70:	f7ff fc5e 	bl	8002730 <xTaskIncrementTick>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e7a:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <SysTick_Handler+0x3c>)
 8002e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	2300      	movs	r3, #0
 8002e84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8002e8c:	bf00      	nop
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	e000ed04 	.word	0xe000ed04

08002e98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <vPortSetupTimerInterrupt+0x30>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002ea2:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <vPortSetupTimerInterrupt+0x34>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002ea8:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <vPortSetupTimerInterrupt+0x38>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a09      	ldr	r2, [pc, #36]	; (8002ed4 <vPortSetupTimerInterrupt+0x3c>)
 8002eae:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb2:	099b      	lsrs	r3, r3, #6
 8002eb4:	4a08      	ldr	r2, [pc, #32]	; (8002ed8 <vPortSetupTimerInterrupt+0x40>)
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002eba:	4b03      	ldr	r3, [pc, #12]	; (8002ec8 <vPortSetupTimerInterrupt+0x30>)
 8002ebc:	2207      	movs	r2, #7
 8002ebe:	601a      	str	r2, [r3, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr
 8002ec8:	e000e010 	.word	0xe000e010
 8002ecc:	e000e018 	.word	0xe000e018
 8002ed0:	20000010 	.word	0x20000010
 8002ed4:	10624dd3 	.word	0x10624dd3
 8002ed8:	e000e014 	.word	0xe000e014

08002edc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08a      	sub	sp, #40	; 0x28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002ee8:	f7ff fb78 	bl	80025dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002eec:	4b57      	ldr	r3, [pc, #348]	; (800304c <pvPortMalloc+0x170>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002ef4:	f000 f90c 	bl	8003110 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002ef8:	4b55      	ldr	r3, [pc, #340]	; (8003050 <pvPortMalloc+0x174>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f040 808c 	bne.w	800301e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d01c      	beq.n	8002f46 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002f0c:	2208      	movs	r2, #8
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4413      	add	r3, r2
 8002f12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d013      	beq.n	8002f46 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f023 0307 	bic.w	r3, r3, #7
 8002f24:	3308      	adds	r3, #8
 8002f26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d009      	beq.n	8002f46 <pvPortMalloc+0x6a>
	__asm volatile
 8002f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f36:	f383 8811 	msr	BASEPRI, r3
 8002f3a:	f3bf 8f6f 	isb	sy
 8002f3e:	f3bf 8f4f 	dsb	sy
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	e7fe      	b.n	8002f44 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d068      	beq.n	800301e <pvPortMalloc+0x142>
 8002f4c:	4b41      	ldr	r3, [pc, #260]	; (8003054 <pvPortMalloc+0x178>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d863      	bhi.n	800301e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002f56:	4b40      	ldr	r3, [pc, #256]	; (8003058 <pvPortMalloc+0x17c>)
 8002f58:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002f5a:	4b3f      	ldr	r3, [pc, #252]	; (8003058 <pvPortMalloc+0x17c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f60:	e004      	b.n	8002f6c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d903      	bls.n	8002f7e <pvPortMalloc+0xa2>
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f1      	bne.n	8002f62 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002f7e:	4b33      	ldr	r3, [pc, #204]	; (800304c <pvPortMalloc+0x170>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d04a      	beq.n	800301e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2208      	movs	r2, #8
 8002f8e:	4413      	add	r3, r2
 8002f90:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	1ad2      	subs	r2, r2, r3
 8002fa2:	2308      	movs	r3, #8
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d91e      	bls.n	8002fe8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4413      	add	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d009      	beq.n	8002fd0 <pvPortMalloc+0xf4>
 8002fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc0:	f383 8811 	msr	BASEPRI, r3
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	e7fe      	b.n	8002fce <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	1ad2      	subs	r2, r2, r3
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002fe2:	69b8      	ldr	r0, [r7, #24]
 8002fe4:	f000 f8f6 	bl	80031d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002fe8:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <pvPortMalloc+0x178>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	4a18      	ldr	r2, [pc, #96]	; (8003054 <pvPortMalloc+0x178>)
 8002ff4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002ff6:	4b17      	ldr	r3, [pc, #92]	; (8003054 <pvPortMalloc+0x178>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	4b18      	ldr	r3, [pc, #96]	; (800305c <pvPortMalloc+0x180>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d203      	bcs.n	800300a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003002:	4b14      	ldr	r3, [pc, #80]	; (8003054 <pvPortMalloc+0x178>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a15      	ldr	r2, [pc, #84]	; (800305c <pvPortMalloc+0x180>)
 8003008:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	4b10      	ldr	r3, [pc, #64]	; (8003050 <pvPortMalloc+0x174>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	431a      	orrs	r2, r3
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800301e:	f7ff faeb 	bl	80025f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	2b00      	cmp	r3, #0
 800302a:	d009      	beq.n	8003040 <pvPortMalloc+0x164>
 800302c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003030:	f383 8811 	msr	BASEPRI, r3
 8003034:	f3bf 8f6f 	isb	sy
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	e7fe      	b.n	800303e <pvPortMalloc+0x162>
	return pvReturn;
 8003040:	69fb      	ldr	r3, [r7, #28]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3728      	adds	r7, #40	; 0x28
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000dd0 	.word	0x20000dd0
 8003050:	20000ddc 	.word	0x20000ddc
 8003054:	20000dd4 	.word	0x20000dd4
 8003058:	20000dc8 	.word	0x20000dc8
 800305c:	20000dd8 	.word	0x20000dd8

08003060 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d046      	beq.n	8003100 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003072:	2308      	movs	r3, #8
 8003074:	425b      	negs	r3, r3
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4413      	add	r3, r2
 800307a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	4b20      	ldr	r3, [pc, #128]	; (8003108 <vPortFree+0xa8>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4013      	ands	r3, r2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d109      	bne.n	80030a2 <vPortFree+0x42>
 800308e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003092:	f383 8811 	msr	BASEPRI, r3
 8003096:	f3bf 8f6f 	isb	sy
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	e7fe      	b.n	80030a0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d009      	beq.n	80030be <vPortFree+0x5e>
 80030aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	60bb      	str	r3, [r7, #8]
 80030bc:	e7fe      	b.n	80030bc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	4b11      	ldr	r3, [pc, #68]	; (8003108 <vPortFree+0xa8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d019      	beq.n	8003100 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d115      	bne.n	8003100 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <vPortFree+0xa8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	43db      	mvns	r3, r3
 80030de:	401a      	ands	r2, r3
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80030e4:	f7ff fa7a 	bl	80025dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	4b07      	ldr	r3, [pc, #28]	; (800310c <vPortFree+0xac>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4413      	add	r3, r2
 80030f2:	4a06      	ldr	r2, [pc, #24]	; (800310c <vPortFree+0xac>)
 80030f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80030f6:	6938      	ldr	r0, [r7, #16]
 80030f8:	f000 f86c 	bl	80031d4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80030fc:	f7ff fa7c 	bl	80025f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003100:	bf00      	nop
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	20000ddc 	.word	0x20000ddc
 800310c:	20000dd4 	.word	0x20000dd4

08003110 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003116:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800311a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800311c:	4b27      	ldr	r3, [pc, #156]	; (80031bc <prvHeapInit+0xac>)
 800311e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00c      	beq.n	8003144 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	3307      	adds	r3, #7
 800312e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0307 	bic.w	r3, r3, #7
 8003136:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	4a1f      	ldr	r2, [pc, #124]	; (80031bc <prvHeapInit+0xac>)
 8003140:	4413      	add	r3, r2
 8003142:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003148:	4a1d      	ldr	r2, [pc, #116]	; (80031c0 <prvHeapInit+0xb0>)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800314e:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <prvHeapInit+0xb0>)
 8003150:	2200      	movs	r2, #0
 8003152:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	4413      	add	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800315c:	2208      	movs	r2, #8
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f023 0307 	bic.w	r3, r3, #7
 800316a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4a15      	ldr	r2, [pc, #84]	; (80031c4 <prvHeapInit+0xb4>)
 8003170:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003172:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <prvHeapInit+0xb4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2200      	movs	r2, #0
 8003178:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800317a:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <prvHeapInit+0xb4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	1ad2      	subs	r2, r2, r3
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <prvHeapInit+0xb4>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	4a0a      	ldr	r2, [pc, #40]	; (80031c8 <prvHeapInit+0xb8>)
 800319e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	4a09      	ldr	r2, [pc, #36]	; (80031cc <prvHeapInit+0xbc>)
 80031a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80031a8:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <prvHeapInit+0xc0>)
 80031aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80031ae:	601a      	str	r2, [r3, #0]
}
 80031b0:	bf00      	nop
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	200001c8 	.word	0x200001c8
 80031c0:	20000dc8 	.word	0x20000dc8
 80031c4:	20000dd0 	.word	0x20000dd0
 80031c8:	20000dd8 	.word	0x20000dd8
 80031cc:	20000dd4 	.word	0x20000dd4
 80031d0:	20000ddc 	.word	0x20000ddc

080031d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80031dc:	4b27      	ldr	r3, [pc, #156]	; (800327c <prvInsertBlockIntoFreeList+0xa8>)
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	e002      	b.n	80031e8 <prvInsertBlockIntoFreeList+0x14>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d8f7      	bhi.n	80031e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	4413      	add	r3, r2
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	429a      	cmp	r2, r3
 8003202:	d108      	bne.n	8003216 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	441a      	add	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	441a      	add	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d118      	bne.n	800325c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	4b14      	ldr	r3, [pc, #80]	; (8003280 <prvInsertBlockIntoFreeList+0xac>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d00d      	beq.n	8003252 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	441a      	add	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	e008      	b.n	8003264 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003252:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <prvInsertBlockIntoFreeList+0xac>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	e003      	b.n	8003264 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	429a      	cmp	r2, r3
 800326a:	d002      	beq.n	8003272 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003272:	bf00      	nop
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr
 800327c:	20000dc8 	.word	0x20000dc8
 8003280:	20000dd0 	.word	0x20000dd0

08003284 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003284:	b5b0      	push	{r4, r5, r7, lr}
 8003286:	b090      	sub	sp, #64	; 0x40
 8003288:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of GameTask */
  osThreadDef(GameTask, GameFunc, osPriorityNormal, 0, 128);
 800328a:	4b1a      	ldr	r3, [pc, #104]	; (80032f4 <MX_FREERTOS_Init+0x70>)
 800328c:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8003290:	461d      	mov	r5, r3
 8003292:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003296:	682b      	ldr	r3, [r5, #0]
 8003298:	6023      	str	r3, [r4, #0]
  GameTaskHandle = osThreadCreate(osThread(GameTask), NULL);
 800329a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800329e:	2100      	movs	r1, #0
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fe ff0d 	bl	80020c0 <osThreadCreate>
 80032a6:	4602      	mov	r2, r0
 80032a8:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <MX_FREERTOS_Init+0x74>)
 80032aa:	601a      	str	r2, [r3, #0]

  /* definition and creation of TimeTask */
  osThreadDef(TimeTask, TimeFunc, osPriorityNormal, 0, 128);
 80032ac:	4b13      	ldr	r3, [pc, #76]	; (80032fc <MX_FREERTOS_Init+0x78>)
 80032ae:	f107 0418 	add.w	r4, r7, #24
 80032b2:	461d      	mov	r5, r3
 80032b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032b8:	682b      	ldr	r3, [r5, #0]
 80032ba:	6023      	str	r3, [r4, #0]
  TimeTaskHandle = osThreadCreate(osThread(TimeTask), NULL);
 80032bc:	f107 0318 	add.w	r3, r7, #24
 80032c0:	2100      	movs	r1, #0
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe fefc 	bl	80020c0 <osThreadCreate>
 80032c8:	4602      	mov	r2, r0
 80032ca:	4b0d      	ldr	r3, [pc, #52]	; (8003300 <MX_FREERTOS_Init+0x7c>)
 80032cc:	601a      	str	r2, [r3, #0]

  /* definition and creation of LEDTask */
  osThreadDef(LEDTask, LEDFunc, osPriorityNormal, 0, 128);
 80032ce:	4b0d      	ldr	r3, [pc, #52]	; (8003304 <MX_FREERTOS_Init+0x80>)
 80032d0:	1d3c      	adds	r4, r7, #4
 80032d2:	461d      	mov	r5, r3
 80032d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032d8:	682b      	ldr	r3, [r5, #0]
 80032da:	6023      	str	r3, [r4, #0]
  LEDTaskHandle = osThreadCreate(osThread(LEDTask), NULL);
 80032dc:	1d3b      	adds	r3, r7, #4
 80032de:	2100      	movs	r1, #0
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fe feed 	bl	80020c0 <osThreadCreate>
 80032e6:	4602      	mov	r2, r0
 80032e8:	4b07      	ldr	r3, [pc, #28]	; (8003308 <MX_FREERTOS_Init+0x84>)
 80032ea:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80032ec:	bf00      	nop
 80032ee:	3740      	adds	r7, #64	; 0x40
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bdb0      	pop	{r4, r5, r7, pc}
 80032f4:	0800a2a8 	.word	0x0800a2a8
 80032f8:	20000e10 	.word	0x20000e10
 80032fc:	0800a2c8 	.word	0x0800a2c8
 8003300:	20000e14 	.word	0x20000e14
 8003304:	0800a2e4 	.word	0x0800a2e4
 8003308:	20000e0c 	.word	0x20000e0c

0800330c <GameFunc>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_GameFunc */
void GameFunc(void const * argument)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN GameFunc */
  /* Infinite loop */
  for(;;)
  {
	  launch();
 8003314:	f006 f8de 	bl	80094d4 <launch>
 8003318:	e7fc      	b.n	8003314 <GameFunc+0x8>
	...

0800331c <TimeFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TimeFunc */
void TimeFunc(void const * argument)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TimeFunc */
  /* Infinite loop */
  for(;;)
  {
	milisecond++;
 8003324:	4b04      	ldr	r3, [pc, #16]	; (8003338 <TimeFunc+0x1c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	3301      	adds	r3, #1
 800332a:	4a03      	ldr	r2, [pc, #12]	; (8003338 <TimeFunc+0x1c>)
 800332c:	6013      	str	r3, [r2, #0]
    osDelay(1);
 800332e:	2001      	movs	r0, #1
 8003330:	f7fe feed 	bl	800210e <osDelay>
	milisecond++;
 8003334:	e7f6      	b.n	8003324 <TimeFunc+0x8>
 8003336:	bf00      	nop
 8003338:	20000de0 	.word	0x20000de0

0800333c <LEDFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LEDFunc */
void LEDFunc(void const * argument)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LEDFunc */
  /* Infinite loop */
  for(;;)
  {
	if(green_blink){
 8003344:	4b17      	ldr	r3, [pc, #92]	; (80033a4 <LEDFunc+0x68>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d010      	beq.n	800336e <LEDFunc+0x32>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800334c:	2104      	movs	r1, #4
 800334e:	4816      	ldr	r0, [pc, #88]	; (80033a8 <LEDFunc+0x6c>)
 8003350:	f7fd fe1a 	bl	8000f88 <HAL_GPIO_TogglePin>
		osDelay(250);
 8003354:	20fa      	movs	r0, #250	; 0xfa
 8003356:	f7fe feda 	bl	800210e <osDelay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800335a:	2104      	movs	r1, #4
 800335c:	4812      	ldr	r0, [pc, #72]	; (80033a8 <LEDFunc+0x6c>)
 800335e:	f7fd fe13 	bl	8000f88 <HAL_GPIO_TogglePin>
		osDelay(250);
 8003362:	20fa      	movs	r0, #250	; 0xfa
 8003364:	f7fe fed3 	bl	800210e <osDelay>
		green_blink = 0;
 8003368:	4b0e      	ldr	r3, [pc, #56]	; (80033a4 <LEDFunc+0x68>)
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
	}
	if(red_blink){
 800336e:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <LEDFunc+0x70>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d012      	beq.n	800339c <LEDFunc+0x60>
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8003376:	f44f 7180 	mov.w	r1, #256	; 0x100
 800337a:	480d      	ldr	r0, [pc, #52]	; (80033b0 <LEDFunc+0x74>)
 800337c:	f7fd fe04 	bl	8000f88 <HAL_GPIO_TogglePin>
		osDelay(250);
 8003380:	20fa      	movs	r0, #250	; 0xfa
 8003382:	f7fe fec4 	bl	800210e <osDelay>
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8003386:	f44f 7180 	mov.w	r1, #256	; 0x100
 800338a:	4809      	ldr	r0, [pc, #36]	; (80033b0 <LEDFunc+0x74>)
 800338c:	f7fd fdfc 	bl	8000f88 <HAL_GPIO_TogglePin>
		osDelay(250);
 8003390:	20fa      	movs	r0, #250	; 0xfa
 8003392:	f7fe febc 	bl	800210e <osDelay>
		red_blink = 0;
 8003396:	4b05      	ldr	r3, [pc, #20]	; (80033ac <LEDFunc+0x70>)
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
	}
    osDelay(1);
 800339c:	2001      	movs	r0, #1
 800339e:	f7fe feb6 	bl	800210e <osDelay>
	if(green_blink){
 80033a2:	e7cf      	b.n	8003344 <LEDFunc+0x8>
 80033a4:	20000de4 	.word	0x20000de4
 80033a8:	40011400 	.word	0x40011400
 80033ac:	20000de8 	.word	0x20000de8
 80033b0:	40010800 	.word	0x40010800

080033b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b088      	sub	sp, #32
 80033b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ba:	f107 0310 	add.w	r3, r7, #16
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	605a      	str	r2, [r3, #4]
 80033c4:	609a      	str	r2, [r3, #8]
 80033c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033c8:	4b34      	ldr	r3, [pc, #208]	; (800349c <MX_GPIO_Init+0xe8>)
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	4a33      	ldr	r2, [pc, #204]	; (800349c <MX_GPIO_Init+0xe8>)
 80033ce:	f043 0320 	orr.w	r3, r3, #32
 80033d2:	6193      	str	r3, [r2, #24]
 80033d4:	4b31      	ldr	r3, [pc, #196]	; (800349c <MX_GPIO_Init+0xe8>)
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e0:	4b2e      	ldr	r3, [pc, #184]	; (800349c <MX_GPIO_Init+0xe8>)
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	4a2d      	ldr	r2, [pc, #180]	; (800349c <MX_GPIO_Init+0xe8>)
 80033e6:	f043 0304 	orr.w	r3, r3, #4
 80033ea:	6193      	str	r3, [r2, #24]
 80033ec:	4b2b      	ldr	r3, [pc, #172]	; (800349c <MX_GPIO_Init+0xe8>)
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033f8:	4b28      	ldr	r3, [pc, #160]	; (800349c <MX_GPIO_Init+0xe8>)
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	4a27      	ldr	r2, [pc, #156]	; (800349c <MX_GPIO_Init+0xe8>)
 80033fe:	f043 0310 	orr.w	r3, r3, #16
 8003402:	6193      	str	r3, [r2, #24]
 8003404:	4b25      	ldr	r3, [pc, #148]	; (800349c <MX_GPIO_Init+0xe8>)
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	607b      	str	r3, [r7, #4]
 800340e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8003410:	2200      	movs	r2, #0
 8003412:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003416:	4822      	ldr	r0, [pc, #136]	; (80034a0 <MX_GPIO_Init+0xec>)
 8003418:	f7fd fd9e 	bl	8000f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800341c:	2200      	movs	r2, #0
 800341e:	2104      	movs	r1, #4
 8003420:	4820      	ldr	r0, [pc, #128]	; (80034a4 <MX_GPIO_Init+0xf0>)
 8003422:	f7fd fd99 	bl	8000f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8003426:	2320      	movs	r3, #32
 8003428:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800342e:	2301      	movs	r3, #1
 8003430:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8003432:	f107 0310 	add.w	r3, r7, #16
 8003436:	4619      	mov	r1, r3
 8003438:	481b      	ldr	r0, [pc, #108]	; (80034a8 <MX_GPIO_Init+0xf4>)
 800343a:	f7fd fc23 	bl	8000c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 800343e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003442:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003444:	2301      	movs	r3, #1
 8003446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003448:	2300      	movs	r3, #0
 800344a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344c:	2302      	movs	r3, #2
 800344e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8003450:	f107 0310 	add.w	r3, r7, #16
 8003454:	4619      	mov	r1, r3
 8003456:	4812      	ldr	r0, [pc, #72]	; (80034a0 <MX_GPIO_Init+0xec>)
 8003458:	f7fd fc14 	bl	8000c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 800345c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003466:	2301      	movs	r3, #1
 8003468:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 800346a:	f107 0310 	add.w	r3, r7, #16
 800346e:	4619      	mov	r1, r3
 8003470:	480b      	ldr	r0, [pc, #44]	; (80034a0 <MX_GPIO_Init+0xec>)
 8003472:	f7fd fc07 	bl	8000c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8003476:	2304      	movs	r3, #4
 8003478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800347a:	2301      	movs	r3, #1
 800347c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347e:	2300      	movs	r3, #0
 8003480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003482:	2302      	movs	r3, #2
 8003484:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8003486:	f107 0310 	add.w	r3, r7, #16
 800348a:	4619      	mov	r1, r3
 800348c:	4805      	ldr	r0, [pc, #20]	; (80034a4 <MX_GPIO_Init+0xf0>)
 800348e:	f7fd fbf9 	bl	8000c84 <HAL_GPIO_Init>

}
 8003492:	bf00      	nop
 8003494:	3720      	adds	r7, #32
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	40021000 	.word	0x40021000
 80034a0:	40010800 	.word	0x40010800
 80034a4:	40011400 	.word	0x40011400
 80034a8:	40011000 	.word	0x40011000

080034ac <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	4603      	mov	r3, r0
 80034b4:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 80034b6:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <LCD_WR_REG+0x40>)
 80034b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034bc:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 80034be:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <LCD_WR_REG+0x40>)
 80034c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034c4:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 80034c6:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <LCD_WR_REG+0x44>)
 80034c8:	88fb      	ldrh	r3, [r7, #6]
 80034ca:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 80034cc:	4b07      	ldr	r3, [pc, #28]	; (80034ec <LCD_WR_REG+0x40>)
 80034ce:	2280      	movs	r2, #128	; 0x80
 80034d0:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80034d2:	4b06      	ldr	r3, [pc, #24]	; (80034ec <LCD_WR_REG+0x40>)
 80034d4:	2280      	movs	r2, #128	; 0x80
 80034d6:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80034d8:	4b04      	ldr	r3, [pc, #16]	; (80034ec <LCD_WR_REG+0x40>)
 80034da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034de:	611a      	str	r2, [r3, #16]
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	40011000 	.word	0x40011000
 80034f0:	40010c00 	.word	0x40010c00

080034f4 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 80034fe:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <LCD_WR_DATAX+0x40>)
 8003500:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003504:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8003506:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <LCD_WR_DATAX+0x40>)
 8003508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800350c:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 800350e:	4a0a      	ldr	r2, [pc, #40]	; (8003538 <LCD_WR_DATAX+0x44>)
 8003510:	88fb      	ldrh	r3, [r7, #6]
 8003512:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8003514:	4b07      	ldr	r3, [pc, #28]	; (8003534 <LCD_WR_DATAX+0x40>)
 8003516:	2280      	movs	r2, #128	; 0x80
 8003518:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 800351a:	4b06      	ldr	r3, [pc, #24]	; (8003534 <LCD_WR_DATAX+0x40>)
 800351c:	2280      	movs	r2, #128	; 0x80
 800351e:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8003520:	4b04      	ldr	r3, [pc, #16]	; (8003534 <LCD_WR_DATAX+0x40>)
 8003522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003526:	611a      	str	r2, [r3, #16]
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	40011000 	.word	0x40011000
 8003538:	40010c00 	.word	0x40010c00

0800353c <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8003542:	4b1d      	ldr	r3, [pc, #116]	; (80035b8 <LCD_RD_DATA+0x7c>)
 8003544:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8003548:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 800354a:	4b1b      	ldr	r3, [pc, #108]	; (80035b8 <LCD_RD_DATA+0x7c>)
 800354c:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8003550:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8003552:	4b19      	ldr	r3, [pc, #100]	; (80035b8 <LCD_RD_DATA+0x7c>)
 8003554:	2200      	movs	r2, #0
 8003556:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8003558:	4b18      	ldr	r3, [pc, #96]	; (80035bc <LCD_RD_DATA+0x80>)
 800355a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800355e:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8003560:	4b16      	ldr	r3, [pc, #88]	; (80035bc <LCD_RD_DATA+0x80>)
 8003562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003566:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8003568:	4b14      	ldr	r3, [pc, #80]	; (80035bc <LCD_RD_DATA+0x80>)
 800356a:	2240      	movs	r2, #64	; 0x40
 800356c:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 800356e:	4b14      	ldr	r3, [pc, #80]	; (80035c0 <LCD_RD_DATA+0x84>)
 8003570:	889b      	ldrh	r3, [r3, #4]
 8003572:	f648 1289 	movw	r2, #35209	; 0x8989
 8003576:	4293      	cmp	r3, r2
 8003578:	d102      	bne.n	8003580 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 800357a:	2001      	movs	r0, #1
 800357c:	f7fd fa80 	bl	8000a80 <HAL_Delay>
	t = DATAIN
 8003580:	4b0d      	ldr	r3, [pc, #52]	; (80035b8 <LCD_RD_DATA+0x7c>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8003586:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <LCD_RD_DATA+0x80>)
 8003588:	2240      	movs	r2, #64	; 0x40
 800358a:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 800358c:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <LCD_RD_DATA+0x80>)
 800358e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003592:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8003594:	4b08      	ldr	r3, [pc, #32]	; (80035b8 <LCD_RD_DATA+0x7c>)
 8003596:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800359a:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 800359c:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <LCD_RD_DATA+0x7c>)
 800359e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80035a2:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 80035a4:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <LCD_RD_DATA+0x7c>)
 80035a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035aa:	60da      	str	r2, [r3, #12]
	return t;
 80035ac:	88fb      	ldrh	r3, [r7, #6]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40010c00 	.word	0x40010c00
 80035bc:	40011000 	.word	0x40011000
 80035c0:	20000e18 	.word	0x20000e18

080035c4 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	460a      	mov	r2, r1
 80035ce:	80fb      	strh	r3, [r7, #6]
 80035d0:	4613      	mov	r3, r2
 80035d2:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 80035d4:	88fb      	ldrh	r3, [r7, #6]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff ff68 	bl	80034ac <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 80035dc:	4b0c      	ldr	r3, [pc, #48]	; (8003610 <LCD_WriteReg+0x4c>)
 80035de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035e2:	611a      	str	r2, [r3, #16]
 80035e4:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <LCD_WriteReg+0x4c>)
 80035e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ea:	615a      	str	r2, [r3, #20]
 80035ec:	4a09      	ldr	r2, [pc, #36]	; (8003614 <LCD_WriteReg+0x50>)
 80035ee:	88bb      	ldrh	r3, [r7, #4]
 80035f0:	60d3      	str	r3, [r2, #12]
 80035f2:	4b07      	ldr	r3, [pc, #28]	; (8003610 <LCD_WriteReg+0x4c>)
 80035f4:	2280      	movs	r2, #128	; 0x80
 80035f6:	615a      	str	r2, [r3, #20]
 80035f8:	4b05      	ldr	r3, [pc, #20]	; (8003610 <LCD_WriteReg+0x4c>)
 80035fa:	2280      	movs	r2, #128	; 0x80
 80035fc:	611a      	str	r2, [r3, #16]
 80035fe:	4b04      	ldr	r3, [pc, #16]	; (8003610 <LCD_WriteReg+0x4c>)
 8003600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003604:	611a      	str	r2, [r3, #16]
}
 8003606:	bf00      	nop
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40011000 	.word	0x40011000
 8003614:	40010c00 	.word	0x40010c00

08003618 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8003622:	88fb      	ldrh	r3, [r7, #6]
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff ff41 	bl	80034ac <LCD_WR_REG>
	return LCD_RD_DATA();
 800362a:	f7ff ff87 	bl	800353c <LCD_RD_DATA>
 800362e:	4603      	mov	r3, r0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 800363c:	4b03      	ldr	r3, [pc, #12]	; (800364c <LCD_WriteRAM_Prepare+0x14>)
 800363e:	891b      	ldrh	r3, [r3, #8]
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff ff33 	bl	80034ac <LCD_WR_REG>
}
 8003646:	bf00      	nop
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20000e18 	.word	0x20000e18

08003650 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	4603      	mov	r3, r0
 8003658:	460a      	mov	r2, r1
 800365a:	80fb      	strh	r3, [r7, #6]
 800365c:	4613      	mov	r3, r2
 800365e:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8003660:	4b73      	ldr	r3, [pc, #460]	; (8003830 <LCD_SetCursor+0x1e0>)
 8003662:	889b      	ldrh	r3, [r3, #4]
 8003664:	f249 3241 	movw	r2, #37697	; 0x9341
 8003668:	4293      	cmp	r3, r2
 800366a:	d005      	beq.n	8003678 <LCD_SetCursor+0x28>
 800366c:	4b70      	ldr	r3, [pc, #448]	; (8003830 <LCD_SetCursor+0x1e0>)
 800366e:	889b      	ldrh	r3, [r3, #4]
 8003670:	f245 3210 	movw	r2, #21264	; 0x5310
 8003674:	4293      	cmp	r3, r2
 8003676:	d164      	bne.n	8003742 <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8003678:	4b6d      	ldr	r3, [pc, #436]	; (8003830 <LCD_SetCursor+0x1e0>)
 800367a:	895b      	ldrh	r3, [r3, #10]
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff ff15 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8003682:	4b6c      	ldr	r3, [pc, #432]	; (8003834 <LCD_SetCursor+0x1e4>)
 8003684:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003688:	611a      	str	r2, [r3, #16]
 800368a:	4b6a      	ldr	r3, [pc, #424]	; (8003834 <LCD_SetCursor+0x1e4>)
 800368c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003690:	615a      	str	r2, [r3, #20]
 8003692:	88fb      	ldrh	r3, [r7, #6]
 8003694:	0a1b      	lsrs	r3, r3, #8
 8003696:	b29a      	uxth	r2, r3
 8003698:	4b67      	ldr	r3, [pc, #412]	; (8003838 <LCD_SetCursor+0x1e8>)
 800369a:	60da      	str	r2, [r3, #12]
 800369c:	4b65      	ldr	r3, [pc, #404]	; (8003834 <LCD_SetCursor+0x1e4>)
 800369e:	2280      	movs	r2, #128	; 0x80
 80036a0:	615a      	str	r2, [r3, #20]
 80036a2:	4b64      	ldr	r3, [pc, #400]	; (8003834 <LCD_SetCursor+0x1e4>)
 80036a4:	2280      	movs	r2, #128	; 0x80
 80036a6:	611a      	str	r2, [r3, #16]
 80036a8:	4b62      	ldr	r3, [pc, #392]	; (8003834 <LCD_SetCursor+0x1e4>)
 80036aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ae:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 80036b0:	4b60      	ldr	r3, [pc, #384]	; (8003834 <LCD_SetCursor+0x1e4>)
 80036b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036b6:	611a      	str	r2, [r3, #16]
 80036b8:	4b5e      	ldr	r3, [pc, #376]	; (8003834 <LCD_SetCursor+0x1e4>)
 80036ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036be:	615a      	str	r2, [r3, #20]
 80036c0:	88fb      	ldrh	r3, [r7, #6]
 80036c2:	4a5d      	ldr	r2, [pc, #372]	; (8003838 <LCD_SetCursor+0x1e8>)
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	60d3      	str	r3, [r2, #12]
 80036c8:	4b5a      	ldr	r3, [pc, #360]	; (8003834 <LCD_SetCursor+0x1e4>)
 80036ca:	2280      	movs	r2, #128	; 0x80
 80036cc:	615a      	str	r2, [r3, #20]
 80036ce:	4b59      	ldr	r3, [pc, #356]	; (8003834 <LCD_SetCursor+0x1e4>)
 80036d0:	2280      	movs	r2, #128	; 0x80
 80036d2:	611a      	str	r2, [r3, #16]
 80036d4:	4b57      	ldr	r3, [pc, #348]	; (8003834 <LCD_SetCursor+0x1e4>)
 80036d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036da:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80036dc:	4b54      	ldr	r3, [pc, #336]	; (8003830 <LCD_SetCursor+0x1e0>)
 80036de:	899b      	ldrh	r3, [r3, #12]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff fee3 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80036e6:	4b53      	ldr	r3, [pc, #332]	; (8003834 <LCD_SetCursor+0x1e4>)
 80036e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036ec:	611a      	str	r2, [r3, #16]
 80036ee:	4b51      	ldr	r3, [pc, #324]	; (8003834 <LCD_SetCursor+0x1e4>)
 80036f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036f4:	615a      	str	r2, [r3, #20]
 80036f6:	88bb      	ldrh	r3, [r7, #4]
 80036f8:	0a1b      	lsrs	r3, r3, #8
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	4b4e      	ldr	r3, [pc, #312]	; (8003838 <LCD_SetCursor+0x1e8>)
 80036fe:	60da      	str	r2, [r3, #12]
 8003700:	4b4c      	ldr	r3, [pc, #304]	; (8003834 <LCD_SetCursor+0x1e4>)
 8003702:	2280      	movs	r2, #128	; 0x80
 8003704:	615a      	str	r2, [r3, #20]
 8003706:	4b4b      	ldr	r3, [pc, #300]	; (8003834 <LCD_SetCursor+0x1e4>)
 8003708:	2280      	movs	r2, #128	; 0x80
 800370a:	611a      	str	r2, [r3, #16]
 800370c:	4b49      	ldr	r3, [pc, #292]	; (8003834 <LCD_SetCursor+0x1e4>)
 800370e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003712:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8003714:	4b47      	ldr	r3, [pc, #284]	; (8003834 <LCD_SetCursor+0x1e4>)
 8003716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800371a:	611a      	str	r2, [r3, #16]
 800371c:	4b45      	ldr	r3, [pc, #276]	; (8003834 <LCD_SetCursor+0x1e4>)
 800371e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003722:	615a      	str	r2, [r3, #20]
 8003724:	88bb      	ldrh	r3, [r7, #4]
 8003726:	4a44      	ldr	r2, [pc, #272]	; (8003838 <LCD_SetCursor+0x1e8>)
 8003728:	b2db      	uxtb	r3, r3
 800372a:	60d3      	str	r3, [r2, #12]
 800372c:	4b41      	ldr	r3, [pc, #260]	; (8003834 <LCD_SetCursor+0x1e4>)
 800372e:	2280      	movs	r2, #128	; 0x80
 8003730:	615a      	str	r2, [r3, #20]
 8003732:	4b40      	ldr	r3, [pc, #256]	; (8003834 <LCD_SetCursor+0x1e4>)
 8003734:	2280      	movs	r2, #128	; 0x80
 8003736:	611a      	str	r2, [r3, #16]
 8003738:	4b3e      	ldr	r3, [pc, #248]	; (8003834 <LCD_SetCursor+0x1e4>)
 800373a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800373e:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8003740:	e248      	b.n	8003bd4 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8003742:	4b3b      	ldr	r3, [pc, #236]	; (8003830 <LCD_SetCursor+0x1e0>)
 8003744:	889b      	ldrh	r3, [r3, #4]
 8003746:	f646 0204 	movw	r2, #26628	; 0x6804
 800374a:	4293      	cmp	r3, r2
 800374c:	d176      	bne.n	800383c <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 800374e:	4b38      	ldr	r3, [pc, #224]	; (8003830 <LCD_SetCursor+0x1e0>)
 8003750:	799b      	ldrb	r3, [r3, #6]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d106      	bne.n	8003764 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8003756:	4b36      	ldr	r3, [pc, #216]	; (8003830 <LCD_SetCursor+0x1e0>)
 8003758:	881a      	ldrh	r2, [r3, #0]
 800375a:	88fb      	ldrh	r3, [r7, #6]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	b29b      	uxth	r3, r3
 8003760:	3b01      	subs	r3, #1
 8003762:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8003764:	4b32      	ldr	r3, [pc, #200]	; (8003830 <LCD_SetCursor+0x1e0>)
 8003766:	895b      	ldrh	r3, [r3, #10]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff fe9f 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 800376e:	4b31      	ldr	r3, [pc, #196]	; (8003834 <LCD_SetCursor+0x1e4>)
 8003770:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003774:	611a      	str	r2, [r3, #16]
 8003776:	4b2f      	ldr	r3, [pc, #188]	; (8003834 <LCD_SetCursor+0x1e4>)
 8003778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800377c:	615a      	str	r2, [r3, #20]
 800377e:	88fb      	ldrh	r3, [r7, #6]
 8003780:	0a1b      	lsrs	r3, r3, #8
 8003782:	b29a      	uxth	r2, r3
 8003784:	4b2c      	ldr	r3, [pc, #176]	; (8003838 <LCD_SetCursor+0x1e8>)
 8003786:	60da      	str	r2, [r3, #12]
 8003788:	4b2a      	ldr	r3, [pc, #168]	; (8003834 <LCD_SetCursor+0x1e4>)
 800378a:	2280      	movs	r2, #128	; 0x80
 800378c:	615a      	str	r2, [r3, #20]
 800378e:	4b29      	ldr	r3, [pc, #164]	; (8003834 <LCD_SetCursor+0x1e4>)
 8003790:	2280      	movs	r2, #128	; 0x80
 8003792:	611a      	str	r2, [r3, #16]
 8003794:	4b27      	ldr	r3, [pc, #156]	; (8003834 <LCD_SetCursor+0x1e4>)
 8003796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800379a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 800379c:	4b25      	ldr	r3, [pc, #148]	; (8003834 <LCD_SetCursor+0x1e4>)
 800379e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037a2:	611a      	str	r2, [r3, #16]
 80037a4:	4b23      	ldr	r3, [pc, #140]	; (8003834 <LCD_SetCursor+0x1e4>)
 80037a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037aa:	615a      	str	r2, [r3, #20]
 80037ac:	88fb      	ldrh	r3, [r7, #6]
 80037ae:	4a22      	ldr	r2, [pc, #136]	; (8003838 <LCD_SetCursor+0x1e8>)
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	60d3      	str	r3, [r2, #12]
 80037b4:	4b1f      	ldr	r3, [pc, #124]	; (8003834 <LCD_SetCursor+0x1e4>)
 80037b6:	2280      	movs	r2, #128	; 0x80
 80037b8:	615a      	str	r2, [r3, #20]
 80037ba:	4b1e      	ldr	r3, [pc, #120]	; (8003834 <LCD_SetCursor+0x1e4>)
 80037bc:	2280      	movs	r2, #128	; 0x80
 80037be:	611a      	str	r2, [r3, #16]
 80037c0:	4b1c      	ldr	r3, [pc, #112]	; (8003834 <LCD_SetCursor+0x1e4>)
 80037c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037c6:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80037c8:	4b19      	ldr	r3, [pc, #100]	; (8003830 <LCD_SetCursor+0x1e0>)
 80037ca:	899b      	ldrh	r3, [r3, #12]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff fe6d 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80037d2:	4b18      	ldr	r3, [pc, #96]	; (8003834 <LCD_SetCursor+0x1e4>)
 80037d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037d8:	611a      	str	r2, [r3, #16]
 80037da:	4b16      	ldr	r3, [pc, #88]	; (8003834 <LCD_SetCursor+0x1e4>)
 80037dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037e0:	615a      	str	r2, [r3, #20]
 80037e2:	88bb      	ldrh	r3, [r7, #4]
 80037e4:	0a1b      	lsrs	r3, r3, #8
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	4b13      	ldr	r3, [pc, #76]	; (8003838 <LCD_SetCursor+0x1e8>)
 80037ea:	60da      	str	r2, [r3, #12]
 80037ec:	4b11      	ldr	r3, [pc, #68]	; (8003834 <LCD_SetCursor+0x1e4>)
 80037ee:	2280      	movs	r2, #128	; 0x80
 80037f0:	615a      	str	r2, [r3, #20]
 80037f2:	4b10      	ldr	r3, [pc, #64]	; (8003834 <LCD_SetCursor+0x1e4>)
 80037f4:	2280      	movs	r2, #128	; 0x80
 80037f6:	611a      	str	r2, [r3, #16]
 80037f8:	4b0e      	ldr	r3, [pc, #56]	; (8003834 <LCD_SetCursor+0x1e4>)
 80037fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037fe:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8003800:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <LCD_SetCursor+0x1e4>)
 8003802:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003806:	611a      	str	r2, [r3, #16]
 8003808:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <LCD_SetCursor+0x1e4>)
 800380a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800380e:	615a      	str	r2, [r3, #20]
 8003810:	88bb      	ldrh	r3, [r7, #4]
 8003812:	4a09      	ldr	r2, [pc, #36]	; (8003838 <LCD_SetCursor+0x1e8>)
 8003814:	b2db      	uxtb	r3, r3
 8003816:	60d3      	str	r3, [r2, #12]
 8003818:	4b06      	ldr	r3, [pc, #24]	; (8003834 <LCD_SetCursor+0x1e4>)
 800381a:	2280      	movs	r2, #128	; 0x80
 800381c:	615a      	str	r2, [r3, #20]
 800381e:	4b05      	ldr	r3, [pc, #20]	; (8003834 <LCD_SetCursor+0x1e4>)
 8003820:	2280      	movs	r2, #128	; 0x80
 8003822:	611a      	str	r2, [r3, #16]
 8003824:	4b03      	ldr	r3, [pc, #12]	; (8003834 <LCD_SetCursor+0x1e4>)
 8003826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800382a:	611a      	str	r2, [r3, #16]
}
 800382c:	e1d2      	b.n	8003bd4 <LCD_SetCursor+0x584>
 800382e:	bf00      	nop
 8003830:	20000e18 	.word	0x20000e18
 8003834:	40011000 	.word	0x40011000
 8003838:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 800383c:	4b99      	ldr	r3, [pc, #612]	; (8003aa4 <LCD_SetCursor+0x454>)
 800383e:	889b      	ldrh	r3, [r3, #4]
 8003840:	f641 1263 	movw	r2, #6499	; 0x1963
 8003844:	4293      	cmp	r3, r2
 8003846:	f040 8133 	bne.w	8003ab0 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 800384a:	4b96      	ldr	r3, [pc, #600]	; (8003aa4 <LCD_SetCursor+0x454>)
 800384c:	799b      	ldrb	r3, [r3, #6]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d163      	bne.n	800391a <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8003852:	4b94      	ldr	r3, [pc, #592]	; (8003aa4 <LCD_SetCursor+0x454>)
 8003854:	881a      	ldrh	r2, [r3, #0]
 8003856:	88fb      	ldrh	r3, [r7, #6]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8003860:	4b90      	ldr	r3, [pc, #576]	; (8003aa4 <LCD_SetCursor+0x454>)
 8003862:	895b      	ldrh	r3, [r3, #10]
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff fe21 	bl	80034ac <LCD_WR_REG>
			LCD_WR_DATA(0);
 800386a:	4b8f      	ldr	r3, [pc, #572]	; (8003aa8 <LCD_SetCursor+0x458>)
 800386c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003870:	611a      	str	r2, [r3, #16]
 8003872:	4b8d      	ldr	r3, [pc, #564]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003878:	615a      	str	r2, [r3, #20]
 800387a:	4b8c      	ldr	r3, [pc, #560]	; (8003aac <LCD_SetCursor+0x45c>)
 800387c:	2200      	movs	r2, #0
 800387e:	60da      	str	r2, [r3, #12]
 8003880:	4b89      	ldr	r3, [pc, #548]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003882:	2280      	movs	r2, #128	; 0x80
 8003884:	615a      	str	r2, [r3, #20]
 8003886:	4b88      	ldr	r3, [pc, #544]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003888:	2280      	movs	r2, #128	; 0x80
 800388a:	611a      	str	r2, [r3, #16]
 800388c:	4b86      	ldr	r3, [pc, #536]	; (8003aa8 <LCD_SetCursor+0x458>)
 800388e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003892:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8003894:	4b84      	ldr	r3, [pc, #528]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003896:	f44f 7280 	mov.w	r2, #256	; 0x100
 800389a:	611a      	str	r2, [r3, #16]
 800389c:	4b82      	ldr	r3, [pc, #520]	; (8003aa8 <LCD_SetCursor+0x458>)
 800389e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038a2:	615a      	str	r2, [r3, #20]
 80038a4:	4b81      	ldr	r3, [pc, #516]	; (8003aac <LCD_SetCursor+0x45c>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	60da      	str	r2, [r3, #12]
 80038aa:	4b7f      	ldr	r3, [pc, #508]	; (8003aa8 <LCD_SetCursor+0x458>)
 80038ac:	2280      	movs	r2, #128	; 0x80
 80038ae:	615a      	str	r2, [r3, #20]
 80038b0:	4b7d      	ldr	r3, [pc, #500]	; (8003aa8 <LCD_SetCursor+0x458>)
 80038b2:	2280      	movs	r2, #128	; 0x80
 80038b4:	611a      	str	r2, [r3, #16]
 80038b6:	4b7c      	ldr	r3, [pc, #496]	; (8003aa8 <LCD_SetCursor+0x458>)
 80038b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038bc:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 80038be:	4b7a      	ldr	r3, [pc, #488]	; (8003aa8 <LCD_SetCursor+0x458>)
 80038c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038c4:	611a      	str	r2, [r3, #16]
 80038c6:	4b78      	ldr	r3, [pc, #480]	; (8003aa8 <LCD_SetCursor+0x458>)
 80038c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038cc:	615a      	str	r2, [r3, #20]
 80038ce:	88fb      	ldrh	r3, [r7, #6]
 80038d0:	0a1b      	lsrs	r3, r3, #8
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	4b75      	ldr	r3, [pc, #468]	; (8003aac <LCD_SetCursor+0x45c>)
 80038d6:	60da      	str	r2, [r3, #12]
 80038d8:	4b73      	ldr	r3, [pc, #460]	; (8003aa8 <LCD_SetCursor+0x458>)
 80038da:	2280      	movs	r2, #128	; 0x80
 80038dc:	615a      	str	r2, [r3, #20]
 80038de:	4b72      	ldr	r3, [pc, #456]	; (8003aa8 <LCD_SetCursor+0x458>)
 80038e0:	2280      	movs	r2, #128	; 0x80
 80038e2:	611a      	str	r2, [r3, #16]
 80038e4:	4b70      	ldr	r3, [pc, #448]	; (8003aa8 <LCD_SetCursor+0x458>)
 80038e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ea:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 80038ec:	4b6e      	ldr	r3, [pc, #440]	; (8003aa8 <LCD_SetCursor+0x458>)
 80038ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038f2:	611a      	str	r2, [r3, #16]
 80038f4:	4b6c      	ldr	r3, [pc, #432]	; (8003aa8 <LCD_SetCursor+0x458>)
 80038f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038fa:	615a      	str	r2, [r3, #20]
 80038fc:	88fb      	ldrh	r3, [r7, #6]
 80038fe:	4a6b      	ldr	r2, [pc, #428]	; (8003aac <LCD_SetCursor+0x45c>)
 8003900:	b2db      	uxtb	r3, r3
 8003902:	60d3      	str	r3, [r2, #12]
 8003904:	4b68      	ldr	r3, [pc, #416]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003906:	2280      	movs	r2, #128	; 0x80
 8003908:	615a      	str	r2, [r3, #20]
 800390a:	4b67      	ldr	r3, [pc, #412]	; (8003aa8 <LCD_SetCursor+0x458>)
 800390c:	2280      	movs	r2, #128	; 0x80
 800390e:	611a      	str	r2, [r3, #16]
 8003910:	4b65      	ldr	r3, [pc, #404]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003916:	611a      	str	r2, [r3, #16]
 8003918:	e061      	b.n	80039de <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 800391a:	4b62      	ldr	r3, [pc, #392]	; (8003aa4 <LCD_SetCursor+0x454>)
 800391c:	895b      	ldrh	r3, [r3, #10]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fdc4 	bl	80034ac <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8003924:	4b60      	ldr	r3, [pc, #384]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003926:	f44f 7280 	mov.w	r2, #256	; 0x100
 800392a:	611a      	str	r2, [r3, #16]
 800392c:	4b5e      	ldr	r3, [pc, #376]	; (8003aa8 <LCD_SetCursor+0x458>)
 800392e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003932:	615a      	str	r2, [r3, #20]
 8003934:	88fb      	ldrh	r3, [r7, #6]
 8003936:	0a1b      	lsrs	r3, r3, #8
 8003938:	b29a      	uxth	r2, r3
 800393a:	4b5c      	ldr	r3, [pc, #368]	; (8003aac <LCD_SetCursor+0x45c>)
 800393c:	60da      	str	r2, [r3, #12]
 800393e:	4b5a      	ldr	r3, [pc, #360]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003940:	2280      	movs	r2, #128	; 0x80
 8003942:	615a      	str	r2, [r3, #20]
 8003944:	4b58      	ldr	r3, [pc, #352]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003946:	2280      	movs	r2, #128	; 0x80
 8003948:	611a      	str	r2, [r3, #16]
 800394a:	4b57      	ldr	r3, [pc, #348]	; (8003aa8 <LCD_SetCursor+0x458>)
 800394c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003950:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8003952:	4b55      	ldr	r3, [pc, #340]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003954:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003958:	611a      	str	r2, [r3, #16]
 800395a:	4b53      	ldr	r3, [pc, #332]	; (8003aa8 <LCD_SetCursor+0x458>)
 800395c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003960:	615a      	str	r2, [r3, #20]
 8003962:	88fb      	ldrh	r3, [r7, #6]
 8003964:	4a51      	ldr	r2, [pc, #324]	; (8003aac <LCD_SetCursor+0x45c>)
 8003966:	b2db      	uxtb	r3, r3
 8003968:	60d3      	str	r3, [r2, #12]
 800396a:	4b4f      	ldr	r3, [pc, #316]	; (8003aa8 <LCD_SetCursor+0x458>)
 800396c:	2280      	movs	r2, #128	; 0x80
 800396e:	615a      	str	r2, [r3, #20]
 8003970:	4b4d      	ldr	r3, [pc, #308]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003972:	2280      	movs	r2, #128	; 0x80
 8003974:	611a      	str	r2, [r3, #16]
 8003976:	4b4c      	ldr	r3, [pc, #304]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800397c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 800397e:	4b4a      	ldr	r3, [pc, #296]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003980:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003984:	611a      	str	r2, [r3, #16]
 8003986:	4b48      	ldr	r3, [pc, #288]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800398c:	615a      	str	r2, [r3, #20]
 800398e:	4b45      	ldr	r3, [pc, #276]	; (8003aa4 <LCD_SetCursor+0x454>)
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	3b01      	subs	r3, #1
 8003994:	121a      	asrs	r2, r3, #8
 8003996:	4b45      	ldr	r3, [pc, #276]	; (8003aac <LCD_SetCursor+0x45c>)
 8003998:	60da      	str	r2, [r3, #12]
 800399a:	4b43      	ldr	r3, [pc, #268]	; (8003aa8 <LCD_SetCursor+0x458>)
 800399c:	2280      	movs	r2, #128	; 0x80
 800399e:	615a      	str	r2, [r3, #20]
 80039a0:	4b41      	ldr	r3, [pc, #260]	; (8003aa8 <LCD_SetCursor+0x458>)
 80039a2:	2280      	movs	r2, #128	; 0x80
 80039a4:	611a      	str	r2, [r3, #16]
 80039a6:	4b40      	ldr	r3, [pc, #256]	; (8003aa8 <LCD_SetCursor+0x458>)
 80039a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ac:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80039ae:	4b3e      	ldr	r3, [pc, #248]	; (8003aa8 <LCD_SetCursor+0x458>)
 80039b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039b4:	611a      	str	r2, [r3, #16]
 80039b6:	4b3c      	ldr	r3, [pc, #240]	; (8003aa8 <LCD_SetCursor+0x458>)
 80039b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039bc:	615a      	str	r2, [r3, #20]
 80039be:	4b39      	ldr	r3, [pc, #228]	; (8003aa4 <LCD_SetCursor+0x454>)
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	4a39      	ldr	r2, [pc, #228]	; (8003aac <LCD_SetCursor+0x45c>)
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	60d3      	str	r3, [r2, #12]
 80039ca:	4b37      	ldr	r3, [pc, #220]	; (8003aa8 <LCD_SetCursor+0x458>)
 80039cc:	2280      	movs	r2, #128	; 0x80
 80039ce:	615a      	str	r2, [r3, #20]
 80039d0:	4b35      	ldr	r3, [pc, #212]	; (8003aa8 <LCD_SetCursor+0x458>)
 80039d2:	2280      	movs	r2, #128	; 0x80
 80039d4:	611a      	str	r2, [r3, #16]
 80039d6:	4b34      	ldr	r3, [pc, #208]	; (8003aa8 <LCD_SetCursor+0x458>)
 80039d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039dc:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80039de:	4b31      	ldr	r3, [pc, #196]	; (8003aa4 <LCD_SetCursor+0x454>)
 80039e0:	899b      	ldrh	r3, [r3, #12]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff fd62 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80039e8:	4b2f      	ldr	r3, [pc, #188]	; (8003aa8 <LCD_SetCursor+0x458>)
 80039ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039ee:	611a      	str	r2, [r3, #16]
 80039f0:	4b2d      	ldr	r3, [pc, #180]	; (8003aa8 <LCD_SetCursor+0x458>)
 80039f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039f6:	615a      	str	r2, [r3, #20]
 80039f8:	88bb      	ldrh	r3, [r7, #4]
 80039fa:	0a1b      	lsrs	r3, r3, #8
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	4b2b      	ldr	r3, [pc, #172]	; (8003aac <LCD_SetCursor+0x45c>)
 8003a00:	60da      	str	r2, [r3, #12]
 8003a02:	4b29      	ldr	r3, [pc, #164]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003a04:	2280      	movs	r2, #128	; 0x80
 8003a06:	615a      	str	r2, [r3, #20]
 8003a08:	4b27      	ldr	r3, [pc, #156]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003a0a:	2280      	movs	r2, #128	; 0x80
 8003a0c:	611a      	str	r2, [r3, #16]
 8003a0e:	4b26      	ldr	r3, [pc, #152]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a14:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8003a16:	4b24      	ldr	r3, [pc, #144]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003a18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a1c:	611a      	str	r2, [r3, #16]
 8003a1e:	4b22      	ldr	r3, [pc, #136]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a24:	615a      	str	r2, [r3, #20]
 8003a26:	88bb      	ldrh	r3, [r7, #4]
 8003a28:	4a20      	ldr	r2, [pc, #128]	; (8003aac <LCD_SetCursor+0x45c>)
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	60d3      	str	r3, [r2, #12]
 8003a2e:	4b1e      	ldr	r3, [pc, #120]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003a30:	2280      	movs	r2, #128	; 0x80
 8003a32:	615a      	str	r2, [r3, #20]
 8003a34:	4b1c      	ldr	r3, [pc, #112]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003a36:	2280      	movs	r2, #128	; 0x80
 8003a38:	611a      	str	r2, [r3, #16]
 8003a3a:	4b1b      	ldr	r3, [pc, #108]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a40:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8003a42:	4b19      	ldr	r3, [pc, #100]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003a44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a48:	611a      	str	r2, [r3, #16]
 8003a4a:	4b17      	ldr	r3, [pc, #92]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a50:	615a      	str	r2, [r3, #20]
 8003a52:	4b14      	ldr	r3, [pc, #80]	; (8003aa4 <LCD_SetCursor+0x454>)
 8003a54:	885b      	ldrh	r3, [r3, #2]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	121a      	asrs	r2, r3, #8
 8003a5a:	4b14      	ldr	r3, [pc, #80]	; (8003aac <LCD_SetCursor+0x45c>)
 8003a5c:	60da      	str	r2, [r3, #12]
 8003a5e:	4b12      	ldr	r3, [pc, #72]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003a60:	2280      	movs	r2, #128	; 0x80
 8003a62:	615a      	str	r2, [r3, #20]
 8003a64:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003a66:	2280      	movs	r2, #128	; 0x80
 8003a68:	611a      	str	r2, [r3, #16]
 8003a6a:	4b0f      	ldr	r3, [pc, #60]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a70:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8003a72:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003a74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a78:	611a      	str	r2, [r3, #16]
 8003a7a:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a80:	615a      	str	r2, [r3, #20]
 8003a82:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <LCD_SetCursor+0x454>)
 8003a84:	885b      	ldrh	r3, [r3, #2]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	4a08      	ldr	r2, [pc, #32]	; (8003aac <LCD_SetCursor+0x45c>)
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	60d3      	str	r3, [r2, #12]
 8003a8e:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003a90:	2280      	movs	r2, #128	; 0x80
 8003a92:	615a      	str	r2, [r3, #20]
 8003a94:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003a96:	2280      	movs	r2, #128	; 0x80
 8003a98:	611a      	str	r2, [r3, #16]
 8003a9a:	4b03      	ldr	r3, [pc, #12]	; (8003aa8 <LCD_SetCursor+0x458>)
 8003a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aa0:	611a      	str	r2, [r3, #16]
}
 8003aa2:	e097      	b.n	8003bd4 <LCD_SetCursor+0x584>
 8003aa4:	20000e18 	.word	0x20000e18
 8003aa8:	40011000 	.word	0x40011000
 8003aac:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8003ab0:	4b4a      	ldr	r3, [pc, #296]	; (8003bdc <LCD_SetCursor+0x58c>)
 8003ab2:	889b      	ldrh	r3, [r3, #4]
 8003ab4:	f245 5210 	movw	r2, #21776	; 0x5510
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d172      	bne.n	8003ba2 <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8003abc:	4b47      	ldr	r3, [pc, #284]	; (8003bdc <LCD_SetCursor+0x58c>)
 8003abe:	895b      	ldrh	r3, [r3, #10]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff fcf3 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8003ac6:	4b46      	ldr	r3, [pc, #280]	; (8003be0 <LCD_SetCursor+0x590>)
 8003ac8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003acc:	611a      	str	r2, [r3, #16]
 8003ace:	4b44      	ldr	r3, [pc, #272]	; (8003be0 <LCD_SetCursor+0x590>)
 8003ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ad4:	615a      	str	r2, [r3, #20]
 8003ad6:	88fb      	ldrh	r3, [r7, #6]
 8003ad8:	0a1b      	lsrs	r3, r3, #8
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	4b41      	ldr	r3, [pc, #260]	; (8003be4 <LCD_SetCursor+0x594>)
 8003ade:	60da      	str	r2, [r3, #12]
 8003ae0:	4b3f      	ldr	r3, [pc, #252]	; (8003be0 <LCD_SetCursor+0x590>)
 8003ae2:	2280      	movs	r2, #128	; 0x80
 8003ae4:	615a      	str	r2, [r3, #20]
 8003ae6:	4b3e      	ldr	r3, [pc, #248]	; (8003be0 <LCD_SetCursor+0x590>)
 8003ae8:	2280      	movs	r2, #128	; 0x80
 8003aea:	611a      	str	r2, [r3, #16]
 8003aec:	4b3c      	ldr	r3, [pc, #240]	; (8003be0 <LCD_SetCursor+0x590>)
 8003aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003af2:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8003af4:	4b39      	ldr	r3, [pc, #228]	; (8003bdc <LCD_SetCursor+0x58c>)
 8003af6:	895b      	ldrh	r3, [r3, #10]
 8003af8:	3301      	adds	r3, #1
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff fcd5 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 8003b02:	4b37      	ldr	r3, [pc, #220]	; (8003be0 <LCD_SetCursor+0x590>)
 8003b04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b08:	611a      	str	r2, [r3, #16]
 8003b0a:	4b35      	ldr	r3, [pc, #212]	; (8003be0 <LCD_SetCursor+0x590>)
 8003b0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b10:	615a      	str	r2, [r3, #20]
 8003b12:	88fb      	ldrh	r3, [r7, #6]
 8003b14:	4a33      	ldr	r2, [pc, #204]	; (8003be4 <LCD_SetCursor+0x594>)
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	60d3      	str	r3, [r2, #12]
 8003b1a:	4b31      	ldr	r3, [pc, #196]	; (8003be0 <LCD_SetCursor+0x590>)
 8003b1c:	2280      	movs	r2, #128	; 0x80
 8003b1e:	615a      	str	r2, [r3, #20]
 8003b20:	4b2f      	ldr	r3, [pc, #188]	; (8003be0 <LCD_SetCursor+0x590>)
 8003b22:	2280      	movs	r2, #128	; 0x80
 8003b24:	611a      	str	r2, [r3, #16]
 8003b26:	4b2e      	ldr	r3, [pc, #184]	; (8003be0 <LCD_SetCursor+0x590>)
 8003b28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b2c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8003b2e:	4b2b      	ldr	r3, [pc, #172]	; (8003bdc <LCD_SetCursor+0x58c>)
 8003b30:	899b      	ldrh	r3, [r3, #12]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff fcba 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8003b38:	4b29      	ldr	r3, [pc, #164]	; (8003be0 <LCD_SetCursor+0x590>)
 8003b3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b3e:	611a      	str	r2, [r3, #16]
 8003b40:	4b27      	ldr	r3, [pc, #156]	; (8003be0 <LCD_SetCursor+0x590>)
 8003b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b46:	615a      	str	r2, [r3, #20]
 8003b48:	88bb      	ldrh	r3, [r7, #4]
 8003b4a:	0a1b      	lsrs	r3, r3, #8
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	4b25      	ldr	r3, [pc, #148]	; (8003be4 <LCD_SetCursor+0x594>)
 8003b50:	60da      	str	r2, [r3, #12]
 8003b52:	4b23      	ldr	r3, [pc, #140]	; (8003be0 <LCD_SetCursor+0x590>)
 8003b54:	2280      	movs	r2, #128	; 0x80
 8003b56:	615a      	str	r2, [r3, #20]
 8003b58:	4b21      	ldr	r3, [pc, #132]	; (8003be0 <LCD_SetCursor+0x590>)
 8003b5a:	2280      	movs	r2, #128	; 0x80
 8003b5c:	611a      	str	r2, [r3, #16]
 8003b5e:	4b20      	ldr	r3, [pc, #128]	; (8003be0 <LCD_SetCursor+0x590>)
 8003b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b64:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8003b66:	4b1d      	ldr	r3, [pc, #116]	; (8003bdc <LCD_SetCursor+0x58c>)
 8003b68:	899b      	ldrh	r3, [r3, #12]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff fc9c 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8003b74:	4b1a      	ldr	r3, [pc, #104]	; (8003be0 <LCD_SetCursor+0x590>)
 8003b76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b7a:	611a      	str	r2, [r3, #16]
 8003b7c:	4b18      	ldr	r3, [pc, #96]	; (8003be0 <LCD_SetCursor+0x590>)
 8003b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b82:	615a      	str	r2, [r3, #20]
 8003b84:	88bb      	ldrh	r3, [r7, #4]
 8003b86:	4a17      	ldr	r2, [pc, #92]	; (8003be4 <LCD_SetCursor+0x594>)
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	60d3      	str	r3, [r2, #12]
 8003b8c:	4b14      	ldr	r3, [pc, #80]	; (8003be0 <LCD_SetCursor+0x590>)
 8003b8e:	2280      	movs	r2, #128	; 0x80
 8003b90:	615a      	str	r2, [r3, #20]
 8003b92:	4b13      	ldr	r3, [pc, #76]	; (8003be0 <LCD_SetCursor+0x590>)
 8003b94:	2280      	movs	r2, #128	; 0x80
 8003b96:	611a      	str	r2, [r3, #16]
 8003b98:	4b11      	ldr	r3, [pc, #68]	; (8003be0 <LCD_SetCursor+0x590>)
 8003b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b9e:	611a      	str	r2, [r3, #16]
}
 8003ba0:	e018      	b.n	8003bd4 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8003ba2:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <LCD_SetCursor+0x58c>)
 8003ba4:	799b      	ldrb	r3, [r3, #6]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d106      	bne.n	8003bb8 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 8003baa:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <LCD_SetCursor+0x58c>)
 8003bac:	881a      	ldrh	r2, [r3, #0]
 8003bae:	88fb      	ldrh	r3, [r7, #6]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8003bb8:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <LCD_SetCursor+0x58c>)
 8003bba:	895b      	ldrh	r3, [r3, #10]
 8003bbc:	88fa      	ldrh	r2, [r7, #6]
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff fcff 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8003bc6:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <LCD_SetCursor+0x58c>)
 8003bc8:	899b      	ldrh	r3, [r3, #12]
 8003bca:	88ba      	ldrh	r2, [r7, #4]
 8003bcc:	4611      	mov	r1, r2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff fcf8 	bl	80035c4 <LCD_WriteReg>
}
 8003bd4:	bf00      	nop
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20000e18 	.word	0x20000e18
 8003be0:	40011000 	.word	0x40011000
 8003be4:	40010c00 	.word	0x40010c00

08003be8 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 8003bfa:	4b78      	ldr	r3, [pc, #480]	; (8003ddc <LCD_Scan_Dir+0x1f4>)
 8003bfc:	799b      	ldrb	r3, [r3, #6]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d10b      	bne.n	8003c1a <LCD_Scan_Dir+0x32>
 8003c02:	4b76      	ldr	r3, [pc, #472]	; (8003ddc <LCD_Scan_Dir+0x1f4>)
 8003c04:	889b      	ldrh	r3, [r3, #4]
 8003c06:	f646 0204 	movw	r2, #26628	; 0x6804
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d005      	beq.n	8003c1a <LCD_Scan_Dir+0x32>
 8003c0e:	4b73      	ldr	r3, [pc, #460]	; (8003ddc <LCD_Scan_Dir+0x1f4>)
 8003c10:	889b      	ldrh	r3, [r3, #4]
 8003c12:	f641 1263 	movw	r2, #6499	; 0x1963
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d109      	bne.n	8003c2e <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 8003c1a:	4b70      	ldr	r3, [pc, #448]	; (8003ddc <LCD_Scan_Dir+0x1f4>)
 8003c1c:	799b      	ldrb	r3, [r3, #6]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d134      	bne.n	8003c8c <LCD_Scan_Dir+0xa4>
 8003c22:	4b6e      	ldr	r3, [pc, #440]	; (8003ddc <LCD_Scan_Dir+0x1f4>)
 8003c24:	889b      	ldrh	r3, [r3, #4]
 8003c26:	f641 1263 	movw	r2, #6499	; 0x1963
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d12e      	bne.n	8003c8c <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	2b07      	cmp	r3, #7
 8003c32:	d82b      	bhi.n	8003c8c <LCD_Scan_Dir+0xa4>
 8003c34:	a201      	add	r2, pc, #4	; (adr r2, 8003c3c <LCD_Scan_Dir+0x54>)
 8003c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3a:	bf00      	nop
 8003c3c:	08003c5d 	.word	0x08003c5d
 8003c40:	08003c63 	.word	0x08003c63
 8003c44:	08003c69 	.word	0x08003c69
 8003c48:	08003c6f 	.word	0x08003c6f
 8003c4c:	08003c75 	.word	0x08003c75
 8003c50:	08003c7b 	.word	0x08003c7b
 8003c54:	08003c81 	.word	0x08003c81
 8003c58:	08003c87 	.word	0x08003c87
		{
		case 0:
			dir = 6;
 8003c5c:	2306      	movs	r3, #6
 8003c5e:	71fb      	strb	r3, [r7, #7]
			break;
 8003c60:	e014      	b.n	8003c8c <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 8003c62:	2307      	movs	r3, #7
 8003c64:	71fb      	strb	r3, [r7, #7]
			break;
 8003c66:	e011      	b.n	8003c8c <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 8003c68:	2304      	movs	r3, #4
 8003c6a:	71fb      	strb	r3, [r7, #7]
			break;
 8003c6c:	e00e      	b.n	8003c8c <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 8003c6e:	2305      	movs	r3, #5
 8003c70:	71fb      	strb	r3, [r7, #7]
			break;
 8003c72:	e00b      	b.n	8003c8c <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 8003c74:	2301      	movs	r3, #1
 8003c76:	71fb      	strb	r3, [r7, #7]
			break;
 8003c78:	e008      	b.n	8003c8c <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	71fb      	strb	r3, [r7, #7]
			break;
 8003c7e:	e005      	b.n	8003c8c <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 8003c80:	2303      	movs	r3, #3
 8003c82:	71fb      	strb	r3, [r7, #7]
			break;
 8003c84:	e002      	b.n	8003c8c <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 8003c86:	2302      	movs	r3, #2
 8003c88:	71fb      	strb	r3, [r7, #7]
			break;
 8003c8a:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 8003c8c:	4b53      	ldr	r3, [pc, #332]	; (8003ddc <LCD_Scan_Dir+0x1f4>)
 8003c8e:	889b      	ldrh	r3, [r3, #4]
 8003c90:	f249 3241 	movw	r2, #37697	; 0x9341
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d018      	beq.n	8003cca <LCD_Scan_Dir+0xe2>
 8003c98:	4b50      	ldr	r3, [pc, #320]	; (8003ddc <LCD_Scan_Dir+0x1f4>)
 8003c9a:	889b      	ldrh	r3, [r3, #4]
 8003c9c:	f646 0204 	movw	r2, #26628	; 0x6804
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d012      	beq.n	8003cca <LCD_Scan_Dir+0xe2>
 8003ca4:	4b4d      	ldr	r3, [pc, #308]	; (8003ddc <LCD_Scan_Dir+0x1f4>)
 8003ca6:	889b      	ldrh	r3, [r3, #4]
 8003ca8:	f245 3210 	movw	r2, #21264	; 0x5310
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d00c      	beq.n	8003cca <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 8003cb0:	4b4a      	ldr	r3, [pc, #296]	; (8003ddc <LCD_Scan_Dir+0x1f4>)
 8003cb2:	889b      	ldrh	r3, [r3, #4]
 8003cb4:	f245 5210 	movw	r2, #21776	; 0x5510
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d006      	beq.n	8003cca <LCD_Scan_Dir+0xe2>
 8003cbc:	4b47      	ldr	r3, [pc, #284]	; (8003ddc <LCD_Scan_Dir+0x1f4>)
 8003cbe:	889b      	ldrh	r3, [r3, #4]
 8003cc0:	f641 1263 	movw	r2, #6499	; 0x1963
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	f040 8250 	bne.w	800416a <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 8003cca:	79fb      	ldrb	r3, [r7, #7]
 8003ccc:	2b07      	cmp	r3, #7
 8003cce:	d836      	bhi.n	8003d3e <LCD_Scan_Dir+0x156>
 8003cd0:	a201      	add	r2, pc, #4	; (adr r2, 8003cd8 <LCD_Scan_Dir+0xf0>)
 8003cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd6:	bf00      	nop
 8003cd8:	08003d3f 	.word	0x08003d3f
 8003cdc:	08003cf9 	.word	0x08003cf9
 8003ce0:	08003d03 	.word	0x08003d03
 8003ce4:	08003d0d 	.word	0x08003d0d
 8003ce8:	08003d17 	.word	0x08003d17
 8003cec:	08003d21 	.word	0x08003d21
 8003cf0:	08003d2b 	.word	0x08003d2b
 8003cf4:	08003d35 	.word	0x08003d35
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8003cf8:	89fb      	ldrh	r3, [r7, #14]
 8003cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cfe:	81fb      	strh	r3, [r7, #14]
			break;
 8003d00:	e01d      	b.n	8003d3e <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 8003d02:	89fb      	ldrh	r3, [r7, #14]
 8003d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d08:	81fb      	strh	r3, [r7, #14]
			break;
 8003d0a:	e018      	b.n	8003d3e <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8003d0c:	89fb      	ldrh	r3, [r7, #14]
 8003d0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d12:	81fb      	strh	r3, [r7, #14]
			break;
 8003d14:	e013      	b.n	8003d3e <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 8003d16:	89fb      	ldrh	r3, [r7, #14]
 8003d18:	f043 0320 	orr.w	r3, r3, #32
 8003d1c:	81fb      	strh	r3, [r7, #14]
			break;
 8003d1e:	e00e      	b.n	8003d3e <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8003d20:	89fb      	ldrh	r3, [r7, #14]
 8003d22:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003d26:	81fb      	strh	r3, [r7, #14]
			break;
 8003d28:	e009      	b.n	8003d3e <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8003d2a:	89fb      	ldrh	r3, [r7, #14]
 8003d2c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003d30:	81fb      	strh	r3, [r7, #14]
			break;
 8003d32:	e004      	b.n	8003d3e <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8003d34:	89fb      	ldrh	r3, [r7, #14]
 8003d36:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8003d3a:	81fb      	strh	r3, [r7, #14]
			break;
 8003d3c:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 8003d3e:	4b27      	ldr	r3, [pc, #156]	; (8003ddc <LCD_Scan_Dir+0x1f4>)
 8003d40:	889b      	ldrh	r3, [r3, #4]
 8003d42:	f245 5210 	movw	r2, #21776	; 0x5510
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d103      	bne.n	8003d52 <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 8003d4a:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8003d4e:	81bb      	strh	r3, [r7, #12]
 8003d50:	e001      	b.n	8003d56 <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 8003d52:	2336      	movs	r3, #54	; 0x36
 8003d54:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 8003d56:	4b21      	ldr	r3, [pc, #132]	; (8003ddc <LCD_Scan_Dir+0x1f4>)
 8003d58:	889b      	ldrh	r3, [r3, #4]
 8003d5a:	f245 3210 	movw	r2, #21264	; 0x5310
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00f      	beq.n	8003d82 <LCD_Scan_Dir+0x19a>
 8003d62:	4b1e      	ldr	r3, [pc, #120]	; (8003ddc <LCD_Scan_Dir+0x1f4>)
 8003d64:	889b      	ldrh	r3, [r3, #4]
 8003d66:	f245 5210 	movw	r2, #21776	; 0x5510
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d009      	beq.n	8003d82 <LCD_Scan_Dir+0x19a>
 8003d6e:	4b1b      	ldr	r3, [pc, #108]	; (8003ddc <LCD_Scan_Dir+0x1f4>)
 8003d70:	889b      	ldrh	r3, [r3, #4]
 8003d72:	f641 1263 	movw	r2, #6499	; 0x1963
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d003      	beq.n	8003d82 <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 8003d7a:	89fb      	ldrh	r3, [r7, #14]
 8003d7c:	f043 0308 	orr.w	r3, r3, #8
 8003d80:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 8003d82:	4b16      	ldr	r3, [pc, #88]	; (8003ddc <LCD_Scan_Dir+0x1f4>)
 8003d84:	889b      	ldrh	r3, [r3, #4]
 8003d86:	f646 0204 	movw	r2, #26628	; 0x6804
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d103      	bne.n	8003d96 <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 8003d8e:	89fb      	ldrh	r3, [r7, #14]
 8003d90:	f043 0302 	orr.w	r3, r3, #2
 8003d94:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8003d96:	89fa      	ldrh	r2, [r7, #14]
 8003d98:	89bb      	ldrh	r3, [r7, #12]
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff fc11 	bl	80035c4 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 8003da2:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <LCD_Scan_Dir+0x1f4>)
 8003da4:	889b      	ldrh	r3, [r3, #4]
 8003da6:	f641 1263 	movw	r2, #6499	; 0x1963
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d028      	beq.n	8003e00 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 8003dae:	89fb      	ldrh	r3, [r7, #14]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d013      	beq.n	8003de0 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8003db8:	4b08      	ldr	r3, [pc, #32]	; (8003ddc <LCD_Scan_Dir+0x1f4>)
 8003dba:	881a      	ldrh	r2, [r3, #0]
 8003dbc:	4b07      	ldr	r3, [pc, #28]	; (8003ddc <LCD_Scan_Dir+0x1f4>)
 8003dbe:	885b      	ldrh	r3, [r3, #2]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d21d      	bcs.n	8003e00 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8003dc4:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <LCD_Scan_Dir+0x1f4>)
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8003dca:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <LCD_Scan_Dir+0x1f4>)
 8003dcc:	885a      	ldrh	r2, [r3, #2]
 8003dce:	4b03      	ldr	r3, [pc, #12]	; (8003ddc <LCD_Scan_Dir+0x1f4>)
 8003dd0:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8003dd2:	4a02      	ldr	r2, [pc, #8]	; (8003ddc <LCD_Scan_Dir+0x1f4>)
 8003dd4:	897b      	ldrh	r3, [r7, #10]
 8003dd6:	8053      	strh	r3, [r2, #2]
 8003dd8:	e012      	b.n	8003e00 <LCD_Scan_Dir+0x218>
 8003dda:	bf00      	nop
 8003ddc:	20000e18 	.word	0x20000e18
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 8003de0:	4b7f      	ldr	r3, [pc, #508]	; (8003fe0 <LCD_Scan_Dir+0x3f8>)
 8003de2:	881a      	ldrh	r2, [r3, #0]
 8003de4:	4b7e      	ldr	r3, [pc, #504]	; (8003fe0 <LCD_Scan_Dir+0x3f8>)
 8003de6:	885b      	ldrh	r3, [r3, #2]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d909      	bls.n	8003e00 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8003dec:	4b7c      	ldr	r3, [pc, #496]	; (8003fe0 <LCD_Scan_Dir+0x3f8>)
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8003df2:	4b7b      	ldr	r3, [pc, #492]	; (8003fe0 <LCD_Scan_Dir+0x3f8>)
 8003df4:	885a      	ldrh	r2, [r3, #2]
 8003df6:	4b7a      	ldr	r3, [pc, #488]	; (8003fe0 <LCD_Scan_Dir+0x3f8>)
 8003df8:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8003dfa:	4a79      	ldr	r2, [pc, #484]	; (8003fe0 <LCD_Scan_Dir+0x3f8>)
 8003dfc:	897b      	ldrh	r3, [r7, #10]
 8003dfe:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 8003e00:	4b77      	ldr	r3, [pc, #476]	; (8003fe0 <LCD_Scan_Dir+0x3f8>)
 8003e02:	889b      	ldrh	r3, [r3, #4]
 8003e04:	f245 5210 	movw	r2, #21776	; 0x5510
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	f040 80ef 	bne.w	8003fec <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 8003e0e:	4b74      	ldr	r3, [pc, #464]	; (8003fe0 <LCD_Scan_Dir+0x3f8>)
 8003e10:	895b      	ldrh	r3, [r3, #10]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff fb4a 	bl	80034ac <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003e18:	4b72      	ldr	r3, [pc, #456]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003e1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e1e:	611a      	str	r2, [r3, #16]
 8003e20:	4b70      	ldr	r3, [pc, #448]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e26:	615a      	str	r2, [r3, #20]
 8003e28:	4b6f      	ldr	r3, [pc, #444]	; (8003fe8 <LCD_Scan_Dir+0x400>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	60da      	str	r2, [r3, #12]
 8003e2e:	4b6d      	ldr	r3, [pc, #436]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003e30:	2280      	movs	r2, #128	; 0x80
 8003e32:	615a      	str	r2, [r3, #20]
 8003e34:	4b6b      	ldr	r3, [pc, #428]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003e36:	2280      	movs	r2, #128	; 0x80
 8003e38:	611a      	str	r2, [r3, #16]
 8003e3a:	4b6a      	ldr	r3, [pc, #424]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e40:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 8003e42:	4b67      	ldr	r3, [pc, #412]	; (8003fe0 <LCD_Scan_Dir+0x3f8>)
 8003e44:	895b      	ldrh	r3, [r3, #10]
 8003e46:	3301      	adds	r3, #1
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff fb2e 	bl	80034ac <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003e50:	4b64      	ldr	r3, [pc, #400]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003e52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e56:	611a      	str	r2, [r3, #16]
 8003e58:	4b62      	ldr	r3, [pc, #392]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003e5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e5e:	615a      	str	r2, [r3, #20]
 8003e60:	4b61      	ldr	r3, [pc, #388]	; (8003fe8 <LCD_Scan_Dir+0x400>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	60da      	str	r2, [r3, #12]
 8003e66:	4b5f      	ldr	r3, [pc, #380]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003e68:	2280      	movs	r2, #128	; 0x80
 8003e6a:	615a      	str	r2, [r3, #20]
 8003e6c:	4b5d      	ldr	r3, [pc, #372]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003e6e:	2280      	movs	r2, #128	; 0x80
 8003e70:	611a      	str	r2, [r3, #16]
 8003e72:	4b5c      	ldr	r3, [pc, #368]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e78:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 8003e7a:	4b59      	ldr	r3, [pc, #356]	; (8003fe0 <LCD_Scan_Dir+0x3f8>)
 8003e7c:	895b      	ldrh	r3, [r3, #10]
 8003e7e:	3302      	adds	r3, #2
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff fb12 	bl	80034ac <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8003e88:	4b56      	ldr	r3, [pc, #344]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003e8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e8e:	611a      	str	r2, [r3, #16]
 8003e90:	4b54      	ldr	r3, [pc, #336]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e96:	615a      	str	r2, [r3, #20]
 8003e98:	4b51      	ldr	r3, [pc, #324]	; (8003fe0 <LCD_Scan_Dir+0x3f8>)
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	121a      	asrs	r2, r3, #8
 8003ea0:	4b51      	ldr	r3, [pc, #324]	; (8003fe8 <LCD_Scan_Dir+0x400>)
 8003ea2:	60da      	str	r2, [r3, #12]
 8003ea4:	4b4f      	ldr	r3, [pc, #316]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003ea6:	2280      	movs	r2, #128	; 0x80
 8003ea8:	615a      	str	r2, [r3, #20]
 8003eaa:	4b4e      	ldr	r3, [pc, #312]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003eac:	2280      	movs	r2, #128	; 0x80
 8003eae:	611a      	str	r2, [r3, #16]
 8003eb0:	4b4c      	ldr	r3, [pc, #304]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eb6:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8003eb8:	4b49      	ldr	r3, [pc, #292]	; (8003fe0 <LCD_Scan_Dir+0x3f8>)
 8003eba:	895b      	ldrh	r3, [r3, #10]
 8003ebc:	3303      	adds	r3, #3
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff faf3 	bl	80034ac <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8003ec6:	4b47      	ldr	r3, [pc, #284]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003ec8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ecc:	611a      	str	r2, [r3, #16]
 8003ece:	4b45      	ldr	r3, [pc, #276]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ed4:	615a      	str	r2, [r3, #20]
 8003ed6:	4b42      	ldr	r3, [pc, #264]	; (8003fe0 <LCD_Scan_Dir+0x3f8>)
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	4a42      	ldr	r2, [pc, #264]	; (8003fe8 <LCD_Scan_Dir+0x400>)
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	60d3      	str	r3, [r2, #12]
 8003ee2:	4b40      	ldr	r3, [pc, #256]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003ee4:	2280      	movs	r2, #128	; 0x80
 8003ee6:	615a      	str	r2, [r3, #20]
 8003ee8:	4b3e      	ldr	r3, [pc, #248]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003eea:	2280      	movs	r2, #128	; 0x80
 8003eec:	611a      	str	r2, [r3, #16]
 8003eee:	4b3d      	ldr	r3, [pc, #244]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ef4:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8003ef6:	4b3a      	ldr	r3, [pc, #232]	; (8003fe0 <LCD_Scan_Dir+0x3f8>)
 8003ef8:	899b      	ldrh	r3, [r3, #12]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7ff fad6 	bl	80034ac <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003f00:	4b38      	ldr	r3, [pc, #224]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003f02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f06:	611a      	str	r2, [r3, #16]
 8003f08:	4b36      	ldr	r3, [pc, #216]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f0e:	615a      	str	r2, [r3, #20]
 8003f10:	4b35      	ldr	r3, [pc, #212]	; (8003fe8 <LCD_Scan_Dir+0x400>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	60da      	str	r2, [r3, #12]
 8003f16:	4b33      	ldr	r3, [pc, #204]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003f18:	2280      	movs	r2, #128	; 0x80
 8003f1a:	615a      	str	r2, [r3, #20]
 8003f1c:	4b31      	ldr	r3, [pc, #196]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003f1e:	2280      	movs	r2, #128	; 0x80
 8003f20:	611a      	str	r2, [r3, #16]
 8003f22:	4b30      	ldr	r3, [pc, #192]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f28:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 8003f2a:	4b2d      	ldr	r3, [pc, #180]	; (8003fe0 <LCD_Scan_Dir+0x3f8>)
 8003f2c:	899b      	ldrh	r3, [r3, #12]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff faba 	bl	80034ac <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003f38:	4b2a      	ldr	r3, [pc, #168]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f3e:	611a      	str	r2, [r3, #16]
 8003f40:	4b28      	ldr	r3, [pc, #160]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f46:	615a      	str	r2, [r3, #20]
 8003f48:	4b27      	ldr	r3, [pc, #156]	; (8003fe8 <LCD_Scan_Dir+0x400>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	60da      	str	r2, [r3, #12]
 8003f4e:	4b25      	ldr	r3, [pc, #148]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003f50:	2280      	movs	r2, #128	; 0x80
 8003f52:	615a      	str	r2, [r3, #20]
 8003f54:	4b23      	ldr	r3, [pc, #140]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003f56:	2280      	movs	r2, #128	; 0x80
 8003f58:	611a      	str	r2, [r3, #16]
 8003f5a:	4b22      	ldr	r3, [pc, #136]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f60:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 8003f62:	4b1f      	ldr	r3, [pc, #124]	; (8003fe0 <LCD_Scan_Dir+0x3f8>)
 8003f64:	899b      	ldrh	r3, [r3, #12]
 8003f66:	3302      	adds	r3, #2
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff fa9e 	bl	80034ac <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8003f70:	4b1c      	ldr	r3, [pc, #112]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003f72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f76:	611a      	str	r2, [r3, #16]
 8003f78:	4b1a      	ldr	r3, [pc, #104]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f7e:	615a      	str	r2, [r3, #20]
 8003f80:	4b17      	ldr	r3, [pc, #92]	; (8003fe0 <LCD_Scan_Dir+0x3f8>)
 8003f82:	885b      	ldrh	r3, [r3, #2]
 8003f84:	3b01      	subs	r3, #1
 8003f86:	121a      	asrs	r2, r3, #8
 8003f88:	4b17      	ldr	r3, [pc, #92]	; (8003fe8 <LCD_Scan_Dir+0x400>)
 8003f8a:	60da      	str	r2, [r3, #12]
 8003f8c:	4b15      	ldr	r3, [pc, #84]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003f8e:	2280      	movs	r2, #128	; 0x80
 8003f90:	615a      	str	r2, [r3, #20]
 8003f92:	4b14      	ldr	r3, [pc, #80]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003f94:	2280      	movs	r2, #128	; 0x80
 8003f96:	611a      	str	r2, [r3, #16]
 8003f98:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003f9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f9e:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 8003fa0:	4b0f      	ldr	r3, [pc, #60]	; (8003fe0 <LCD_Scan_Dir+0x3f8>)
 8003fa2:	899b      	ldrh	r3, [r3, #12]
 8003fa4:	3303      	adds	r3, #3
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff fa7f 	bl	80034ac <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8003fae:	4b0d      	ldr	r3, [pc, #52]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003fb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fb4:	611a      	str	r2, [r3, #16]
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fbc:	615a      	str	r2, [r3, #20]
 8003fbe:	4b08      	ldr	r3, [pc, #32]	; (8003fe0 <LCD_Scan_Dir+0x3f8>)
 8003fc0:	885b      	ldrh	r3, [r3, #2]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	4a08      	ldr	r2, [pc, #32]	; (8003fe8 <LCD_Scan_Dir+0x400>)
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	60d3      	str	r3, [r2, #12]
 8003fca:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003fcc:	2280      	movs	r2, #128	; 0x80
 8003fce:	615a      	str	r2, [r3, #20]
 8003fd0:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003fd2:	2280      	movs	r2, #128	; 0x80
 8003fd4:	611a      	str	r2, [r3, #16]
 8003fd6:	4b03      	ldr	r3, [pc, #12]	; (8003fe4 <LCD_Scan_Dir+0x3fc>)
 8003fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fdc:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8003fde:	e10a      	b.n	80041f6 <LCD_Scan_Dir+0x60e>
 8003fe0:	20000e18 	.word	0x20000e18
 8003fe4:	40011000 	.word	0x40011000
 8003fe8:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 8003fec:	4b84      	ldr	r3, [pc, #528]	; (8004200 <LCD_Scan_Dir+0x618>)
 8003fee:	895b      	ldrh	r3, [r3, #10]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7ff fa5b 	bl	80034ac <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003ff6:	4b83      	ldr	r3, [pc, #524]	; (8004204 <LCD_Scan_Dir+0x61c>)
 8003ff8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ffc:	611a      	str	r2, [r3, #16]
 8003ffe:	4b81      	ldr	r3, [pc, #516]	; (8004204 <LCD_Scan_Dir+0x61c>)
 8004000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004004:	615a      	str	r2, [r3, #20]
 8004006:	4b80      	ldr	r3, [pc, #512]	; (8004208 <LCD_Scan_Dir+0x620>)
 8004008:	2200      	movs	r2, #0
 800400a:	60da      	str	r2, [r3, #12]
 800400c:	4b7d      	ldr	r3, [pc, #500]	; (8004204 <LCD_Scan_Dir+0x61c>)
 800400e:	2280      	movs	r2, #128	; 0x80
 8004010:	615a      	str	r2, [r3, #20]
 8004012:	4b7c      	ldr	r3, [pc, #496]	; (8004204 <LCD_Scan_Dir+0x61c>)
 8004014:	2280      	movs	r2, #128	; 0x80
 8004016:	611a      	str	r2, [r3, #16]
 8004018:	4b7a      	ldr	r3, [pc, #488]	; (8004204 <LCD_Scan_Dir+0x61c>)
 800401a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800401e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8004020:	4b78      	ldr	r3, [pc, #480]	; (8004204 <LCD_Scan_Dir+0x61c>)
 8004022:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004026:	611a      	str	r2, [r3, #16]
 8004028:	4b76      	ldr	r3, [pc, #472]	; (8004204 <LCD_Scan_Dir+0x61c>)
 800402a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800402e:	615a      	str	r2, [r3, #20]
 8004030:	4b75      	ldr	r3, [pc, #468]	; (8004208 <LCD_Scan_Dir+0x620>)
 8004032:	2200      	movs	r2, #0
 8004034:	60da      	str	r2, [r3, #12]
 8004036:	4b73      	ldr	r3, [pc, #460]	; (8004204 <LCD_Scan_Dir+0x61c>)
 8004038:	2280      	movs	r2, #128	; 0x80
 800403a:	615a      	str	r2, [r3, #20]
 800403c:	4b71      	ldr	r3, [pc, #452]	; (8004204 <LCD_Scan_Dir+0x61c>)
 800403e:	2280      	movs	r2, #128	; 0x80
 8004040:	611a      	str	r2, [r3, #16]
 8004042:	4b70      	ldr	r3, [pc, #448]	; (8004204 <LCD_Scan_Dir+0x61c>)
 8004044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004048:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 800404a:	4b6e      	ldr	r3, [pc, #440]	; (8004204 <LCD_Scan_Dir+0x61c>)
 800404c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004050:	611a      	str	r2, [r3, #16]
 8004052:	4b6c      	ldr	r3, [pc, #432]	; (8004204 <LCD_Scan_Dir+0x61c>)
 8004054:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004058:	615a      	str	r2, [r3, #20]
 800405a:	4b69      	ldr	r3, [pc, #420]	; (8004200 <LCD_Scan_Dir+0x618>)
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	3b01      	subs	r3, #1
 8004060:	121a      	asrs	r2, r3, #8
 8004062:	4b69      	ldr	r3, [pc, #420]	; (8004208 <LCD_Scan_Dir+0x620>)
 8004064:	60da      	str	r2, [r3, #12]
 8004066:	4b67      	ldr	r3, [pc, #412]	; (8004204 <LCD_Scan_Dir+0x61c>)
 8004068:	2280      	movs	r2, #128	; 0x80
 800406a:	615a      	str	r2, [r3, #20]
 800406c:	4b65      	ldr	r3, [pc, #404]	; (8004204 <LCD_Scan_Dir+0x61c>)
 800406e:	2280      	movs	r2, #128	; 0x80
 8004070:	611a      	str	r2, [r3, #16]
 8004072:	4b64      	ldr	r3, [pc, #400]	; (8004204 <LCD_Scan_Dir+0x61c>)
 8004074:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004078:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800407a:	4b62      	ldr	r3, [pc, #392]	; (8004204 <LCD_Scan_Dir+0x61c>)
 800407c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004080:	611a      	str	r2, [r3, #16]
 8004082:	4b60      	ldr	r3, [pc, #384]	; (8004204 <LCD_Scan_Dir+0x61c>)
 8004084:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004088:	615a      	str	r2, [r3, #20]
 800408a:	4b5d      	ldr	r3, [pc, #372]	; (8004200 <LCD_Scan_Dir+0x618>)
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	3b01      	subs	r3, #1
 8004090:	4a5d      	ldr	r2, [pc, #372]	; (8004208 <LCD_Scan_Dir+0x620>)
 8004092:	b2db      	uxtb	r3, r3
 8004094:	60d3      	str	r3, [r2, #12]
 8004096:	4b5b      	ldr	r3, [pc, #364]	; (8004204 <LCD_Scan_Dir+0x61c>)
 8004098:	2280      	movs	r2, #128	; 0x80
 800409a:	615a      	str	r2, [r3, #20]
 800409c:	4b59      	ldr	r3, [pc, #356]	; (8004204 <LCD_Scan_Dir+0x61c>)
 800409e:	2280      	movs	r2, #128	; 0x80
 80040a0:	611a      	str	r2, [r3, #16]
 80040a2:	4b58      	ldr	r3, [pc, #352]	; (8004204 <LCD_Scan_Dir+0x61c>)
 80040a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040a8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 80040aa:	4b55      	ldr	r3, [pc, #340]	; (8004200 <LCD_Scan_Dir+0x618>)
 80040ac:	899b      	ldrh	r3, [r3, #12]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff f9fc 	bl	80034ac <LCD_WR_REG>
			LCD_WR_DATA(0);
 80040b4:	4b53      	ldr	r3, [pc, #332]	; (8004204 <LCD_Scan_Dir+0x61c>)
 80040b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040ba:	611a      	str	r2, [r3, #16]
 80040bc:	4b51      	ldr	r3, [pc, #324]	; (8004204 <LCD_Scan_Dir+0x61c>)
 80040be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040c2:	615a      	str	r2, [r3, #20]
 80040c4:	4b50      	ldr	r3, [pc, #320]	; (8004208 <LCD_Scan_Dir+0x620>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	60da      	str	r2, [r3, #12]
 80040ca:	4b4e      	ldr	r3, [pc, #312]	; (8004204 <LCD_Scan_Dir+0x61c>)
 80040cc:	2280      	movs	r2, #128	; 0x80
 80040ce:	615a      	str	r2, [r3, #20]
 80040d0:	4b4c      	ldr	r3, [pc, #304]	; (8004204 <LCD_Scan_Dir+0x61c>)
 80040d2:	2280      	movs	r2, #128	; 0x80
 80040d4:	611a      	str	r2, [r3, #16]
 80040d6:	4b4b      	ldr	r3, [pc, #300]	; (8004204 <LCD_Scan_Dir+0x61c>)
 80040d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040dc:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80040de:	4b49      	ldr	r3, [pc, #292]	; (8004204 <LCD_Scan_Dir+0x61c>)
 80040e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040e4:	611a      	str	r2, [r3, #16]
 80040e6:	4b47      	ldr	r3, [pc, #284]	; (8004204 <LCD_Scan_Dir+0x61c>)
 80040e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040ec:	615a      	str	r2, [r3, #20]
 80040ee:	4b46      	ldr	r3, [pc, #280]	; (8004208 <LCD_Scan_Dir+0x620>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	60da      	str	r2, [r3, #12]
 80040f4:	4b43      	ldr	r3, [pc, #268]	; (8004204 <LCD_Scan_Dir+0x61c>)
 80040f6:	2280      	movs	r2, #128	; 0x80
 80040f8:	615a      	str	r2, [r3, #20]
 80040fa:	4b42      	ldr	r3, [pc, #264]	; (8004204 <LCD_Scan_Dir+0x61c>)
 80040fc:	2280      	movs	r2, #128	; 0x80
 80040fe:	611a      	str	r2, [r3, #16]
 8004100:	4b40      	ldr	r3, [pc, #256]	; (8004204 <LCD_Scan_Dir+0x61c>)
 8004102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004106:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8004108:	4b3e      	ldr	r3, [pc, #248]	; (8004204 <LCD_Scan_Dir+0x61c>)
 800410a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800410e:	611a      	str	r2, [r3, #16]
 8004110:	4b3c      	ldr	r3, [pc, #240]	; (8004204 <LCD_Scan_Dir+0x61c>)
 8004112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004116:	615a      	str	r2, [r3, #20]
 8004118:	4b39      	ldr	r3, [pc, #228]	; (8004200 <LCD_Scan_Dir+0x618>)
 800411a:	885b      	ldrh	r3, [r3, #2]
 800411c:	3b01      	subs	r3, #1
 800411e:	121a      	asrs	r2, r3, #8
 8004120:	4b39      	ldr	r3, [pc, #228]	; (8004208 <LCD_Scan_Dir+0x620>)
 8004122:	60da      	str	r2, [r3, #12]
 8004124:	4b37      	ldr	r3, [pc, #220]	; (8004204 <LCD_Scan_Dir+0x61c>)
 8004126:	2280      	movs	r2, #128	; 0x80
 8004128:	615a      	str	r2, [r3, #20]
 800412a:	4b36      	ldr	r3, [pc, #216]	; (8004204 <LCD_Scan_Dir+0x61c>)
 800412c:	2280      	movs	r2, #128	; 0x80
 800412e:	611a      	str	r2, [r3, #16]
 8004130:	4b34      	ldr	r3, [pc, #208]	; (8004204 <LCD_Scan_Dir+0x61c>)
 8004132:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004136:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8004138:	4b32      	ldr	r3, [pc, #200]	; (8004204 <LCD_Scan_Dir+0x61c>)
 800413a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800413e:	611a      	str	r2, [r3, #16]
 8004140:	4b30      	ldr	r3, [pc, #192]	; (8004204 <LCD_Scan_Dir+0x61c>)
 8004142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004146:	615a      	str	r2, [r3, #20]
 8004148:	4b2d      	ldr	r3, [pc, #180]	; (8004200 <LCD_Scan_Dir+0x618>)
 800414a:	885b      	ldrh	r3, [r3, #2]
 800414c:	3b01      	subs	r3, #1
 800414e:	4a2e      	ldr	r2, [pc, #184]	; (8004208 <LCD_Scan_Dir+0x620>)
 8004150:	b2db      	uxtb	r3, r3
 8004152:	60d3      	str	r3, [r2, #12]
 8004154:	4b2b      	ldr	r3, [pc, #172]	; (8004204 <LCD_Scan_Dir+0x61c>)
 8004156:	2280      	movs	r2, #128	; 0x80
 8004158:	615a      	str	r2, [r3, #20]
 800415a:	4b2a      	ldr	r3, [pc, #168]	; (8004204 <LCD_Scan_Dir+0x61c>)
 800415c:	2280      	movs	r2, #128	; 0x80
 800415e:	611a      	str	r2, [r3, #16]
 8004160:	4b28      	ldr	r3, [pc, #160]	; (8004204 <LCD_Scan_Dir+0x61c>)
 8004162:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004166:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8004168:	e045      	b.n	80041f6 <LCD_Scan_Dir+0x60e>
		}
	} else {
		switch (dir) {
 800416a:	79fb      	ldrb	r3, [r7, #7]
 800416c:	2b07      	cmp	r3, #7
 800416e:	d836      	bhi.n	80041de <LCD_Scan_Dir+0x5f6>
 8004170:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <LCD_Scan_Dir+0x590>)
 8004172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004176:	bf00      	nop
 8004178:	08004199 	.word	0x08004199
 800417c:	080041a3 	.word	0x080041a3
 8004180:	080041ad 	.word	0x080041ad
 8004184:	080041df 	.word	0x080041df
 8004188:	080041b7 	.word	0x080041b7
 800418c:	080041c1 	.word	0x080041c1
 8004190:	080041cb 	.word	0x080041cb
 8004194:	080041d5 	.word	0x080041d5
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 8004198:	89fb      	ldrh	r3, [r7, #14]
 800419a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800419e:	81fb      	strh	r3, [r7, #14]
			break;
 80041a0:	e01d      	b.n	80041de <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 80041a2:	89fb      	ldrh	r3, [r7, #14]
 80041a4:	f043 0310 	orr.w	r3, r3, #16
 80041a8:	81fb      	strh	r3, [r7, #14]
			break;
 80041aa:	e018      	b.n	80041de <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 80041ac:	89fb      	ldrh	r3, [r7, #14]
 80041ae:	f043 0320 	orr.w	r3, r3, #32
 80041b2:	81fb      	strh	r3, [r7, #14]
			break;
 80041b4:	e013      	b.n	80041de <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 80041b6:	89fb      	ldrh	r3, [r7, #14]
 80041b8:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80041bc:	81fb      	strh	r3, [r7, #14]
			break;
 80041be:	e00e      	b.n	80041de <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 80041c0:	89fb      	ldrh	r3, [r7, #14]
 80041c2:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80041c6:	81fb      	strh	r3, [r7, #14]
			break;
 80041c8:	e009      	b.n	80041de <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 80041ca:	89fb      	ldrh	r3, [r7, #14]
 80041cc:	f043 0318 	orr.w	r3, r3, #24
 80041d0:	81fb      	strh	r3, [r7, #14]
			break;
 80041d2:	e004      	b.n	80041de <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 80041d4:	89fb      	ldrh	r3, [r7, #14]
 80041d6:	f043 0308 	orr.w	r3, r3, #8
 80041da:	81fb      	strh	r3, [r7, #14]
			break;
 80041dc:	bf00      	nop
		}
		dirreg = 0X03;
 80041de:	2303      	movs	r3, #3
 80041e0:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 80041e2:	89fb      	ldrh	r3, [r7, #14]
 80041e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041e8:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80041ea:	89fa      	ldrh	r2, [r7, #14]
 80041ec:	89bb      	ldrh	r3, [r7, #12]
 80041ee:	4611      	mov	r1, r2
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7ff f9e7 	bl	80035c4 <LCD_WriteReg>
	}
}
 80041f6:	bf00      	nop
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	20000e18 	.word	0x20000e18
 8004204:	40011000 	.word	0x40011000
 8004208:	40010c00 	.word	0x40010c00

0800420c <LCD_DrawPoint>:
//Draw a point with color
//x,y: coordinate

void LCD_DrawPoint(uint16_t x, uint16_t y) {
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	460a      	mov	r2, r1
 8004216:	80fb      	strh	r3, [r7, #6]
 8004218:	4613      	mov	r3, r2
 800421a:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x, y);
 800421c:	88ba      	ldrh	r2, [r7, #4]
 800421e:	88fb      	ldrh	r3, [r7, #6]
 8004220:	4611      	mov	r1, r2
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff fa14 	bl	8003650 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();
 8004228:	f7ff fa06 	bl	8003638 <LCD_WriteRAM_Prepare>
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
 800422c:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <LCD_DrawPoint+0x54>)
 800422e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004232:	611a      	str	r2, [r3, #16]
 8004234:	4b0a      	ldr	r3, [pc, #40]	; (8004260 <LCD_DrawPoint+0x54>)
 8004236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800423a:	615a      	str	r2, [r3, #20]
 800423c:	4b09      	ldr	r3, [pc, #36]	; (8004264 <LCD_DrawPoint+0x58>)
 800423e:	881a      	ldrh	r2, [r3, #0]
 8004240:	4b09      	ldr	r3, [pc, #36]	; (8004268 <LCD_DrawPoint+0x5c>)
 8004242:	60da      	str	r2, [r3, #12]
 8004244:	4b06      	ldr	r3, [pc, #24]	; (8004260 <LCD_DrawPoint+0x54>)
 8004246:	2280      	movs	r2, #128	; 0x80
 8004248:	615a      	str	r2, [r3, #20]
 800424a:	4b05      	ldr	r3, [pc, #20]	; (8004260 <LCD_DrawPoint+0x54>)
 800424c:	2280      	movs	r2, #128	; 0x80
 800424e:	611a      	str	r2, [r3, #16]
 8004250:	4b03      	ldr	r3, [pc, #12]	; (8004260 <LCD_DrawPoint+0x54>)
 8004252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004256:	611a      	str	r2, [r3, #16]
}
 8004258:	bf00      	nop
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40011000 	.word	0x40011000
 8004264:	20000dec 	.word	0x20000dec
 8004268:	40010c00 	.word	0x40010c00

0800426c <LCD_Fast_DrawPoint>:
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	80fb      	strh	r3, [r7, #6]
 8004276:	460b      	mov	r3, r1
 8004278:	80bb      	strh	r3, [r7, #4]
 800427a:	4613      	mov	r3, r2
 800427c:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 800427e:	4b75      	ldr	r3, [pc, #468]	; (8004454 <LCD_Fast_DrawPoint+0x1e8>)
 8004280:	889b      	ldrh	r3, [r3, #4]
 8004282:	f249 3241 	movw	r2, #37697	; 0x9341
 8004286:	4293      	cmp	r3, r2
 8004288:	d005      	beq.n	8004296 <LCD_Fast_DrawPoint+0x2a>
 800428a:	4b72      	ldr	r3, [pc, #456]	; (8004454 <LCD_Fast_DrawPoint+0x1e8>)
 800428c:	889b      	ldrh	r3, [r3, #4]
 800428e:	f245 3210 	movw	r2, #21264	; 0x5310
 8004292:	4293      	cmp	r3, r2
 8004294:	d164      	bne.n	8004360 <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 8004296:	4b6f      	ldr	r3, [pc, #444]	; (8004454 <LCD_Fast_DrawPoint+0x1e8>)
 8004298:	895b      	ldrh	r3, [r3, #10]
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff f906 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80042a0:	4b6d      	ldr	r3, [pc, #436]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 80042a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042a6:	611a      	str	r2, [r3, #16]
 80042a8:	4b6b      	ldr	r3, [pc, #428]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 80042aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ae:	615a      	str	r2, [r3, #20]
 80042b0:	88fb      	ldrh	r3, [r7, #6]
 80042b2:	0a1b      	lsrs	r3, r3, #8
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	4b69      	ldr	r3, [pc, #420]	; (800445c <LCD_Fast_DrawPoint+0x1f0>)
 80042b8:	60da      	str	r2, [r3, #12]
 80042ba:	4b67      	ldr	r3, [pc, #412]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 80042bc:	2280      	movs	r2, #128	; 0x80
 80042be:	615a      	str	r2, [r3, #20]
 80042c0:	4b65      	ldr	r3, [pc, #404]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 80042c2:	2280      	movs	r2, #128	; 0x80
 80042c4:	611a      	str	r2, [r3, #16]
 80042c6:	4b64      	ldr	r3, [pc, #400]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 80042c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042cc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 80042ce:	4b62      	ldr	r3, [pc, #392]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 80042d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042d4:	611a      	str	r2, [r3, #16]
 80042d6:	4b60      	ldr	r3, [pc, #384]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 80042d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042dc:	615a      	str	r2, [r3, #20]
 80042de:	88fb      	ldrh	r3, [r7, #6]
 80042e0:	4a5e      	ldr	r2, [pc, #376]	; (800445c <LCD_Fast_DrawPoint+0x1f0>)
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	60d3      	str	r3, [r2, #12]
 80042e6:	4b5c      	ldr	r3, [pc, #368]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 80042e8:	2280      	movs	r2, #128	; 0x80
 80042ea:	615a      	str	r2, [r3, #20]
 80042ec:	4b5a      	ldr	r3, [pc, #360]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 80042ee:	2280      	movs	r2, #128	; 0x80
 80042f0:	611a      	str	r2, [r3, #16]
 80042f2:	4b59      	ldr	r3, [pc, #356]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 80042f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042f8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80042fa:	4b56      	ldr	r3, [pc, #344]	; (8004454 <LCD_Fast_DrawPoint+0x1e8>)
 80042fc:	899b      	ldrh	r3, [r3, #12]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff f8d4 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8004304:	4b54      	ldr	r3, [pc, #336]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 8004306:	f44f 7280 	mov.w	r2, #256	; 0x100
 800430a:	611a      	str	r2, [r3, #16]
 800430c:	4b52      	ldr	r3, [pc, #328]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 800430e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004312:	615a      	str	r2, [r3, #20]
 8004314:	88bb      	ldrh	r3, [r7, #4]
 8004316:	0a1b      	lsrs	r3, r3, #8
 8004318:	b29a      	uxth	r2, r3
 800431a:	4b50      	ldr	r3, [pc, #320]	; (800445c <LCD_Fast_DrawPoint+0x1f0>)
 800431c:	60da      	str	r2, [r3, #12]
 800431e:	4b4e      	ldr	r3, [pc, #312]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 8004320:	2280      	movs	r2, #128	; 0x80
 8004322:	615a      	str	r2, [r3, #20]
 8004324:	4b4c      	ldr	r3, [pc, #304]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 8004326:	2280      	movs	r2, #128	; 0x80
 8004328:	611a      	str	r2, [r3, #16]
 800432a:	4b4b      	ldr	r3, [pc, #300]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 800432c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004330:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8004332:	4b49      	ldr	r3, [pc, #292]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 8004334:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004338:	611a      	str	r2, [r3, #16]
 800433a:	4b47      	ldr	r3, [pc, #284]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 800433c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004340:	615a      	str	r2, [r3, #20]
 8004342:	88bb      	ldrh	r3, [r7, #4]
 8004344:	4a45      	ldr	r2, [pc, #276]	; (800445c <LCD_Fast_DrawPoint+0x1f0>)
 8004346:	b2db      	uxtb	r3, r3
 8004348:	60d3      	str	r3, [r2, #12]
 800434a:	4b43      	ldr	r3, [pc, #268]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 800434c:	2280      	movs	r2, #128	; 0x80
 800434e:	615a      	str	r2, [r3, #20]
 8004350:	4b41      	ldr	r3, [pc, #260]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 8004352:	2280      	movs	r2, #128	; 0x80
 8004354:	611a      	str	r2, [r3, #16]
 8004356:	4b40      	ldr	r3, [pc, #256]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 8004358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800435c:	611a      	str	r2, [r3, #16]
 800435e:	e1e6      	b.n	800472e <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 8004360:	4b3c      	ldr	r3, [pc, #240]	; (8004454 <LCD_Fast_DrawPoint+0x1e8>)
 8004362:	889b      	ldrh	r3, [r3, #4]
 8004364:	f245 5210 	movw	r2, #21776	; 0x5510
 8004368:	4293      	cmp	r3, r2
 800436a:	d179      	bne.n	8004460 <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 800436c:	4b39      	ldr	r3, [pc, #228]	; (8004454 <LCD_Fast_DrawPoint+0x1e8>)
 800436e:	895b      	ldrh	r3, [r3, #10]
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff f89b 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8004376:	4b38      	ldr	r3, [pc, #224]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 8004378:	f44f 7280 	mov.w	r2, #256	; 0x100
 800437c:	611a      	str	r2, [r3, #16]
 800437e:	4b36      	ldr	r3, [pc, #216]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 8004380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004384:	615a      	str	r2, [r3, #20]
 8004386:	88fb      	ldrh	r3, [r7, #6]
 8004388:	0a1b      	lsrs	r3, r3, #8
 800438a:	b29a      	uxth	r2, r3
 800438c:	4b33      	ldr	r3, [pc, #204]	; (800445c <LCD_Fast_DrawPoint+0x1f0>)
 800438e:	60da      	str	r2, [r3, #12]
 8004390:	4b31      	ldr	r3, [pc, #196]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 8004392:	2280      	movs	r2, #128	; 0x80
 8004394:	615a      	str	r2, [r3, #20]
 8004396:	4b30      	ldr	r3, [pc, #192]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 8004398:	2280      	movs	r2, #128	; 0x80
 800439a:	611a      	str	r2, [r3, #16]
 800439c:	4b2e      	ldr	r3, [pc, #184]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 800439e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043a2:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 80043a4:	4b2b      	ldr	r3, [pc, #172]	; (8004454 <LCD_Fast_DrawPoint+0x1e8>)
 80043a6:	895b      	ldrh	r3, [r3, #10]
 80043a8:	3301      	adds	r3, #1
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff f87d 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 80043b2:	4b29      	ldr	r3, [pc, #164]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 80043b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043b8:	611a      	str	r2, [r3, #16]
 80043ba:	4b27      	ldr	r3, [pc, #156]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 80043bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043c0:	615a      	str	r2, [r3, #20]
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	4a25      	ldr	r2, [pc, #148]	; (800445c <LCD_Fast_DrawPoint+0x1f0>)
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	60d3      	str	r3, [r2, #12]
 80043ca:	4b23      	ldr	r3, [pc, #140]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 80043cc:	2280      	movs	r2, #128	; 0x80
 80043ce:	615a      	str	r2, [r3, #20]
 80043d0:	4b21      	ldr	r3, [pc, #132]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 80043d2:	2280      	movs	r2, #128	; 0x80
 80043d4:	611a      	str	r2, [r3, #16]
 80043d6:	4b20      	ldr	r3, [pc, #128]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 80043d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043dc:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80043de:	4b1d      	ldr	r3, [pc, #116]	; (8004454 <LCD_Fast_DrawPoint+0x1e8>)
 80043e0:	899b      	ldrh	r3, [r3, #12]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7ff f862 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80043e8:	4b1b      	ldr	r3, [pc, #108]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 80043ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043ee:	611a      	str	r2, [r3, #16]
 80043f0:	4b19      	ldr	r3, [pc, #100]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 80043f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043f6:	615a      	str	r2, [r3, #20]
 80043f8:	88bb      	ldrh	r3, [r7, #4]
 80043fa:	0a1b      	lsrs	r3, r3, #8
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	4b17      	ldr	r3, [pc, #92]	; (800445c <LCD_Fast_DrawPoint+0x1f0>)
 8004400:	60da      	str	r2, [r3, #12]
 8004402:	4b15      	ldr	r3, [pc, #84]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 8004404:	2280      	movs	r2, #128	; 0x80
 8004406:	615a      	str	r2, [r3, #20]
 8004408:	4b13      	ldr	r3, [pc, #76]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 800440a:	2280      	movs	r2, #128	; 0x80
 800440c:	611a      	str	r2, [r3, #16]
 800440e:	4b12      	ldr	r3, [pc, #72]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 8004410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004414:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8004416:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <LCD_Fast_DrawPoint+0x1e8>)
 8004418:	899b      	ldrh	r3, [r3, #12]
 800441a:	3301      	adds	r3, #1
 800441c:	b29b      	uxth	r3, r3
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff f844 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 8004424:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 8004426:	f44f 7280 	mov.w	r2, #256	; 0x100
 800442a:	611a      	str	r2, [r3, #16]
 800442c:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 800442e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004432:	615a      	str	r2, [r3, #20]
 8004434:	88bb      	ldrh	r3, [r7, #4]
 8004436:	4a09      	ldr	r2, [pc, #36]	; (800445c <LCD_Fast_DrawPoint+0x1f0>)
 8004438:	b2db      	uxtb	r3, r3
 800443a:	60d3      	str	r3, [r2, #12]
 800443c:	4b06      	ldr	r3, [pc, #24]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 800443e:	2280      	movs	r2, #128	; 0x80
 8004440:	615a      	str	r2, [r3, #20]
 8004442:	4b05      	ldr	r3, [pc, #20]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 8004444:	2280      	movs	r2, #128	; 0x80
 8004446:	611a      	str	r2, [r3, #16]
 8004448:	4b03      	ldr	r3, [pc, #12]	; (8004458 <LCD_Fast_DrawPoint+0x1ec>)
 800444a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800444e:	611a      	str	r2, [r3, #16]
 8004450:	e16d      	b.n	800472e <LCD_Fast_DrawPoint+0x4c2>
 8004452:	bf00      	nop
 8004454:	20000e18 	.word	0x20000e18
 8004458:	40011000 	.word	0x40011000
 800445c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8004460:	4b68      	ldr	r3, [pc, #416]	; (8004604 <LCD_Fast_DrawPoint+0x398>)
 8004462:	889b      	ldrh	r3, [r3, #4]
 8004464:	f641 1263 	movw	r2, #6499	; 0x1963
 8004468:	4293      	cmp	r3, r2
 800446a:	f040 80d1 	bne.w	8004610 <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 800446e:	4b65      	ldr	r3, [pc, #404]	; (8004604 <LCD_Fast_DrawPoint+0x398>)
 8004470:	799b      	ldrb	r3, [r3, #6]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 8004476:	4b63      	ldr	r3, [pc, #396]	; (8004604 <LCD_Fast_DrawPoint+0x398>)
 8004478:	881a      	ldrh	r2, [r3, #0]
 800447a:	88fb      	ldrh	r3, [r7, #6]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	b29b      	uxth	r3, r3
 8004480:	3b01      	subs	r3, #1
 8004482:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8004484:	4b5f      	ldr	r3, [pc, #380]	; (8004604 <LCD_Fast_DrawPoint+0x398>)
 8004486:	895b      	ldrh	r3, [r3, #10]
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff f80f 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 800448e:	4b5e      	ldr	r3, [pc, #376]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 8004490:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004494:	611a      	str	r2, [r3, #16]
 8004496:	4b5c      	ldr	r3, [pc, #368]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 8004498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800449c:	615a      	str	r2, [r3, #20]
 800449e:	88fb      	ldrh	r3, [r7, #6]
 80044a0:	0a1b      	lsrs	r3, r3, #8
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	4b59      	ldr	r3, [pc, #356]	; (800460c <LCD_Fast_DrawPoint+0x3a0>)
 80044a6:	60da      	str	r2, [r3, #12]
 80044a8:	4b57      	ldr	r3, [pc, #348]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 80044aa:	2280      	movs	r2, #128	; 0x80
 80044ac:	615a      	str	r2, [r3, #20]
 80044ae:	4b56      	ldr	r3, [pc, #344]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 80044b0:	2280      	movs	r2, #128	; 0x80
 80044b2:	611a      	str	r2, [r3, #16]
 80044b4:	4b54      	ldr	r3, [pc, #336]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 80044b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044ba:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 80044bc:	4b52      	ldr	r3, [pc, #328]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 80044be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044c2:	611a      	str	r2, [r3, #16]
 80044c4:	4b50      	ldr	r3, [pc, #320]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 80044c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044ca:	615a      	str	r2, [r3, #20]
 80044cc:	88fb      	ldrh	r3, [r7, #6]
 80044ce:	4a4f      	ldr	r2, [pc, #316]	; (800460c <LCD_Fast_DrawPoint+0x3a0>)
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	60d3      	str	r3, [r2, #12]
 80044d4:	4b4c      	ldr	r3, [pc, #304]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 80044d6:	2280      	movs	r2, #128	; 0x80
 80044d8:	615a      	str	r2, [r3, #20]
 80044da:	4b4b      	ldr	r3, [pc, #300]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 80044dc:	2280      	movs	r2, #128	; 0x80
 80044de:	611a      	str	r2, [r3, #16]
 80044e0:	4b49      	ldr	r3, [pc, #292]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 80044e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044e6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 80044e8:	4b47      	ldr	r3, [pc, #284]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 80044ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044ee:	611a      	str	r2, [r3, #16]
 80044f0:	4b45      	ldr	r3, [pc, #276]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 80044f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044f6:	615a      	str	r2, [r3, #20]
 80044f8:	88fb      	ldrh	r3, [r7, #6]
 80044fa:	0a1b      	lsrs	r3, r3, #8
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	4b43      	ldr	r3, [pc, #268]	; (800460c <LCD_Fast_DrawPoint+0x3a0>)
 8004500:	60da      	str	r2, [r3, #12]
 8004502:	4b41      	ldr	r3, [pc, #260]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 8004504:	2280      	movs	r2, #128	; 0x80
 8004506:	615a      	str	r2, [r3, #20]
 8004508:	4b3f      	ldr	r3, [pc, #252]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 800450a:	2280      	movs	r2, #128	; 0x80
 800450c:	611a      	str	r2, [r3, #16]
 800450e:	4b3e      	ldr	r3, [pc, #248]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 8004510:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004514:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8004516:	4b3c      	ldr	r3, [pc, #240]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 8004518:	f44f 7280 	mov.w	r2, #256	; 0x100
 800451c:	611a      	str	r2, [r3, #16]
 800451e:	4b3a      	ldr	r3, [pc, #232]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 8004520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004524:	615a      	str	r2, [r3, #20]
 8004526:	88fb      	ldrh	r3, [r7, #6]
 8004528:	4a38      	ldr	r2, [pc, #224]	; (800460c <LCD_Fast_DrawPoint+0x3a0>)
 800452a:	b2db      	uxtb	r3, r3
 800452c:	60d3      	str	r3, [r2, #12]
 800452e:	4b36      	ldr	r3, [pc, #216]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 8004530:	2280      	movs	r2, #128	; 0x80
 8004532:	615a      	str	r2, [r3, #20]
 8004534:	4b34      	ldr	r3, [pc, #208]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 8004536:	2280      	movs	r2, #128	; 0x80
 8004538:	611a      	str	r2, [r3, #16]
 800453a:	4b33      	ldr	r3, [pc, #204]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 800453c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004540:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8004542:	4b30      	ldr	r3, [pc, #192]	; (8004604 <LCD_Fast_DrawPoint+0x398>)
 8004544:	899b      	ldrh	r3, [r3, #12]
 8004546:	4618      	mov	r0, r3
 8004548:	f7fe ffb0 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 800454c:	4b2e      	ldr	r3, [pc, #184]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 800454e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004552:	611a      	str	r2, [r3, #16]
 8004554:	4b2c      	ldr	r3, [pc, #176]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 8004556:	f44f 7200 	mov.w	r2, #512	; 0x200
 800455a:	615a      	str	r2, [r3, #20]
 800455c:	88bb      	ldrh	r3, [r7, #4]
 800455e:	0a1b      	lsrs	r3, r3, #8
 8004560:	b29a      	uxth	r2, r3
 8004562:	4b2a      	ldr	r3, [pc, #168]	; (800460c <LCD_Fast_DrawPoint+0x3a0>)
 8004564:	60da      	str	r2, [r3, #12]
 8004566:	4b28      	ldr	r3, [pc, #160]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 8004568:	2280      	movs	r2, #128	; 0x80
 800456a:	615a      	str	r2, [r3, #20]
 800456c:	4b26      	ldr	r3, [pc, #152]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 800456e:	2280      	movs	r2, #128	; 0x80
 8004570:	611a      	str	r2, [r3, #16]
 8004572:	4b25      	ldr	r3, [pc, #148]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 8004574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004578:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 800457a:	4b23      	ldr	r3, [pc, #140]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 800457c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004580:	611a      	str	r2, [r3, #16]
 8004582:	4b21      	ldr	r3, [pc, #132]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 8004584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004588:	615a      	str	r2, [r3, #20]
 800458a:	88bb      	ldrh	r3, [r7, #4]
 800458c:	4a1f      	ldr	r2, [pc, #124]	; (800460c <LCD_Fast_DrawPoint+0x3a0>)
 800458e:	b2db      	uxtb	r3, r3
 8004590:	60d3      	str	r3, [r2, #12]
 8004592:	4b1d      	ldr	r3, [pc, #116]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 8004594:	2280      	movs	r2, #128	; 0x80
 8004596:	615a      	str	r2, [r3, #20]
 8004598:	4b1b      	ldr	r3, [pc, #108]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 800459a:	2280      	movs	r2, #128	; 0x80
 800459c:	611a      	str	r2, [r3, #16]
 800459e:	4b1a      	ldr	r3, [pc, #104]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 80045a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045a4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 80045a6:	4b18      	ldr	r3, [pc, #96]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 80045a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045ac:	611a      	str	r2, [r3, #16]
 80045ae:	4b16      	ldr	r3, [pc, #88]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 80045b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045b4:	615a      	str	r2, [r3, #20]
 80045b6:	88bb      	ldrh	r3, [r7, #4]
 80045b8:	0a1b      	lsrs	r3, r3, #8
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	4b13      	ldr	r3, [pc, #76]	; (800460c <LCD_Fast_DrawPoint+0x3a0>)
 80045be:	60da      	str	r2, [r3, #12]
 80045c0:	4b11      	ldr	r3, [pc, #68]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 80045c2:	2280      	movs	r2, #128	; 0x80
 80045c4:	615a      	str	r2, [r3, #20]
 80045c6:	4b10      	ldr	r3, [pc, #64]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 80045c8:	2280      	movs	r2, #128	; 0x80
 80045ca:	611a      	str	r2, [r3, #16]
 80045cc:	4b0e      	ldr	r3, [pc, #56]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 80045ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045d2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80045d4:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 80045d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045da:	611a      	str	r2, [r3, #16]
 80045dc:	4b0a      	ldr	r3, [pc, #40]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 80045de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045e2:	615a      	str	r2, [r3, #20]
 80045e4:	88bb      	ldrh	r3, [r7, #4]
 80045e6:	4a09      	ldr	r2, [pc, #36]	; (800460c <LCD_Fast_DrawPoint+0x3a0>)
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	60d3      	str	r3, [r2, #12]
 80045ec:	4b06      	ldr	r3, [pc, #24]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 80045ee:	2280      	movs	r2, #128	; 0x80
 80045f0:	615a      	str	r2, [r3, #20]
 80045f2:	4b05      	ldr	r3, [pc, #20]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 80045f4:	2280      	movs	r2, #128	; 0x80
 80045f6:	611a      	str	r2, [r3, #16]
 80045f8:	4b03      	ldr	r3, [pc, #12]	; (8004608 <LCD_Fast_DrawPoint+0x39c>)
 80045fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045fe:	611a      	str	r2, [r3, #16]
 8004600:	e095      	b.n	800472e <LCD_Fast_DrawPoint+0x4c2>
 8004602:	bf00      	nop
 8004604:	20000e18 	.word	0x20000e18
 8004608:	40011000 	.word	0x40011000
 800460c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 8004610:	4b5e      	ldr	r3, [pc, #376]	; (800478c <LCD_Fast_DrawPoint+0x520>)
 8004612:	889b      	ldrh	r3, [r3, #4]
 8004614:	f646 0204 	movw	r2, #26628	; 0x6804
 8004618:	4293      	cmp	r3, r2
 800461a:	d16f      	bne.n	80046fc <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 800461c:	4b5b      	ldr	r3, [pc, #364]	; (800478c <LCD_Fast_DrawPoint+0x520>)
 800461e:	799b      	ldrb	r3, [r3, #6]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d106      	bne.n	8004632 <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 8004624:	4b59      	ldr	r3, [pc, #356]	; (800478c <LCD_Fast_DrawPoint+0x520>)
 8004626:	881a      	ldrh	r2, [r3, #0]
 8004628:	88fb      	ldrh	r3, [r7, #6]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	b29b      	uxth	r3, r3
 800462e:	3b01      	subs	r3, #1
 8004630:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8004632:	4b56      	ldr	r3, [pc, #344]	; (800478c <LCD_Fast_DrawPoint+0x520>)
 8004634:	895b      	ldrh	r3, [r3, #10]
 8004636:	4618      	mov	r0, r3
 8004638:	f7fe ff38 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 800463c:	4b54      	ldr	r3, [pc, #336]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 800463e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004642:	611a      	str	r2, [r3, #16]
 8004644:	4b52      	ldr	r3, [pc, #328]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 8004646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800464a:	615a      	str	r2, [r3, #20]
 800464c:	88fb      	ldrh	r3, [r7, #6]
 800464e:	0a1b      	lsrs	r3, r3, #8
 8004650:	b29a      	uxth	r2, r3
 8004652:	4b50      	ldr	r3, [pc, #320]	; (8004794 <LCD_Fast_DrawPoint+0x528>)
 8004654:	60da      	str	r2, [r3, #12]
 8004656:	4b4e      	ldr	r3, [pc, #312]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 8004658:	2280      	movs	r2, #128	; 0x80
 800465a:	615a      	str	r2, [r3, #20]
 800465c:	4b4c      	ldr	r3, [pc, #304]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 800465e:	2280      	movs	r2, #128	; 0x80
 8004660:	611a      	str	r2, [r3, #16]
 8004662:	4b4b      	ldr	r3, [pc, #300]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 8004664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004668:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 800466a:	4b49      	ldr	r3, [pc, #292]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 800466c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004670:	611a      	str	r2, [r3, #16]
 8004672:	4b47      	ldr	r3, [pc, #284]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 8004674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004678:	615a      	str	r2, [r3, #20]
 800467a:	88fb      	ldrh	r3, [r7, #6]
 800467c:	4a45      	ldr	r2, [pc, #276]	; (8004794 <LCD_Fast_DrawPoint+0x528>)
 800467e:	b2db      	uxtb	r3, r3
 8004680:	60d3      	str	r3, [r2, #12]
 8004682:	4b43      	ldr	r3, [pc, #268]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 8004684:	2280      	movs	r2, #128	; 0x80
 8004686:	615a      	str	r2, [r3, #20]
 8004688:	4b41      	ldr	r3, [pc, #260]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 800468a:	2280      	movs	r2, #128	; 0x80
 800468c:	611a      	str	r2, [r3, #16]
 800468e:	4b40      	ldr	r3, [pc, #256]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 8004690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004694:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8004696:	4b3d      	ldr	r3, [pc, #244]	; (800478c <LCD_Fast_DrawPoint+0x520>)
 8004698:	899b      	ldrh	r3, [r3, #12]
 800469a:	4618      	mov	r0, r3
 800469c:	f7fe ff06 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80046a0:	4b3b      	ldr	r3, [pc, #236]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 80046a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046a6:	611a      	str	r2, [r3, #16]
 80046a8:	4b39      	ldr	r3, [pc, #228]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 80046aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ae:	615a      	str	r2, [r3, #20]
 80046b0:	88bb      	ldrh	r3, [r7, #4]
 80046b2:	0a1b      	lsrs	r3, r3, #8
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	4b37      	ldr	r3, [pc, #220]	; (8004794 <LCD_Fast_DrawPoint+0x528>)
 80046b8:	60da      	str	r2, [r3, #12]
 80046ba:	4b35      	ldr	r3, [pc, #212]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 80046bc:	2280      	movs	r2, #128	; 0x80
 80046be:	615a      	str	r2, [r3, #20]
 80046c0:	4b33      	ldr	r3, [pc, #204]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 80046c2:	2280      	movs	r2, #128	; 0x80
 80046c4:	611a      	str	r2, [r3, #16]
 80046c6:	4b32      	ldr	r3, [pc, #200]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 80046c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046cc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80046ce:	4b30      	ldr	r3, [pc, #192]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 80046d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046d4:	611a      	str	r2, [r3, #16]
 80046d6:	4b2e      	ldr	r3, [pc, #184]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 80046d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046dc:	615a      	str	r2, [r3, #20]
 80046de:	88bb      	ldrh	r3, [r7, #4]
 80046e0:	4a2c      	ldr	r2, [pc, #176]	; (8004794 <LCD_Fast_DrawPoint+0x528>)
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	60d3      	str	r3, [r2, #12]
 80046e6:	4b2a      	ldr	r3, [pc, #168]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 80046e8:	2280      	movs	r2, #128	; 0x80
 80046ea:	615a      	str	r2, [r3, #20]
 80046ec:	4b28      	ldr	r3, [pc, #160]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 80046ee:	2280      	movs	r2, #128	; 0x80
 80046f0:	611a      	str	r2, [r3, #16]
 80046f2:	4b27      	ldr	r3, [pc, #156]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 80046f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046f8:	611a      	str	r2, [r3, #16]
 80046fa:	e018      	b.n	800472e <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 80046fc:	4b23      	ldr	r3, [pc, #140]	; (800478c <LCD_Fast_DrawPoint+0x520>)
 80046fe:	799b      	ldrb	r3, [r3, #6]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d106      	bne.n	8004712 <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8004704:	4b21      	ldr	r3, [pc, #132]	; (800478c <LCD_Fast_DrawPoint+0x520>)
 8004706:	881a      	ldrh	r2, [r3, #0]
 8004708:	88fb      	ldrh	r3, [r7, #6]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8004712:	4b1e      	ldr	r3, [pc, #120]	; (800478c <LCD_Fast_DrawPoint+0x520>)
 8004714:	895b      	ldrh	r3, [r3, #10]
 8004716:	88fa      	ldrh	r2, [r7, #6]
 8004718:	4611      	mov	r1, r2
 800471a:	4618      	mov	r0, r3
 800471c:	f7fe ff52 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8004720:	4b1a      	ldr	r3, [pc, #104]	; (800478c <LCD_Fast_DrawPoint+0x520>)
 8004722:	899b      	ldrh	r3, [r3, #12]
 8004724:	88ba      	ldrh	r2, [r7, #4]
 8004726:	4611      	mov	r1, r2
 8004728:	4618      	mov	r0, r3
 800472a:	f7fe ff4b 	bl	80035c4 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 800472e:	4b18      	ldr	r3, [pc, #96]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 8004730:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004734:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8004736:	4b16      	ldr	r3, [pc, #88]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 8004738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800473c:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 800473e:	4b13      	ldr	r3, [pc, #76]	; (800478c <LCD_Fast_DrawPoint+0x520>)
 8004740:	891a      	ldrh	r2, [r3, #8]
 8004742:	4b14      	ldr	r3, [pc, #80]	; (8004794 <LCD_Fast_DrawPoint+0x528>)
 8004744:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8004746:	4b12      	ldr	r3, [pc, #72]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 8004748:	2280      	movs	r2, #128	; 0x80
 800474a:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 800474c:	4b10      	ldr	r3, [pc, #64]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 800474e:	2280      	movs	r2, #128	; 0x80
 8004750:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8004752:	4b0f      	ldr	r3, [pc, #60]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 8004754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004758:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 800475a:	4b0d      	ldr	r3, [pc, #52]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 800475c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004760:	611a      	str	r2, [r3, #16]
 8004762:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 8004764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004768:	615a      	str	r2, [r3, #20]
 800476a:	4a0a      	ldr	r2, [pc, #40]	; (8004794 <LCD_Fast_DrawPoint+0x528>)
 800476c:	887b      	ldrh	r3, [r7, #2]
 800476e:	60d3      	str	r3, [r2, #12]
 8004770:	4b07      	ldr	r3, [pc, #28]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 8004772:	2280      	movs	r2, #128	; 0x80
 8004774:	615a      	str	r2, [r3, #20]
 8004776:	4b06      	ldr	r3, [pc, #24]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 8004778:	2280      	movs	r2, #128	; 0x80
 800477a:	611a      	str	r2, [r3, #16]
 800477c:	4b04      	ldr	r3, [pc, #16]	; (8004790 <LCD_Fast_DrawPoint+0x524>)
 800477e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004782:	611a      	str	r2, [r3, #16]
}
 8004784:	bf00      	nop
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	20000e18 	.word	0x20000e18
 8004790:	40011000 	.word	0x40011000
 8004794:	40010c00 	.word	0x40010c00

08004798 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8004798:	b590      	push	{r4, r7, lr}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	4603      	mov	r3, r0
 80047a0:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 80047a2:	20be      	movs	r0, #190	; 0xbe
 80047a4:	f7fe fe82 	bl	80034ac <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 80047a8:	4b4b      	ldr	r3, [pc, #300]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 80047aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047ae:	611a      	str	r2, [r3, #16]
 80047b0:	4b49      	ldr	r3, [pc, #292]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 80047b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047b6:	615a      	str	r2, [r3, #20]
 80047b8:	4b48      	ldr	r3, [pc, #288]	; (80048dc <LCD_SSD_BackLightSet+0x144>)
 80047ba:	2205      	movs	r2, #5
 80047bc:	60da      	str	r2, [r3, #12]
 80047be:	4b46      	ldr	r3, [pc, #280]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 80047c0:	2280      	movs	r2, #128	; 0x80
 80047c2:	615a      	str	r2, [r3, #20]
 80047c4:	4b44      	ldr	r3, [pc, #272]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 80047c6:	2280      	movs	r2, #128	; 0x80
 80047c8:	611a      	str	r2, [r3, #16]
 80047ca:	4b43      	ldr	r3, [pc, #268]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 80047cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047d0:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 80047d2:	4b41      	ldr	r3, [pc, #260]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 80047d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047d8:	611a      	str	r2, [r3, #16]
 80047da:	4b3f      	ldr	r3, [pc, #252]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 80047dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047e0:	615a      	str	r2, [r3, #20]
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fb fe7d 	bl	80004e4 <__aeabi_i2d>
 80047ea:	a339      	add	r3, pc, #228	; (adr r3, 80048d0 <LCD_SSD_BackLightSet+0x138>)
 80047ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f0:	f7fb fee2 	bl	80005b8 <__aeabi_dmul>
 80047f4:	4603      	mov	r3, r0
 80047f6:	460c      	mov	r4, r1
 80047f8:	461a      	mov	r2, r3
 80047fa:	4623      	mov	r3, r4
 80047fc:	4c37      	ldr	r4, [pc, #220]	; (80048dc <LCD_SSD_BackLightSet+0x144>)
 80047fe:	4610      	mov	r0, r2
 8004800:	4619      	mov	r1, r3
 8004802:	f7fc f8eb 	bl	80009dc <__aeabi_d2uiz>
 8004806:	4603      	mov	r3, r0
 8004808:	60e3      	str	r3, [r4, #12]
 800480a:	4b33      	ldr	r3, [pc, #204]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 800480c:	2280      	movs	r2, #128	; 0x80
 800480e:	615a      	str	r2, [r3, #20]
 8004810:	4b31      	ldr	r3, [pc, #196]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 8004812:	2280      	movs	r2, #128	; 0x80
 8004814:	611a      	str	r2, [r3, #16]
 8004816:	4b30      	ldr	r3, [pc, #192]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 8004818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800481c:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 800481e:	4b2e      	ldr	r3, [pc, #184]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 8004820:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004824:	611a      	str	r2, [r3, #16]
 8004826:	4b2c      	ldr	r3, [pc, #176]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 8004828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800482c:	615a      	str	r2, [r3, #20]
 800482e:	4b2b      	ldr	r3, [pc, #172]	; (80048dc <LCD_SSD_BackLightSet+0x144>)
 8004830:	2201      	movs	r2, #1
 8004832:	60da      	str	r2, [r3, #12]
 8004834:	4b28      	ldr	r3, [pc, #160]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 8004836:	2280      	movs	r2, #128	; 0x80
 8004838:	615a      	str	r2, [r3, #20]
 800483a:	4b27      	ldr	r3, [pc, #156]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 800483c:	2280      	movs	r2, #128	; 0x80
 800483e:	611a      	str	r2, [r3, #16]
 8004840:	4b25      	ldr	r3, [pc, #148]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 8004842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004846:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8004848:	4b23      	ldr	r3, [pc, #140]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 800484a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800484e:	611a      	str	r2, [r3, #16]
 8004850:	4b21      	ldr	r3, [pc, #132]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 8004852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004856:	615a      	str	r2, [r3, #20]
 8004858:	4b20      	ldr	r3, [pc, #128]	; (80048dc <LCD_SSD_BackLightSet+0x144>)
 800485a:	22ff      	movs	r2, #255	; 0xff
 800485c:	60da      	str	r2, [r3, #12]
 800485e:	4b1e      	ldr	r3, [pc, #120]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 8004860:	2280      	movs	r2, #128	; 0x80
 8004862:	615a      	str	r2, [r3, #20]
 8004864:	4b1c      	ldr	r3, [pc, #112]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 8004866:	2280      	movs	r2, #128	; 0x80
 8004868:	611a      	str	r2, [r3, #16]
 800486a:	4b1b      	ldr	r3, [pc, #108]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 800486c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004870:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8004872:	4b19      	ldr	r3, [pc, #100]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 8004874:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004878:	611a      	str	r2, [r3, #16]
 800487a:	4b17      	ldr	r3, [pc, #92]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 800487c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004880:	615a      	str	r2, [r3, #20]
 8004882:	4b16      	ldr	r3, [pc, #88]	; (80048dc <LCD_SSD_BackLightSet+0x144>)
 8004884:	2200      	movs	r2, #0
 8004886:	60da      	str	r2, [r3, #12]
 8004888:	4b13      	ldr	r3, [pc, #76]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 800488a:	2280      	movs	r2, #128	; 0x80
 800488c:	615a      	str	r2, [r3, #20]
 800488e:	4b12      	ldr	r3, [pc, #72]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 8004890:	2280      	movs	r2, #128	; 0x80
 8004892:	611a      	str	r2, [r3, #16]
 8004894:	4b10      	ldr	r3, [pc, #64]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 8004896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800489a:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 800489c:	4b0e      	ldr	r3, [pc, #56]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 800489e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048a2:	611a      	str	r2, [r3, #16]
 80048a4:	4b0c      	ldr	r3, [pc, #48]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 80048a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048aa:	615a      	str	r2, [r3, #20]
 80048ac:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <LCD_SSD_BackLightSet+0x144>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	60da      	str	r2, [r3, #12]
 80048b2:	4b09      	ldr	r3, [pc, #36]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 80048b4:	2280      	movs	r2, #128	; 0x80
 80048b6:	615a      	str	r2, [r3, #20]
 80048b8:	4b07      	ldr	r3, [pc, #28]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 80048ba:	2280      	movs	r2, #128	; 0x80
 80048bc:	611a      	str	r2, [r3, #16]
 80048be:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <LCD_SSD_BackLightSet+0x140>)
 80048c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048c4:	611a      	str	r2, [r3, #16]
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd90      	pop	{r4, r7, pc}
 80048ce:	bf00      	nop
 80048d0:	66666666 	.word	0x66666666
 80048d4:	40046666 	.word	0x40046666
 80048d8:	40011000 	.word	0x40011000
 80048dc:	40010c00 	.word	0x40010c00

080048e0 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	4603      	mov	r3, r0
 80048e8:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 80048ea:	79fb      	ldrb	r3, [r7, #7]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d177      	bne.n	80049e0 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 80048f0:	4b80      	ldr	r3, [pc, #512]	; (8004af4 <LCD_Display_Dir+0x214>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 80048f6:	4b7f      	ldr	r3, [pc, #508]	; (8004af4 <LCD_Display_Dir+0x214>)
 80048f8:	22f0      	movs	r2, #240	; 0xf0
 80048fa:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 80048fc:	4b7d      	ldr	r3, [pc, #500]	; (8004af4 <LCD_Display_Dir+0x214>)
 80048fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004902:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8004904:	4b7b      	ldr	r3, [pc, #492]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004906:	889b      	ldrh	r3, [r3, #4]
 8004908:	f249 3241 	movw	r2, #37697	; 0x9341
 800490c:	4293      	cmp	r3, r2
 800490e:	d00b      	beq.n	8004928 <LCD_Display_Dir+0x48>
 8004910:	4b78      	ldr	r3, [pc, #480]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004912:	889b      	ldrh	r3, [r3, #4]
 8004914:	f646 0204 	movw	r2, #26628	; 0x6804
 8004918:	4293      	cmp	r3, r2
 800491a:	d005      	beq.n	8004928 <LCD_Display_Dir+0x48>
 800491c:	4b75      	ldr	r3, [pc, #468]	; (8004af4 <LCD_Display_Dir+0x214>)
 800491e:	889b      	ldrh	r3, [r3, #4]
 8004920:	f245 3210 	movw	r2, #21264	; 0x5310
 8004924:	4293      	cmp	r3, r2
 8004926:	d11e      	bne.n	8004966 <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8004928:	4b72      	ldr	r3, [pc, #456]	; (8004af4 <LCD_Display_Dir+0x214>)
 800492a:	222c      	movs	r2, #44	; 0x2c
 800492c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 800492e:	4b71      	ldr	r3, [pc, #452]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004930:	222a      	movs	r2, #42	; 0x2a
 8004932:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8004934:	4b6f      	ldr	r3, [pc, #444]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004936:	222b      	movs	r2, #43	; 0x2b
 8004938:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 800493a:	4b6e      	ldr	r3, [pc, #440]	; (8004af4 <LCD_Display_Dir+0x214>)
 800493c:	889b      	ldrh	r3, [r3, #4]
 800493e:	f646 0204 	movw	r2, #26628	; 0x6804
 8004942:	4293      	cmp	r3, r2
 8004944:	d006      	beq.n	8004954 <LCD_Display_Dir+0x74>
 8004946:	4b6b      	ldr	r3, [pc, #428]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004948:	889b      	ldrh	r3, [r3, #4]
 800494a:	f245 3210 	movw	r2, #21264	; 0x5310
 800494e:	4293      	cmp	r3, r2
 8004950:	f040 80c7 	bne.w	8004ae2 <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8004954:	4b67      	ldr	r3, [pc, #412]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004956:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800495a:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 800495c:	4b65      	ldr	r3, [pc, #404]	; (8004af4 <LCD_Display_Dir+0x214>)
 800495e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004962:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8004964:	e0bd      	b.n	8004ae2 <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8004966:	4b63      	ldr	r3, [pc, #396]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004968:	889b      	ldrh	r3, [r3, #4]
 800496a:	f245 5210 	movw	r2, #21776	; 0x5510
 800496e:	4293      	cmp	r3, r2
 8004970:	d114      	bne.n	800499c <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8004972:	4b60      	ldr	r3, [pc, #384]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004974:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8004978:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 800497a:	4b5e      	ldr	r3, [pc, #376]	; (8004af4 <LCD_Display_Dir+0x214>)
 800497c:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8004980:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8004982:	4b5c      	ldr	r3, [pc, #368]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004984:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8004988:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 800498a:	4b5a      	ldr	r3, [pc, #360]	; (8004af4 <LCD_Display_Dir+0x214>)
 800498c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004990:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8004992:	4b58      	ldr	r3, [pc, #352]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004994:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004998:	805a      	strh	r2, [r3, #2]
 800499a:	e0a3      	b.n	8004ae4 <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 800499c:	4b55      	ldr	r3, [pc, #340]	; (8004af4 <LCD_Display_Dir+0x214>)
 800499e:	889b      	ldrh	r3, [r3, #4]
 80049a0:	f641 1263 	movw	r2, #6499	; 0x1963
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d111      	bne.n	80049cc <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 80049a8:	4b52      	ldr	r3, [pc, #328]	; (8004af4 <LCD_Display_Dir+0x214>)
 80049aa:	222c      	movs	r2, #44	; 0x2c
 80049ac:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 80049ae:	4b51      	ldr	r3, [pc, #324]	; (8004af4 <LCD_Display_Dir+0x214>)
 80049b0:	222b      	movs	r2, #43	; 0x2b
 80049b2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 80049b4:	4b4f      	ldr	r3, [pc, #316]	; (8004af4 <LCD_Display_Dir+0x214>)
 80049b6:	222a      	movs	r2, #42	; 0x2a
 80049b8:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 80049ba:	4b4e      	ldr	r3, [pc, #312]	; (8004af4 <LCD_Display_Dir+0x214>)
 80049bc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80049c0:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 80049c2:	4b4c      	ldr	r3, [pc, #304]	; (8004af4 <LCD_Display_Dir+0x214>)
 80049c4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80049c8:	805a      	strh	r2, [r3, #2]
 80049ca:	e08b      	b.n	8004ae4 <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 80049cc:	4b49      	ldr	r3, [pc, #292]	; (8004af4 <LCD_Display_Dir+0x214>)
 80049ce:	2222      	movs	r2, #34	; 0x22
 80049d0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 80049d2:	4b48      	ldr	r3, [pc, #288]	; (8004af4 <LCD_Display_Dir+0x214>)
 80049d4:	2220      	movs	r2, #32
 80049d6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 80049d8:	4b46      	ldr	r3, [pc, #280]	; (8004af4 <LCD_Display_Dir+0x214>)
 80049da:	2221      	movs	r2, #33	; 0x21
 80049dc:	819a      	strh	r2, [r3, #12]
 80049de:	e081      	b.n	8004ae4 <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 80049e0:	4b44      	ldr	r3, [pc, #272]	; (8004af4 <LCD_Display_Dir+0x214>)
 80049e2:	2201      	movs	r2, #1
 80049e4:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 80049e6:	4b43      	ldr	r3, [pc, #268]	; (8004af4 <LCD_Display_Dir+0x214>)
 80049e8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80049ec:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 80049ee:	4b41      	ldr	r3, [pc, #260]	; (8004af4 <LCD_Display_Dir+0x214>)
 80049f0:	22f0      	movs	r2, #240	; 0xf0
 80049f2:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 80049f4:	4b3f      	ldr	r3, [pc, #252]	; (8004af4 <LCD_Display_Dir+0x214>)
 80049f6:	889b      	ldrh	r3, [r3, #4]
 80049f8:	f249 3241 	movw	r2, #37697	; 0x9341
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d005      	beq.n	8004a0c <LCD_Display_Dir+0x12c>
 8004a00:	4b3c      	ldr	r3, [pc, #240]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004a02:	889b      	ldrh	r3, [r3, #4]
 8004a04:	f245 3210 	movw	r2, #21264	; 0x5310
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d109      	bne.n	8004a20 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8004a0c:	4b39      	ldr	r3, [pc, #228]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004a0e:	222c      	movs	r2, #44	; 0x2c
 8004a10:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8004a12:	4b38      	ldr	r3, [pc, #224]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004a14:	222a      	movs	r2, #42	; 0x2a
 8004a16:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8004a18:	4b36      	ldr	r3, [pc, #216]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004a1a:	222b      	movs	r2, #43	; 0x2b
 8004a1c:	819a      	strh	r2, [r3, #12]
 8004a1e:	e04b      	b.n	8004ab8 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8004a20:	4b34      	ldr	r3, [pc, #208]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004a22:	889b      	ldrh	r3, [r3, #4]
 8004a24:	f646 0204 	movw	r2, #26628	; 0x6804
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d109      	bne.n	8004a40 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8004a2c:	4b31      	ldr	r3, [pc, #196]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004a2e:	222c      	movs	r2, #44	; 0x2c
 8004a30:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 8004a32:	4b30      	ldr	r3, [pc, #192]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004a34:	222b      	movs	r2, #43	; 0x2b
 8004a36:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8004a38:	4b2e      	ldr	r3, [pc, #184]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004a3a:	222a      	movs	r2, #42	; 0x2a
 8004a3c:	819a      	strh	r2, [r3, #12]
 8004a3e:	e03b      	b.n	8004ab8 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8004a40:	4b2c      	ldr	r3, [pc, #176]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004a42:	889b      	ldrh	r3, [r3, #4]
 8004a44:	f245 5210 	movw	r2, #21776	; 0x5510
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d114      	bne.n	8004a76 <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8004a4c:	4b29      	ldr	r3, [pc, #164]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004a4e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8004a52:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8004a54:	4b27      	ldr	r3, [pc, #156]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004a56:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8004a5a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8004a5c:	4b25      	ldr	r3, [pc, #148]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004a5e:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8004a62:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 8004a64:	4b23      	ldr	r3, [pc, #140]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004a66:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004a6a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8004a6c:	4b21      	ldr	r3, [pc, #132]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004a6e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004a72:	805a      	strh	r2, [r3, #2]
 8004a74:	e020      	b.n	8004ab8 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 8004a76:	4b1f      	ldr	r3, [pc, #124]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004a78:	889b      	ldrh	r3, [r3, #4]
 8004a7a:	f641 1263 	movw	r2, #6499	; 0x1963
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d111      	bne.n	8004aa6 <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8004a82:	4b1c      	ldr	r3, [pc, #112]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004a84:	222c      	movs	r2, #44	; 0x2c
 8004a86:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8004a88:	4b1a      	ldr	r3, [pc, #104]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004a8a:	222a      	movs	r2, #42	; 0x2a
 8004a8c:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8004a8e:	4b19      	ldr	r3, [pc, #100]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004a90:	222b      	movs	r2, #43	; 0x2b
 8004a92:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8004a94:	4b17      	ldr	r3, [pc, #92]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004a96:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004a9a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8004a9c:	4b15      	ldr	r3, [pc, #84]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004a9e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004aa2:	805a      	strh	r2, [r3, #2]
 8004aa4:	e008      	b.n	8004ab8 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8004aa6:	4b13      	ldr	r3, [pc, #76]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004aa8:	2222      	movs	r2, #34	; 0x22
 8004aaa:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8004aac:	4b11      	ldr	r3, [pc, #68]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004aae:	2221      	movs	r2, #33	; 0x21
 8004ab0:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8004ab2:	4b10      	ldr	r3, [pc, #64]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8004ab8:	4b0e      	ldr	r3, [pc, #56]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004aba:	889b      	ldrh	r3, [r3, #4]
 8004abc:	f646 0204 	movw	r2, #26628	; 0x6804
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d005      	beq.n	8004ad0 <LCD_Display_Dir+0x1f0>
 8004ac4:	4b0b      	ldr	r3, [pc, #44]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004ac6:	889b      	ldrh	r3, [r3, #4]
 8004ac8:	f245 3210 	movw	r2, #21264	; 0x5310
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d109      	bne.n	8004ae4 <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8004ad0:	4b08      	ldr	r3, [pc, #32]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004ad2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004ad6:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8004ad8:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <LCD_Display_Dir+0x214>)
 8004ada:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004ade:	805a      	strh	r2, [r3, #2]
 8004ae0:	e000      	b.n	8004ae4 <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8004ae2:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8004ae4:	2000      	movs	r0, #0
 8004ae6:	f7ff f87f 	bl	8003be8 <LCD_Scan_Dir>
}
 8004aea:	bf00      	nop
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20000e18 	.word	0x20000e18

08004af8 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8004afe:	4b90      	ldr	r3, [pc, #576]	; (8004d40 <LCD_Init+0x248>)
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	4a8f      	ldr	r2, [pc, #572]	; (8004d40 <LCD_Init+0x248>)
 8004b04:	f043 0308 	orr.w	r3, r3, #8
 8004b08:	6193      	str	r3, [r2, #24]
 8004b0a:	4b8d      	ldr	r3, [pc, #564]	; (8004d40 <LCD_Init+0x248>)
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	607b      	str	r3, [r7, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8004b16:	4b8a      	ldr	r3, [pc, #552]	; (8004d40 <LCD_Init+0x248>)
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	4a89      	ldr	r2, [pc, #548]	; (8004d40 <LCD_Init+0x248>)
 8004b1c:	f043 0310 	orr.w	r3, r3, #16
 8004b20:	6193      	str	r3, [r2, #24]
 8004b22:	4b87      	ldr	r3, [pc, #540]	; (8004d40 <LCD_Init+0x248>)
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	f003 0310 	and.w	r3, r3, #16
 8004b2a:	603b      	str	r3, [r7, #0]
 8004b2c:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8004b2e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8004b32:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 8004b34:	2301      	movs	r3, #1
 8004b36:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8004b38:	2301      	movs	r3, #1
 8004b3a:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8004b40:	f107 0308 	add.w	r3, r7, #8
 8004b44:	4619      	mov	r1, r3
 8004b46:	487f      	ldr	r0, [pc, #508]	; (8004d44 <LCD_Init+0x24c>)
 8004b48:	f7fc f89c 	bl	8000c84 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8004b4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b50:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 8004b52:	f107 0308 	add.w	r3, r7, #8
 8004b56:	4619      	mov	r1, r3
 8004b58:	487b      	ldr	r0, [pc, #492]	; (8004d48 <LCD_Init+0x250>)
 8004b5a:	f7fc f893 	bl	8000c84 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 8004b5e:	2032      	movs	r0, #50	; 0x32
 8004b60:	f7fb ff8e 	bl	8000a80 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 8004b64:	2101      	movs	r1, #1
 8004b66:	2000      	movs	r0, #0
 8004b68:	f7fe fd2c 	bl	80035c4 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8004b6c:	2032      	movs	r0, #50	; 0x32
 8004b6e:	f7fb ff87 	bl	8000a80 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 8004b72:	2000      	movs	r0, #0
 8004b74:	f7fe fd50 	bl	8003618 <LCD_ReadReg>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	4b73      	ldr	r3, [pc, #460]	; (8004d4c <LCD_Init+0x254>)
 8004b7e:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8004b80:	4b72      	ldr	r3, [pc, #456]	; (8004d4c <LCD_Init+0x254>)
 8004b82:	889b      	ldrh	r3, [r3, #4]
 8004b84:	2bfe      	cmp	r3, #254	; 0xfe
 8004b86:	d90b      	bls.n	8004ba0 <LCD_Init+0xa8>
 8004b88:	4b70      	ldr	r3, [pc, #448]	; (8004d4c <LCD_Init+0x254>)
 8004b8a:	889b      	ldrh	r3, [r3, #4]
 8004b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d005      	beq.n	8004ba0 <LCD_Init+0xa8>
 8004b94:	4b6d      	ldr	r3, [pc, #436]	; (8004d4c <LCD_Init+0x254>)
 8004b96:	889b      	ldrh	r3, [r3, #4]
 8004b98:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8004b9c:	f040 80c8 	bne.w	8004d30 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8004ba0:	20d3      	movs	r0, #211	; 0xd3
 8004ba2:	f7fe fc83 	bl	80034ac <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 8004ba6:	f7fe fcc9 	bl	800353c <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 8004baa:	f7fe fcc7 	bl	800353c <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 8004bae:	f7fe fcc5 	bl	800353c <LCD_RD_DATA>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	4b65      	ldr	r3, [pc, #404]	; (8004d4c <LCD_Init+0x254>)
 8004bb8:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8004bba:	4b64      	ldr	r3, [pc, #400]	; (8004d4c <LCD_Init+0x254>)
 8004bbc:	889b      	ldrh	r3, [r3, #4]
 8004bbe:	021b      	lsls	r3, r3, #8
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	4b62      	ldr	r3, [pc, #392]	; (8004d4c <LCD_Init+0x254>)
 8004bc4:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 8004bc6:	f7fe fcb9 	bl	800353c <LCD_RD_DATA>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	461a      	mov	r2, r3
 8004bce:	4b5f      	ldr	r3, [pc, #380]	; (8004d4c <LCD_Init+0x254>)
 8004bd0:	889b      	ldrh	r3, [r3, #4]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	4b5d      	ldr	r3, [pc, #372]	; (8004d4c <LCD_Init+0x254>)
 8004bd8:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8004bda:	4b5c      	ldr	r3, [pc, #368]	; (8004d4c <LCD_Init+0x254>)
 8004bdc:	889b      	ldrh	r3, [r3, #4]
 8004bde:	f249 3241 	movw	r2, #37697	; 0x9341
 8004be2:	4293      	cmp	r3, r2
 8004be4:	f000 80a4 	beq.w	8004d30 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8004be8:	20bf      	movs	r0, #191	; 0xbf
 8004bea:	f7fe fc5f 	bl	80034ac <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 8004bee:	f7fe fca5 	bl	800353c <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 8004bf2:	f7fe fca3 	bl	800353c <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 8004bf6:	f7fe fca1 	bl	800353c <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 8004bfa:	f7fe fc9f 	bl	800353c <LCD_RD_DATA>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	461a      	mov	r2, r3
 8004c02:	4b52      	ldr	r3, [pc, #328]	; (8004d4c <LCD_Init+0x254>)
 8004c04:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 8004c06:	4b51      	ldr	r3, [pc, #324]	; (8004d4c <LCD_Init+0x254>)
 8004c08:	889b      	ldrh	r3, [r3, #4]
 8004c0a:	021b      	lsls	r3, r3, #8
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	4b4f      	ldr	r3, [pc, #316]	; (8004d4c <LCD_Init+0x254>)
 8004c10:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 8004c12:	f7fe fc93 	bl	800353c <LCD_RD_DATA>
 8004c16:	4603      	mov	r3, r0
 8004c18:	461a      	mov	r2, r3
 8004c1a:	4b4c      	ldr	r3, [pc, #304]	; (8004d4c <LCD_Init+0x254>)
 8004c1c:	889b      	ldrh	r3, [r3, #4]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	4b4a      	ldr	r3, [pc, #296]	; (8004d4c <LCD_Init+0x254>)
 8004c24:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 8004c26:	4b49      	ldr	r3, [pc, #292]	; (8004d4c <LCD_Init+0x254>)
 8004c28:	889b      	ldrh	r3, [r3, #4]
 8004c2a:	f646 0204 	movw	r2, #26628	; 0x6804
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d07e      	beq.n	8004d30 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 8004c32:	20d4      	movs	r0, #212	; 0xd4
 8004c34:	f7fe fc3a 	bl	80034ac <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 8004c38:	f7fe fc80 	bl	800353c <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 8004c3c:	f7fe fc7e 	bl	800353c <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 8004c40:	f7fe fc7c 	bl	800353c <LCD_RD_DATA>
 8004c44:	4603      	mov	r3, r0
 8004c46:	461a      	mov	r2, r3
 8004c48:	4b40      	ldr	r3, [pc, #256]	; (8004d4c <LCD_Init+0x254>)
 8004c4a:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 8004c4c:	4b3f      	ldr	r3, [pc, #252]	; (8004d4c <LCD_Init+0x254>)
 8004c4e:	889b      	ldrh	r3, [r3, #4]
 8004c50:	021b      	lsls	r3, r3, #8
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	4b3d      	ldr	r3, [pc, #244]	; (8004d4c <LCD_Init+0x254>)
 8004c56:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 8004c58:	f7fe fc70 	bl	800353c <LCD_RD_DATA>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	461a      	mov	r2, r3
 8004c60:	4b3a      	ldr	r3, [pc, #232]	; (8004d4c <LCD_Init+0x254>)
 8004c62:	889b      	ldrh	r3, [r3, #4]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	4b38      	ldr	r3, [pc, #224]	; (8004d4c <LCD_Init+0x254>)
 8004c6a:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8004c6c:	4b37      	ldr	r3, [pc, #220]	; (8004d4c <LCD_Init+0x254>)
 8004c6e:	889b      	ldrh	r3, [r3, #4]
 8004c70:	f245 3210 	movw	r2, #21264	; 0x5310
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d05b      	beq.n	8004d30 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 8004c78:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8004c7c:	f7fe fc16 	bl	80034ac <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8004c80:	f7fe fc5c 	bl	800353c <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 8004c84:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8004c88:	f7fe fc10 	bl	80034ac <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 8004c8c:	f7fe fc56 	bl	800353c <LCD_RD_DATA>
 8004c90:	4603      	mov	r3, r0
 8004c92:	461a      	mov	r2, r3
 8004c94:	4b2d      	ldr	r3, [pc, #180]	; (8004d4c <LCD_Init+0x254>)
 8004c96:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8004c98:	4b2c      	ldr	r3, [pc, #176]	; (8004d4c <LCD_Init+0x254>)
 8004c9a:	889b      	ldrh	r3, [r3, #4]
 8004c9c:	021b      	lsls	r3, r3, #8
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	4b2a      	ldr	r3, [pc, #168]	; (8004d4c <LCD_Init+0x254>)
 8004ca2:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8004ca4:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8004ca8:	f7fe fc00 	bl	80034ac <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 8004cac:	f7fe fc46 	bl	800353c <LCD_RD_DATA>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	4b25      	ldr	r3, [pc, #148]	; (8004d4c <LCD_Init+0x254>)
 8004cb6:	889b      	ldrh	r3, [r3, #4]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	4b23      	ldr	r3, [pc, #140]	; (8004d4c <LCD_Init+0x254>)
 8004cbe:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8004cc0:	4b22      	ldr	r3, [pc, #136]	; (8004d4c <LCD_Init+0x254>)
 8004cc2:	889b      	ldrh	r3, [r3, #4]
 8004cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc8:	d103      	bne.n	8004cd2 <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8004cca:	4b20      	ldr	r3, [pc, #128]	; (8004d4c <LCD_Init+0x254>)
 8004ccc:	f245 5210 	movw	r2, #21776	; 0x5510
 8004cd0:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8004cd2:	4b1e      	ldr	r3, [pc, #120]	; (8004d4c <LCD_Init+0x254>)
 8004cd4:	889b      	ldrh	r3, [r3, #4]
 8004cd6:	f245 5210 	movw	r2, #21776	; 0x5510
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d028      	beq.n	8004d30 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 8004cde:	20a1      	movs	r0, #161	; 0xa1
 8004ce0:	f7fe fbe4 	bl	80034ac <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 8004ce4:	f7fe fc2a 	bl	800353c <LCD_RD_DATA>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	461a      	mov	r2, r3
 8004cec:	4b17      	ldr	r3, [pc, #92]	; (8004d4c <LCD_Init+0x254>)
 8004cee:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8004cf0:	f7fe fc24 	bl	800353c <LCD_RD_DATA>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	4b14      	ldr	r3, [pc, #80]	; (8004d4c <LCD_Init+0x254>)
 8004cfa:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 8004cfc:	4b13      	ldr	r3, [pc, #76]	; (8004d4c <LCD_Init+0x254>)
 8004cfe:	889b      	ldrh	r3, [r3, #4]
 8004d00:	021b      	lsls	r3, r3, #8
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	4b11      	ldr	r3, [pc, #68]	; (8004d4c <LCD_Init+0x254>)
 8004d06:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8004d08:	f7fe fc18 	bl	800353c <LCD_RD_DATA>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	461a      	mov	r2, r3
 8004d10:	4b0e      	ldr	r3, [pc, #56]	; (8004d4c <LCD_Init+0x254>)
 8004d12:	889b      	ldrh	r3, [r3, #4]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	4b0c      	ldr	r3, [pc, #48]	; (8004d4c <LCD_Init+0x254>)
 8004d1a:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	; (8004d4c <LCD_Init+0x254>)
 8004d1e:	889b      	ldrh	r3, [r3, #4]
 8004d20:	f245 7261 	movw	r2, #22369	; 0x5761
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d103      	bne.n	8004d30 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8004d28:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <LCD_Init+0x254>)
 8004d2a:	f641 1263 	movw	r2, #6499	; 0x1963
 8004d2e:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 8004d30:	4b06      	ldr	r3, [pc, #24]	; (8004d4c <LCD_Init+0x254>)
 8004d32:	889b      	ldrh	r3, [r3, #4]
 8004d34:	f249 3241 	movw	r2, #37697	; 0x9341
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	f040 811f 	bne.w	8004f7c <LCD_Init+0x484>
 8004d3e:	e007      	b.n	8004d50 <LCD_Init+0x258>
 8004d40:	40021000 	.word	0x40021000
 8004d44:	40011000 	.word	0x40011000
 8004d48:	40010c00 	.word	0x40010c00
 8004d4c:	20000e18 	.word	0x20000e18
			{
		LCD_WR_REG(0xCF);
 8004d50:	20cf      	movs	r0, #207	; 0xcf
 8004d52:	f7fe fbab 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004d56:	2000      	movs	r0, #0
 8004d58:	f7fe fbcc 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 8004d5c:	20c1      	movs	r0, #193	; 0xc1
 8004d5e:	f7fe fbc9 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 8004d62:	2030      	movs	r0, #48	; 0x30
 8004d64:	f7fe fbc6 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 8004d68:	20ed      	movs	r0, #237	; 0xed
 8004d6a:	f7fe fb9f 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 8004d6e:	2064      	movs	r0, #100	; 0x64
 8004d70:	f7fe fbc0 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8004d74:	2003      	movs	r0, #3
 8004d76:	f7fe fbbd 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 8004d7a:	2012      	movs	r0, #18
 8004d7c:	f7fe fbba 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 8004d80:	2081      	movs	r0, #129	; 0x81
 8004d82:	f7fe fbb7 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 8004d86:	20e8      	movs	r0, #232	; 0xe8
 8004d88:	f7fe fb90 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 8004d8c:	2085      	movs	r0, #133	; 0x85
 8004d8e:	f7fe fbb1 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8004d92:	2010      	movs	r0, #16
 8004d94:	f7fe fbae 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8004d98:	207a      	movs	r0, #122	; 0x7a
 8004d9a:	f7fe fbab 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 8004d9e:	20cb      	movs	r0, #203	; 0xcb
 8004da0:	f7fe fb84 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 8004da4:	2039      	movs	r0, #57	; 0x39
 8004da6:	f7fe fba5 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8004daa:	202c      	movs	r0, #44	; 0x2c
 8004dac:	f7fe fba2 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004db0:	2000      	movs	r0, #0
 8004db2:	f7fe fb9f 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8004db6:	2034      	movs	r0, #52	; 0x34
 8004db8:	f7fe fb9c 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8004dbc:	2002      	movs	r0, #2
 8004dbe:	f7fe fb99 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 8004dc2:	20f7      	movs	r0, #247	; 0xf7
 8004dc4:	f7fe fb72 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8004dc8:	2020      	movs	r0, #32
 8004dca:	f7fe fb93 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 8004dce:	20ea      	movs	r0, #234	; 0xea
 8004dd0:	f7fe fb6c 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	f7fe fb8d 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dda:	2000      	movs	r0, #0
 8004ddc:	f7fe fb8a 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8004de0:	20c0      	movs	r0, #192	; 0xc0
 8004de2:	f7fe fb63 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 8004de6:	201b      	movs	r0, #27
 8004de8:	f7fe fb84 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 8004dec:	20c1      	movs	r0, #193	; 0xc1
 8004dee:	f7fe fb5d 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 8004df2:	2001      	movs	r0, #1
 8004df4:	f7fe fb7e 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8004df8:	20c5      	movs	r0, #197	; 0xc5
 8004dfa:	f7fe fb57 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 8004dfe:	2030      	movs	r0, #48	; 0x30
 8004e00:	f7fe fb78 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 8004e04:	2030      	movs	r0, #48	; 0x30
 8004e06:	f7fe fb75 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 8004e0a:	20c7      	movs	r0, #199	; 0xc7
 8004e0c:	f7fe fb4e 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8004e10:	20b7      	movs	r0, #183	; 0xb7
 8004e12:	f7fe fb6f 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 8004e16:	2036      	movs	r0, #54	; 0x36
 8004e18:	f7fe fb48 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 8004e1c:	2048      	movs	r0, #72	; 0x48
 8004e1e:	f7fe fb69 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 8004e22:	203a      	movs	r0, #58	; 0x3a
 8004e24:	f7fe fb42 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8004e28:	2055      	movs	r0, #85	; 0x55
 8004e2a:	f7fe fb63 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 8004e2e:	20b1      	movs	r0, #177	; 0xb1
 8004e30:	f7fe fb3c 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004e34:	2000      	movs	r0, #0
 8004e36:	f7fe fb5d 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 8004e3a:	201a      	movs	r0, #26
 8004e3c:	f7fe fb5a 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 8004e40:	20b6      	movs	r0, #182	; 0xb6
 8004e42:	f7fe fb33 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8004e46:	200a      	movs	r0, #10
 8004e48:	f7fe fb54 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8004e4c:	20a2      	movs	r0, #162	; 0xa2
 8004e4e:	f7fe fb51 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 8004e52:	20f2      	movs	r0, #242	; 0xf2
 8004e54:	f7fe fb2a 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004e58:	2000      	movs	r0, #0
 8004e5a:	f7fe fb4b 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 8004e5e:	2026      	movs	r0, #38	; 0x26
 8004e60:	f7fe fb24 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8004e64:	2001      	movs	r0, #1
 8004e66:	f7fe fb45 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 8004e6a:	20e0      	movs	r0, #224	; 0xe0
 8004e6c:	f7fe fb1e 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 8004e70:	200f      	movs	r0, #15
 8004e72:	f7fe fb3f 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8004e76:	202a      	movs	r0, #42	; 0x2a
 8004e78:	f7fe fb3c 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 8004e7c:	2028      	movs	r0, #40	; 0x28
 8004e7e:	f7fe fb39 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8004e82:	2008      	movs	r0, #8
 8004e84:	f7fe fb36 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 8004e88:	200e      	movs	r0, #14
 8004e8a:	f7fe fb33 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8004e8e:	2008      	movs	r0, #8
 8004e90:	f7fe fb30 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8004e94:	2054      	movs	r0, #84	; 0x54
 8004e96:	f7fe fb2d 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 8004e9a:	20a9      	movs	r0, #169	; 0xa9
 8004e9c:	f7fe fb2a 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8004ea0:	2043      	movs	r0, #67	; 0x43
 8004ea2:	f7fe fb27 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 8004ea6:	200a      	movs	r0, #10
 8004ea8:	f7fe fb24 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8004eac:	200f      	movs	r0, #15
 8004eae:	f7fe fb21 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	f7fe fb1e 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004eb8:	2000      	movs	r0, #0
 8004eba:	f7fe fb1b 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	f7fe fb18 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	f7fe fb15 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 8004eca:	20e1      	movs	r0, #225	; 0xe1
 8004ecc:	f7fe faee 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	f7fe fb0f 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 8004ed6:	2015      	movs	r0, #21
 8004ed8:	f7fe fb0c 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8004edc:	2017      	movs	r0, #23
 8004ede:	f7fe fb09 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 8004ee2:	2007      	movs	r0, #7
 8004ee4:	f7fe fb06 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8004ee8:	2011      	movs	r0, #17
 8004eea:	f7fe fb03 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 8004eee:	2006      	movs	r0, #6
 8004ef0:	f7fe fb00 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 8004ef4:	202b      	movs	r0, #43	; 0x2b
 8004ef6:	f7fe fafd 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8004efa:	2056      	movs	r0, #86	; 0x56
 8004efc:	f7fe fafa 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8004f00:	203c      	movs	r0, #60	; 0x3c
 8004f02:	f7fe faf7 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8004f06:	2005      	movs	r0, #5
 8004f08:	f7fe faf4 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8004f0c:	2010      	movs	r0, #16
 8004f0e:	f7fe faf1 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8004f12:	200f      	movs	r0, #15
 8004f14:	f7fe faee 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8004f18:	203f      	movs	r0, #63	; 0x3f
 8004f1a:	f7fe faeb 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8004f1e:	203f      	movs	r0, #63	; 0x3f
 8004f20:	f7fe fae8 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8004f24:	200f      	movs	r0, #15
 8004f26:	f7fe fae5 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 8004f2a:	202b      	movs	r0, #43	; 0x2b
 8004f2c:	f7fe fabe 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004f30:	2000      	movs	r0, #0
 8004f32:	f7fe fadf 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f36:	2000      	movs	r0, #0
 8004f38:	f7fe fadc 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8004f3c:	2001      	movs	r0, #1
 8004f3e:	f7fe fad9 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 8004f42:	203f      	movs	r0, #63	; 0x3f
 8004f44:	f7fe fad6 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 8004f48:	202a      	movs	r0, #42	; 0x2a
 8004f4a:	f7fe faaf 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004f4e:	2000      	movs	r0, #0
 8004f50:	f7fe fad0 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f54:	2000      	movs	r0, #0
 8004f56:	f7fe facd 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f5a:	2000      	movs	r0, #0
 8004f5c:	f7fe faca 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 8004f60:	20ef      	movs	r0, #239	; 0xef
 8004f62:	f7fe fac7 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 8004f66:	2011      	movs	r0, #17
 8004f68:	f7fe faa0 	bl	80034ac <LCD_WR_REG>
		HAL_Delay(120);
 8004f6c:	2078      	movs	r0, #120	; 0x78
 8004f6e:	f7fb fd87 	bl	8000a80 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 8004f72:	2029      	movs	r0, #41	; 0x29
 8004f74:	f7fe fa9a 	bl	80034ac <LCD_WR_REG>
 8004f78:	f003 bcd8 	b.w	800892c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 8004f7c:	4b58      	ldr	r3, [pc, #352]	; (80050e0 <LCD_Init+0x5e8>)
 8004f7e:	889b      	ldrh	r3, [r3, #4]
 8004f80:	f646 0204 	movw	r2, #26628	; 0x6804
 8004f84:	4293      	cmp	r3, r2
 8004f86:	f040 80ad 	bne.w	80050e4 <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 8004f8a:	2011      	movs	r0, #17
 8004f8c:	f7fe fa8e 	bl	80034ac <LCD_WR_REG>
		HAL_Delay(20);
 8004f90:	2014      	movs	r0, #20
 8004f92:	f7fb fd75 	bl	8000a80 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8004f96:	20d0      	movs	r0, #208	; 0xd0
 8004f98:	f7fe fa88 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 8004f9c:	2007      	movs	r0, #7
 8004f9e:	f7fe faa9 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 8004fa2:	2042      	movs	r0, #66	; 0x42
 8004fa4:	f7fe faa6 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8004fa8:	201d      	movs	r0, #29
 8004faa:	f7fe faa3 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 8004fae:	20d1      	movs	r0, #209	; 0xd1
 8004fb0:	f7fe fa7c 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	f7fe fa9d 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 8004fba:	201a      	movs	r0, #26
 8004fbc:	f7fe fa9a 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8004fc0:	2009      	movs	r0, #9
 8004fc2:	f7fe fa97 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8004fc6:	20d2      	movs	r0, #210	; 0xd2
 8004fc8:	f7fe fa70 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8004fcc:	2001      	movs	r0, #1
 8004fce:	f7fe fa91 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 8004fd2:	2022      	movs	r0, #34	; 0x22
 8004fd4:	f7fe fa8e 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8004fd8:	20c0      	movs	r0, #192	; 0xc0
 8004fda:	f7fe fa67 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 8004fde:	2010      	movs	r0, #16
 8004fe0:	f7fe fa88 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 8004fe4:	203b      	movs	r0, #59	; 0x3b
 8004fe6:	f7fe fa85 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8004fea:	2000      	movs	r0, #0
 8004fec:	f7fe fa82 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8004ff0:	2002      	movs	r0, #2
 8004ff2:	f7fe fa7f 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 8004ff6:	2011      	movs	r0, #17
 8004ff8:	f7fe fa7c 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 8004ffc:	20c5      	movs	r0, #197	; 0xc5
 8004ffe:	f7fe fa55 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 8005002:	2003      	movs	r0, #3
 8005004:	f7fe fa76 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8005008:	20c8      	movs	r0, #200	; 0xc8
 800500a:	f7fe fa4f 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800500e:	2000      	movs	r0, #0
 8005010:	f7fe fa70 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8005014:	2025      	movs	r0, #37	; 0x25
 8005016:	f7fe fa6d 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 800501a:	2021      	movs	r0, #33	; 0x21
 800501c:	f7fe fa6a 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8005020:	2005      	movs	r0, #5
 8005022:	f7fe fa67 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8005026:	2000      	movs	r0, #0
 8005028:	f7fe fa64 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 800502c:	200a      	movs	r0, #10
 800502e:	f7fe fa61 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 8005032:	2065      	movs	r0, #101	; 0x65
 8005034:	f7fe fa5e 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8005038:	2025      	movs	r0, #37	; 0x25
 800503a:	f7fe fa5b 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 800503e:	2077      	movs	r0, #119	; 0x77
 8005040:	f7fe fa58 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 8005044:	2050      	movs	r0, #80	; 0x50
 8005046:	f7fe fa55 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 800504a:	200f      	movs	r0, #15
 800504c:	f7fe fa52 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8005050:	2000      	movs	r0, #0
 8005052:	f7fe fa4f 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 8005056:	20f8      	movs	r0, #248	; 0xf8
 8005058:	f7fe fa28 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 800505c:	2001      	movs	r0, #1
 800505e:	f7fe fa49 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 8005062:	20fe      	movs	r0, #254	; 0xfe
 8005064:	f7fe fa22 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8005068:	2000      	movs	r0, #0
 800506a:	f7fe fa43 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 800506e:	2002      	movs	r0, #2
 8005070:	f7fe fa40 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 8005074:	2020      	movs	r0, #32
 8005076:	f7fe fa19 	bl	80034ac <LCD_WR_REG>

		LCD_WR_REG(0X36);
 800507a:	2036      	movs	r0, #54	; 0x36
 800507c:	f7fe fa16 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8005080:	2008      	movs	r0, #8
 8005082:	f7fe fa37 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 8005086:	203a      	movs	r0, #58	; 0x3a
 8005088:	f7fe fa10 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 800508c:	2055      	movs	r0, #85	; 0x55
 800508e:	f7fe fa31 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 8005092:	202b      	movs	r0, #43	; 0x2b
 8005094:	f7fe fa0a 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8005098:	2000      	movs	r0, #0
 800509a:	f7fe fa2b 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800509e:	2000      	movs	r0, #0
 80050a0:	f7fe fa28 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 80050a4:	2001      	movs	r0, #1
 80050a6:	f7fe fa25 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 80050aa:	203f      	movs	r0, #63	; 0x3f
 80050ac:	f7fe fa22 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 80050b0:	202a      	movs	r0, #42	; 0x2a
 80050b2:	f7fe f9fb 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80050b6:	2000      	movs	r0, #0
 80050b8:	f7fe fa1c 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80050bc:	2000      	movs	r0, #0
 80050be:	f7fe fa19 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 80050c2:	2001      	movs	r0, #1
 80050c4:	f7fe fa16 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 80050c8:	20df      	movs	r0, #223	; 0xdf
 80050ca:	f7fe fa13 	bl	80034f4 <LCD_WR_DATAX>
		HAL_Delay(120);
 80050ce:	2078      	movs	r0, #120	; 0x78
 80050d0:	f7fb fcd6 	bl	8000a80 <HAL_Delay>
		LCD_WR_REG(0X29);
 80050d4:	2029      	movs	r0, #41	; 0x29
 80050d6:	f7fe f9e9 	bl	80034ac <LCD_WR_REG>
 80050da:	f003 bc27 	b.w	800892c <LCD_Init+0x3e34>
 80050de:	bf00      	nop
 80050e0:	20000e18 	.word	0x20000e18
	} else if (lcddev.id == 0x5310) {
 80050e4:	4b03      	ldr	r3, [pc, #12]	; (80050f4 <LCD_Init+0x5fc>)
 80050e6:	889b      	ldrh	r3, [r3, #4]
 80050e8:	f245 3210 	movw	r2, #21264	; 0x5310
 80050ec:	4293      	cmp	r3, r2
 80050ee:	f040 877c 	bne.w	8005fea <LCD_Init+0x14f2>
 80050f2:	e001      	b.n	80050f8 <LCD_Init+0x600>
 80050f4:	20000e18 	.word	0x20000e18
		LCD_WR_REG(0xED);
 80050f8:	20ed      	movs	r0, #237	; 0xed
 80050fa:	f7fe f9d7 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80050fe:	2001      	movs	r0, #1
 8005100:	f7fe f9f8 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 8005104:	20fe      	movs	r0, #254	; 0xfe
 8005106:	f7fe f9f5 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 800510a:	20ee      	movs	r0, #238	; 0xee
 800510c:	f7fe f9ce 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8005110:	20de      	movs	r0, #222	; 0xde
 8005112:	f7fe f9ef 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8005116:	2021      	movs	r0, #33	; 0x21
 8005118:	f7fe f9ec 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 800511c:	20f1      	movs	r0, #241	; 0xf1
 800511e:	f7fe f9c5 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8005122:	2001      	movs	r0, #1
 8005124:	f7fe f9e6 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8005128:	20df      	movs	r0, #223	; 0xdf
 800512a:	f7fe f9bf 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 800512e:	2010      	movs	r0, #16
 8005130:	f7fe f9e0 	bl	80034f4 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8005134:	20c4      	movs	r0, #196	; 0xc4
 8005136:	f7fe f9b9 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 800513a:	208f      	movs	r0, #143	; 0x8f
 800513c:	f7fe f9da 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8005140:	20c6      	movs	r0, #198	; 0xc6
 8005142:	f7fe f9b3 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005146:	2000      	movs	r0, #0
 8005148:	f7fe f9d4 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 800514c:	20e2      	movs	r0, #226	; 0xe2
 800514e:	f7fe f9d1 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8005152:	20e2      	movs	r0, #226	; 0xe2
 8005154:	f7fe f9ce 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8005158:	20e2      	movs	r0, #226	; 0xe2
 800515a:	f7fe f9cb 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 800515e:	20bf      	movs	r0, #191	; 0xbf
 8005160:	f7fe f9a4 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8005164:	20aa      	movs	r0, #170	; 0xaa
 8005166:	f7fe f9c5 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 800516a:	20b0      	movs	r0, #176	; 0xb0
 800516c:	f7fe f99e 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8005170:	200d      	movs	r0, #13
 8005172:	f7fe f9bf 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005176:	2000      	movs	r0, #0
 8005178:	f7fe f9bc 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 800517c:	200d      	movs	r0, #13
 800517e:	f7fe f9b9 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005182:	2000      	movs	r0, #0
 8005184:	f7fe f9b6 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8005188:	2011      	movs	r0, #17
 800518a:	f7fe f9b3 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800518e:	2000      	movs	r0, #0
 8005190:	f7fe f9b0 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 8005194:	2019      	movs	r0, #25
 8005196:	f7fe f9ad 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800519a:	2000      	movs	r0, #0
 800519c:	f7fe f9aa 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 80051a0:	2021      	movs	r0, #33	; 0x21
 80051a2:	f7fe f9a7 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051a6:	2000      	movs	r0, #0
 80051a8:	f7fe f9a4 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 80051ac:	202d      	movs	r0, #45	; 0x2d
 80051ae:	f7fe f9a1 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051b2:	2000      	movs	r0, #0
 80051b4:	f7fe f99e 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 80051b8:	203d      	movs	r0, #61	; 0x3d
 80051ba:	f7fe f99b 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051be:	2000      	movs	r0, #0
 80051c0:	f7fe f998 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80051c4:	205d      	movs	r0, #93	; 0x5d
 80051c6:	f7fe f995 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051ca:	2000      	movs	r0, #0
 80051cc:	f7fe f992 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80051d0:	205d      	movs	r0, #93	; 0x5d
 80051d2:	f7fe f98f 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051d6:	2000      	movs	r0, #0
 80051d8:	f7fe f98c 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 80051dc:	20b1      	movs	r0, #177	; 0xb1
 80051de:	f7fe f965 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 80051e2:	2080      	movs	r0, #128	; 0x80
 80051e4:	f7fe f986 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051e8:	2000      	movs	r0, #0
 80051ea:	f7fe f983 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 80051ee:	208b      	movs	r0, #139	; 0x8b
 80051f0:	f7fe f980 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051f4:	2000      	movs	r0, #0
 80051f6:	f7fe f97d 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 80051fa:	2096      	movs	r0, #150	; 0x96
 80051fc:	f7fe f97a 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005200:	2000      	movs	r0, #0
 8005202:	f7fe f977 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 8005206:	20b2      	movs	r0, #178	; 0xb2
 8005208:	f7fe f950 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800520c:	2000      	movs	r0, #0
 800520e:	f7fe f971 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005212:	2000      	movs	r0, #0
 8005214:	f7fe f96e 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8005218:	2002      	movs	r0, #2
 800521a:	f7fe f96b 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800521e:	2000      	movs	r0, #0
 8005220:	f7fe f968 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8005224:	2003      	movs	r0, #3
 8005226:	f7fe f965 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800522a:	2000      	movs	r0, #0
 800522c:	f7fe f962 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 8005230:	20b3      	movs	r0, #179	; 0xb3
 8005232:	f7fe f93b 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005236:	2000      	movs	r0, #0
 8005238:	f7fe f95c 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800523c:	2000      	movs	r0, #0
 800523e:	f7fe f959 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005242:	2000      	movs	r0, #0
 8005244:	f7fe f956 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005248:	2000      	movs	r0, #0
 800524a:	f7fe f953 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800524e:	2000      	movs	r0, #0
 8005250:	f7fe f950 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005254:	2000      	movs	r0, #0
 8005256:	f7fe f94d 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800525a:	2000      	movs	r0, #0
 800525c:	f7fe f94a 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005260:	2000      	movs	r0, #0
 8005262:	f7fe f947 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005266:	2000      	movs	r0, #0
 8005268:	f7fe f944 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800526c:	2000      	movs	r0, #0
 800526e:	f7fe f941 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005272:	2000      	movs	r0, #0
 8005274:	f7fe f93e 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005278:	2000      	movs	r0, #0
 800527a:	f7fe f93b 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800527e:	2000      	movs	r0, #0
 8005280:	f7fe f938 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005284:	2000      	movs	r0, #0
 8005286:	f7fe f935 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800528a:	2000      	movs	r0, #0
 800528c:	f7fe f932 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005290:	2000      	movs	r0, #0
 8005292:	f7fe f92f 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005296:	2000      	movs	r0, #0
 8005298:	f7fe f92c 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800529c:	2000      	movs	r0, #0
 800529e:	f7fe f929 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052a2:	2000      	movs	r0, #0
 80052a4:	f7fe f926 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052a8:	2000      	movs	r0, #0
 80052aa:	f7fe f923 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052ae:	2000      	movs	r0, #0
 80052b0:	f7fe f920 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052b4:	2000      	movs	r0, #0
 80052b6:	f7fe f91d 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052ba:	2000      	movs	r0, #0
 80052bc:	f7fe f91a 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052c0:	2000      	movs	r0, #0
 80052c2:	f7fe f917 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 80052c6:	20b4      	movs	r0, #180	; 0xb4
 80052c8:	f7fe f8f0 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 80052cc:	208b      	movs	r0, #139	; 0x8b
 80052ce:	f7fe f911 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052d2:	2000      	movs	r0, #0
 80052d4:	f7fe f90e 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 80052d8:	2096      	movs	r0, #150	; 0x96
 80052da:	f7fe f90b 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052de:	2000      	movs	r0, #0
 80052e0:	f7fe f908 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 80052e4:	20a1      	movs	r0, #161	; 0xa1
 80052e6:	f7fe f905 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052ea:	2000      	movs	r0, #0
 80052ec:	f7fe f902 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 80052f0:	20b5      	movs	r0, #181	; 0xb5
 80052f2:	f7fe f8db 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 80052f6:	2002      	movs	r0, #2
 80052f8:	f7fe f8fc 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052fc:	2000      	movs	r0, #0
 80052fe:	f7fe f8f9 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8005302:	2003      	movs	r0, #3
 8005304:	f7fe f8f6 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005308:	2000      	movs	r0, #0
 800530a:	f7fe f8f3 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 800530e:	2004      	movs	r0, #4
 8005310:	f7fe f8f0 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005314:	2000      	movs	r0, #0
 8005316:	f7fe f8ed 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 800531a:	20b6      	movs	r0, #182	; 0xb6
 800531c:	f7fe f8c6 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005320:	2000      	movs	r0, #0
 8005322:	f7fe f8e7 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005326:	2000      	movs	r0, #0
 8005328:	f7fe f8e4 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 800532c:	20b7      	movs	r0, #183	; 0xb7
 800532e:	f7fe f8bd 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005332:	2000      	movs	r0, #0
 8005334:	f7fe f8de 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005338:	2000      	movs	r0, #0
 800533a:	f7fe f8db 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 800533e:	203f      	movs	r0, #63	; 0x3f
 8005340:	f7fe f8d8 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005344:	2000      	movs	r0, #0
 8005346:	f7fe f8d5 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 800534a:	205e      	movs	r0, #94	; 0x5e
 800534c:	f7fe f8d2 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005350:	2000      	movs	r0, #0
 8005352:	f7fe f8cf 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8005356:	2064      	movs	r0, #100	; 0x64
 8005358:	f7fe f8cc 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800535c:	2000      	movs	r0, #0
 800535e:	f7fe f8c9 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 8005362:	208c      	movs	r0, #140	; 0x8c
 8005364:	f7fe f8c6 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005368:	2000      	movs	r0, #0
 800536a:	f7fe f8c3 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 800536e:	20ac      	movs	r0, #172	; 0xac
 8005370:	f7fe f8c0 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005374:	2000      	movs	r0, #0
 8005376:	f7fe f8bd 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800537a:	20dc      	movs	r0, #220	; 0xdc
 800537c:	f7fe f8ba 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005380:	2000      	movs	r0, #0
 8005382:	f7fe f8b7 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 8005386:	2070      	movs	r0, #112	; 0x70
 8005388:	f7fe f8b4 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800538c:	2000      	movs	r0, #0
 800538e:	f7fe f8b1 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 8005392:	2090      	movs	r0, #144	; 0x90
 8005394:	f7fe f8ae 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005398:	2000      	movs	r0, #0
 800539a:	f7fe f8ab 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 800539e:	20eb      	movs	r0, #235	; 0xeb
 80053a0:	f7fe f8a8 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053a4:	2000      	movs	r0, #0
 80053a6:	f7fe f8a5 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80053aa:	20dc      	movs	r0, #220	; 0xdc
 80053ac:	f7fe f8a2 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053b0:	2000      	movs	r0, #0
 80053b2:	f7fe f89f 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 80053b6:	20b8      	movs	r0, #184	; 0xb8
 80053b8:	f7fe f878 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80053bc:	2000      	movs	r0, #0
 80053be:	f7fe f899 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053c2:	2000      	movs	r0, #0
 80053c4:	f7fe f896 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053c8:	2000      	movs	r0, #0
 80053ca:	f7fe f893 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053ce:	2000      	movs	r0, #0
 80053d0:	f7fe f890 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053d4:	2000      	movs	r0, #0
 80053d6:	f7fe f88d 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053da:	2000      	movs	r0, #0
 80053dc:	f7fe f88a 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053e0:	2000      	movs	r0, #0
 80053e2:	f7fe f887 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053e6:	2000      	movs	r0, #0
 80053e8:	f7fe f884 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 80053ec:	20ba      	movs	r0, #186	; 0xba
 80053ee:	f7fe f85d 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 80053f2:	2024      	movs	r0, #36	; 0x24
 80053f4:	f7fe f87e 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053f8:	2000      	movs	r0, #0
 80053fa:	f7fe f87b 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053fe:	2000      	movs	r0, #0
 8005400:	f7fe f878 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005404:	2000      	movs	r0, #0
 8005406:	f7fe f875 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 800540a:	20c1      	movs	r0, #193	; 0xc1
 800540c:	f7fe f84e 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8005410:	2020      	movs	r0, #32
 8005412:	f7fe f86f 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005416:	2000      	movs	r0, #0
 8005418:	f7fe f86c 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 800541c:	2054      	movs	r0, #84	; 0x54
 800541e:	f7fe f869 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005422:	2000      	movs	r0, #0
 8005424:	f7fe f866 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8005428:	20ff      	movs	r0, #255	; 0xff
 800542a:	f7fe f863 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800542e:	2000      	movs	r0, #0
 8005430:	f7fe f860 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 8005434:	20c2      	movs	r0, #194	; 0xc2
 8005436:	f7fe f839 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 800543a:	200a      	movs	r0, #10
 800543c:	f7fe f85a 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005440:	2000      	movs	r0, #0
 8005442:	f7fe f857 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8005446:	2004      	movs	r0, #4
 8005448:	f7fe f854 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800544c:	2000      	movs	r0, #0
 800544e:	f7fe f851 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 8005452:	20c3      	movs	r0, #195	; 0xc3
 8005454:	f7fe f82a 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8005458:	203c      	movs	r0, #60	; 0x3c
 800545a:	f7fe f84b 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800545e:	2000      	movs	r0, #0
 8005460:	f7fe f848 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 8005464:	203a      	movs	r0, #58	; 0x3a
 8005466:	f7fe f845 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800546a:	2000      	movs	r0, #0
 800546c:	f7fe f842 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8005470:	2039      	movs	r0, #57	; 0x39
 8005472:	f7fe f83f 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005476:	2000      	movs	r0, #0
 8005478:	f7fe f83c 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 800547c:	2037      	movs	r0, #55	; 0x37
 800547e:	f7fe f839 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005482:	2000      	movs	r0, #0
 8005484:	f7fe f836 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8005488:	203c      	movs	r0, #60	; 0x3c
 800548a:	f7fe f833 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800548e:	2000      	movs	r0, #0
 8005490:	f7fe f830 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8005494:	2036      	movs	r0, #54	; 0x36
 8005496:	f7fe f82d 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800549a:	2000      	movs	r0, #0
 800549c:	f7fe f82a 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 80054a0:	2032      	movs	r0, #50	; 0x32
 80054a2:	f7fe f827 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054a6:	2000      	movs	r0, #0
 80054a8:	f7fe f824 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 80054ac:	202f      	movs	r0, #47	; 0x2f
 80054ae:	f7fe f821 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054b2:	2000      	movs	r0, #0
 80054b4:	f7fe f81e 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80054b8:	202c      	movs	r0, #44	; 0x2c
 80054ba:	f7fe f81b 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054be:	2000      	movs	r0, #0
 80054c0:	f7fe f818 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80054c4:	2029      	movs	r0, #41	; 0x29
 80054c6:	f7fe f815 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054ca:	2000      	movs	r0, #0
 80054cc:	f7fe f812 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 80054d0:	2026      	movs	r0, #38	; 0x26
 80054d2:	f7fe f80f 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054d6:	2000      	movs	r0, #0
 80054d8:	f7fe f80c 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80054dc:	2024      	movs	r0, #36	; 0x24
 80054de:	f7fe f809 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054e2:	2000      	movs	r0, #0
 80054e4:	f7fe f806 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80054e8:	2024      	movs	r0, #36	; 0x24
 80054ea:	f7fe f803 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054ee:	2000      	movs	r0, #0
 80054f0:	f7fe f800 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80054f4:	2023      	movs	r0, #35	; 0x23
 80054f6:	f7fd fffd 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054fa:	2000      	movs	r0, #0
 80054fc:	f7fd fffa 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8005500:	203c      	movs	r0, #60	; 0x3c
 8005502:	f7fd fff7 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005506:	2000      	movs	r0, #0
 8005508:	f7fd fff4 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 800550c:	2036      	movs	r0, #54	; 0x36
 800550e:	f7fd fff1 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005512:	2000      	movs	r0, #0
 8005514:	f7fd ffee 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8005518:	2032      	movs	r0, #50	; 0x32
 800551a:	f7fd ffeb 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800551e:	2000      	movs	r0, #0
 8005520:	f7fd ffe8 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8005524:	202f      	movs	r0, #47	; 0x2f
 8005526:	f7fd ffe5 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800552a:	2000      	movs	r0, #0
 800552c:	f7fd ffe2 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8005530:	202c      	movs	r0, #44	; 0x2c
 8005532:	f7fd ffdf 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005536:	2000      	movs	r0, #0
 8005538:	f7fd ffdc 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 800553c:	2029      	movs	r0, #41	; 0x29
 800553e:	f7fd ffd9 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005542:	2000      	movs	r0, #0
 8005544:	f7fd ffd6 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8005548:	2026      	movs	r0, #38	; 0x26
 800554a:	f7fd ffd3 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800554e:	2000      	movs	r0, #0
 8005550:	f7fd ffd0 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8005554:	2024      	movs	r0, #36	; 0x24
 8005556:	f7fd ffcd 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800555a:	2000      	movs	r0, #0
 800555c:	f7fd ffca 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8005560:	2024      	movs	r0, #36	; 0x24
 8005562:	f7fd ffc7 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005566:	2000      	movs	r0, #0
 8005568:	f7fd ffc4 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800556c:	2023      	movs	r0, #35	; 0x23
 800556e:	f7fd ffc1 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005572:	2000      	movs	r0, #0
 8005574:	f7fd ffbe 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8005578:	20c4      	movs	r0, #196	; 0xc4
 800557a:	f7fd ff97 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 800557e:	2062      	movs	r0, #98	; 0x62
 8005580:	f7fd ffb8 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005584:	2000      	movs	r0, #0
 8005586:	f7fd ffb5 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 800558a:	2005      	movs	r0, #5
 800558c:	f7fd ffb2 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005590:	2000      	movs	r0, #0
 8005592:	f7fd ffaf 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8005596:	2084      	movs	r0, #132	; 0x84
 8005598:	f7fd ffac 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800559c:	2000      	movs	r0, #0
 800559e:	f7fd ffa9 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 80055a2:	20f0      	movs	r0, #240	; 0xf0
 80055a4:	f7fd ffa6 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055a8:	2000      	movs	r0, #0
 80055aa:	f7fd ffa3 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 80055ae:	2018      	movs	r0, #24
 80055b0:	f7fd ffa0 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055b4:	2000      	movs	r0, #0
 80055b6:	f7fd ff9d 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 80055ba:	20a4      	movs	r0, #164	; 0xa4
 80055bc:	f7fd ff9a 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055c0:	2000      	movs	r0, #0
 80055c2:	f7fd ff97 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 80055c6:	2018      	movs	r0, #24
 80055c8:	f7fd ff94 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055cc:	2000      	movs	r0, #0
 80055ce:	f7fd ff91 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80055d2:	2050      	movs	r0, #80	; 0x50
 80055d4:	f7fd ff8e 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055d8:	2000      	movs	r0, #0
 80055da:	f7fd ff8b 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 80055de:	200c      	movs	r0, #12
 80055e0:	f7fd ff88 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055e4:	2000      	movs	r0, #0
 80055e6:	f7fd ff85 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 80055ea:	2017      	movs	r0, #23
 80055ec:	f7fd ff82 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055f0:	2000      	movs	r0, #0
 80055f2:	f7fd ff7f 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 80055f6:	2095      	movs	r0, #149	; 0x95
 80055f8:	f7fd ff7c 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055fc:	2000      	movs	r0, #0
 80055fe:	f7fd ff79 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8005602:	20f3      	movs	r0, #243	; 0xf3
 8005604:	f7fd ff76 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005608:	2000      	movs	r0, #0
 800560a:	f7fd ff73 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 800560e:	20e6      	movs	r0, #230	; 0xe6
 8005610:	f7fd ff70 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005614:	2000      	movs	r0, #0
 8005616:	f7fd ff6d 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 800561a:	20c5      	movs	r0, #197	; 0xc5
 800561c:	f7fd ff46 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8005620:	2032      	movs	r0, #50	; 0x32
 8005622:	f7fd ff67 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005626:	2000      	movs	r0, #0
 8005628:	f7fd ff64 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800562c:	2044      	movs	r0, #68	; 0x44
 800562e:	f7fd ff61 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005632:	2000      	movs	r0, #0
 8005634:	f7fd ff5e 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8005638:	2065      	movs	r0, #101	; 0x65
 800563a:	f7fd ff5b 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800563e:	2000      	movs	r0, #0
 8005640:	f7fd ff58 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8005644:	2076      	movs	r0, #118	; 0x76
 8005646:	f7fd ff55 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800564a:	2000      	movs	r0, #0
 800564c:	f7fd ff52 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8005650:	2088      	movs	r0, #136	; 0x88
 8005652:	f7fd ff4f 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005656:	2000      	movs	r0, #0
 8005658:	f7fd ff4c 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 800565c:	20c6      	movs	r0, #198	; 0xc6
 800565e:	f7fd ff25 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8005662:	2020      	movs	r0, #32
 8005664:	f7fd ff46 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005668:	2000      	movs	r0, #0
 800566a:	f7fd ff43 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800566e:	2017      	movs	r0, #23
 8005670:	f7fd ff40 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005674:	2000      	movs	r0, #0
 8005676:	f7fd ff3d 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 800567a:	2001      	movs	r0, #1
 800567c:	f7fd ff3a 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005680:	2000      	movs	r0, #0
 8005682:	f7fd ff37 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8005686:	20c7      	movs	r0, #199	; 0xc7
 8005688:	f7fd ff10 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800568c:	2000      	movs	r0, #0
 800568e:	f7fd ff31 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005692:	2000      	movs	r0, #0
 8005694:	f7fd ff2e 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005698:	2000      	movs	r0, #0
 800569a:	f7fd ff2b 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800569e:	2000      	movs	r0, #0
 80056a0:	f7fd ff28 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 80056a4:	20c8      	movs	r0, #200	; 0xc8
 80056a6:	f7fd ff01 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80056aa:	2000      	movs	r0, #0
 80056ac:	f7fd ff22 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056b0:	2000      	movs	r0, #0
 80056b2:	f7fd ff1f 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056b6:	2000      	movs	r0, #0
 80056b8:	f7fd ff1c 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056bc:	2000      	movs	r0, #0
 80056be:	f7fd ff19 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 80056c2:	20c9      	movs	r0, #201	; 0xc9
 80056c4:	f7fd fef2 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80056c8:	2000      	movs	r0, #0
 80056ca:	f7fd ff13 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056ce:	2000      	movs	r0, #0
 80056d0:	f7fd ff10 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056d4:	2000      	movs	r0, #0
 80056d6:	f7fd ff0d 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056da:	2000      	movs	r0, #0
 80056dc:	f7fd ff0a 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056e0:	2000      	movs	r0, #0
 80056e2:	f7fd ff07 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056e6:	2000      	movs	r0, #0
 80056e8:	f7fd ff04 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056ec:	2000      	movs	r0, #0
 80056ee:	f7fd ff01 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056f2:	2000      	movs	r0, #0
 80056f4:	f7fd fefe 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056f8:	2000      	movs	r0, #0
 80056fa:	f7fd fefb 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056fe:	2000      	movs	r0, #0
 8005700:	f7fd fef8 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005704:	2000      	movs	r0, #0
 8005706:	f7fd fef5 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800570a:	2000      	movs	r0, #0
 800570c:	f7fd fef2 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005710:	2000      	movs	r0, #0
 8005712:	f7fd feef 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005716:	2000      	movs	r0, #0
 8005718:	f7fd feec 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800571c:	2000      	movs	r0, #0
 800571e:	f7fd fee9 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005722:	2000      	movs	r0, #0
 8005724:	f7fd fee6 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8005728:	20e0      	movs	r0, #224	; 0xe0
 800572a:	f7fd febf 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 800572e:	2016      	movs	r0, #22
 8005730:	f7fd fee0 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005734:	2000      	movs	r0, #0
 8005736:	f7fd fedd 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 800573a:	201c      	movs	r0, #28
 800573c:	f7fd feda 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005740:	2000      	movs	r0, #0
 8005742:	f7fd fed7 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8005746:	2021      	movs	r0, #33	; 0x21
 8005748:	f7fd fed4 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800574c:	2000      	movs	r0, #0
 800574e:	f7fd fed1 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8005752:	2036      	movs	r0, #54	; 0x36
 8005754:	f7fd fece 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005758:	2000      	movs	r0, #0
 800575a:	f7fd fecb 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 800575e:	2046      	movs	r0, #70	; 0x46
 8005760:	f7fd fec8 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005764:	2000      	movs	r0, #0
 8005766:	f7fd fec5 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 800576a:	2052      	movs	r0, #82	; 0x52
 800576c:	f7fd fec2 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005770:	2000      	movs	r0, #0
 8005772:	f7fd febf 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8005776:	2064      	movs	r0, #100	; 0x64
 8005778:	f7fd febc 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800577c:	2000      	movs	r0, #0
 800577e:	f7fd feb9 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8005782:	207a      	movs	r0, #122	; 0x7a
 8005784:	f7fd feb6 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005788:	2000      	movs	r0, #0
 800578a:	f7fd feb3 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 800578e:	208b      	movs	r0, #139	; 0x8b
 8005790:	f7fd feb0 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005794:	2000      	movs	r0, #0
 8005796:	f7fd fead 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800579a:	2099      	movs	r0, #153	; 0x99
 800579c:	f7fd feaa 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057a0:	2000      	movs	r0, #0
 80057a2:	f7fd fea7 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 80057a6:	20a8      	movs	r0, #168	; 0xa8
 80057a8:	f7fd fea4 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057ac:	2000      	movs	r0, #0
 80057ae:	f7fd fea1 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 80057b2:	20b9      	movs	r0, #185	; 0xb9
 80057b4:	f7fd fe9e 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057b8:	2000      	movs	r0, #0
 80057ba:	f7fd fe9b 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80057be:	20c4      	movs	r0, #196	; 0xc4
 80057c0:	f7fd fe98 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057c4:	2000      	movs	r0, #0
 80057c6:	f7fd fe95 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 80057ca:	20ca      	movs	r0, #202	; 0xca
 80057cc:	f7fd fe92 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057d0:	2000      	movs	r0, #0
 80057d2:	f7fd fe8f 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 80057d6:	20d2      	movs	r0, #210	; 0xd2
 80057d8:	f7fd fe8c 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057dc:	2000      	movs	r0, #0
 80057de:	f7fd fe89 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 80057e2:	20d9      	movs	r0, #217	; 0xd9
 80057e4:	f7fd fe86 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057e8:	2000      	movs	r0, #0
 80057ea:	f7fd fe83 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 80057ee:	20e0      	movs	r0, #224	; 0xe0
 80057f0:	f7fd fe80 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057f4:	2000      	movs	r0, #0
 80057f6:	f7fd fe7d 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80057fa:	20f3      	movs	r0, #243	; 0xf3
 80057fc:	f7fd fe7a 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005800:	2000      	movs	r0, #0
 8005802:	f7fd fe77 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8005806:	20e1      	movs	r0, #225	; 0xe1
 8005808:	f7fd fe50 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 800580c:	2016      	movs	r0, #22
 800580e:	f7fd fe71 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005812:	2000      	movs	r0, #0
 8005814:	f7fd fe6e 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8005818:	201c      	movs	r0, #28
 800581a:	f7fd fe6b 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800581e:	2000      	movs	r0, #0
 8005820:	f7fd fe68 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8005824:	2022      	movs	r0, #34	; 0x22
 8005826:	f7fd fe65 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800582a:	2000      	movs	r0, #0
 800582c:	f7fd fe62 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8005830:	2036      	movs	r0, #54	; 0x36
 8005832:	f7fd fe5f 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005836:	2000      	movs	r0, #0
 8005838:	f7fd fe5c 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800583c:	2045      	movs	r0, #69	; 0x45
 800583e:	f7fd fe59 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005842:	2000      	movs	r0, #0
 8005844:	f7fd fe56 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8005848:	2052      	movs	r0, #82	; 0x52
 800584a:	f7fd fe53 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800584e:	2000      	movs	r0, #0
 8005850:	f7fd fe50 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8005854:	2064      	movs	r0, #100	; 0x64
 8005856:	f7fd fe4d 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800585a:	2000      	movs	r0, #0
 800585c:	f7fd fe4a 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8005860:	207a      	movs	r0, #122	; 0x7a
 8005862:	f7fd fe47 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005866:	2000      	movs	r0, #0
 8005868:	f7fd fe44 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 800586c:	208b      	movs	r0, #139	; 0x8b
 800586e:	f7fd fe41 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005872:	2000      	movs	r0, #0
 8005874:	f7fd fe3e 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8005878:	2099      	movs	r0, #153	; 0x99
 800587a:	f7fd fe3b 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800587e:	2000      	movs	r0, #0
 8005880:	f7fd fe38 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8005884:	20a8      	movs	r0, #168	; 0xa8
 8005886:	f7fd fe35 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800588a:	2000      	movs	r0, #0
 800588c:	f7fd fe32 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8005890:	20b9      	movs	r0, #185	; 0xb9
 8005892:	f7fd fe2f 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005896:	2000      	movs	r0, #0
 8005898:	f7fd fe2c 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 800589c:	20c4      	movs	r0, #196	; 0xc4
 800589e:	f7fd fe29 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058a2:	2000      	movs	r0, #0
 80058a4:	f7fd fe26 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 80058a8:	20ca      	movs	r0, #202	; 0xca
 80058aa:	f7fd fe23 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058ae:	2000      	movs	r0, #0
 80058b0:	f7fd fe20 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 80058b4:	20d2      	movs	r0, #210	; 0xd2
 80058b6:	f7fd fe1d 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058ba:	2000      	movs	r0, #0
 80058bc:	f7fd fe1a 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 80058c0:	20d8      	movs	r0, #216	; 0xd8
 80058c2:	f7fd fe17 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058c6:	2000      	movs	r0, #0
 80058c8:	f7fd fe14 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 80058cc:	20e0      	movs	r0, #224	; 0xe0
 80058ce:	f7fd fe11 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058d2:	2000      	movs	r0, #0
 80058d4:	f7fd fe0e 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80058d8:	20f3      	movs	r0, #243	; 0xf3
 80058da:	f7fd fe0b 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058de:	2000      	movs	r0, #0
 80058e0:	f7fd fe08 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 80058e4:	20e2      	movs	r0, #226	; 0xe2
 80058e6:	f7fd fde1 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 80058ea:	2005      	movs	r0, #5
 80058ec:	f7fd fe02 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058f0:	2000      	movs	r0, #0
 80058f2:	f7fd fdff 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 80058f6:	200b      	movs	r0, #11
 80058f8:	f7fd fdfc 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058fc:	2000      	movs	r0, #0
 80058fe:	f7fd fdf9 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8005902:	201b      	movs	r0, #27
 8005904:	f7fd fdf6 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005908:	2000      	movs	r0, #0
 800590a:	f7fd fdf3 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 800590e:	2034      	movs	r0, #52	; 0x34
 8005910:	f7fd fdf0 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005914:	2000      	movs	r0, #0
 8005916:	f7fd fded 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800591a:	2044      	movs	r0, #68	; 0x44
 800591c:	f7fd fdea 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005920:	2000      	movs	r0, #0
 8005922:	f7fd fde7 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8005926:	204f      	movs	r0, #79	; 0x4f
 8005928:	f7fd fde4 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800592c:	2000      	movs	r0, #0
 800592e:	f7fd fde1 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8005932:	2061      	movs	r0, #97	; 0x61
 8005934:	f7fd fdde 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005938:	2000      	movs	r0, #0
 800593a:	f7fd fddb 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 800593e:	2079      	movs	r0, #121	; 0x79
 8005940:	f7fd fdd8 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005944:	2000      	movs	r0, #0
 8005946:	f7fd fdd5 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800594a:	2088      	movs	r0, #136	; 0x88
 800594c:	f7fd fdd2 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005950:	2000      	movs	r0, #0
 8005952:	f7fd fdcf 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8005956:	2097      	movs	r0, #151	; 0x97
 8005958:	f7fd fdcc 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800595c:	2000      	movs	r0, #0
 800595e:	f7fd fdc9 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8005962:	20a6      	movs	r0, #166	; 0xa6
 8005964:	f7fd fdc6 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005968:	2000      	movs	r0, #0
 800596a:	f7fd fdc3 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 800596e:	20b7      	movs	r0, #183	; 0xb7
 8005970:	f7fd fdc0 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005974:	2000      	movs	r0, #0
 8005976:	f7fd fdbd 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 800597a:	20c2      	movs	r0, #194	; 0xc2
 800597c:	f7fd fdba 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005980:	2000      	movs	r0, #0
 8005982:	f7fd fdb7 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8005986:	20c7      	movs	r0, #199	; 0xc7
 8005988:	f7fd fdb4 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800598c:	2000      	movs	r0, #0
 800598e:	f7fd fdb1 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8005992:	20d1      	movs	r0, #209	; 0xd1
 8005994:	f7fd fdae 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005998:	2000      	movs	r0, #0
 800599a:	f7fd fdab 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 800599e:	20d6      	movs	r0, #214	; 0xd6
 80059a0:	f7fd fda8 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059a4:	2000      	movs	r0, #0
 80059a6:	f7fd fda5 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80059aa:	20dd      	movs	r0, #221	; 0xdd
 80059ac:	f7fd fda2 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059b0:	2000      	movs	r0, #0
 80059b2:	f7fd fd9f 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80059b6:	20f3      	movs	r0, #243	; 0xf3
 80059b8:	f7fd fd9c 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059bc:	2000      	movs	r0, #0
 80059be:	f7fd fd99 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 80059c2:	20e3      	movs	r0, #227	; 0xe3
 80059c4:	f7fd fd72 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 80059c8:	2005      	movs	r0, #5
 80059ca:	f7fd fd93 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059ce:	2000      	movs	r0, #0
 80059d0:	f7fd fd90 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 80059d4:	200a      	movs	r0, #10
 80059d6:	f7fd fd8d 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059da:	2000      	movs	r0, #0
 80059dc:	f7fd fd8a 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 80059e0:	201c      	movs	r0, #28
 80059e2:	f7fd fd87 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059e6:	2000      	movs	r0, #0
 80059e8:	f7fd fd84 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 80059ec:	2033      	movs	r0, #51	; 0x33
 80059ee:	f7fd fd81 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059f2:	2000      	movs	r0, #0
 80059f4:	f7fd fd7e 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80059f8:	2044      	movs	r0, #68	; 0x44
 80059fa:	f7fd fd7b 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059fe:	2000      	movs	r0, #0
 8005a00:	f7fd fd78 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8005a04:	2050      	movs	r0, #80	; 0x50
 8005a06:	f7fd fd75 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	f7fd fd72 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8005a10:	2062      	movs	r0, #98	; 0x62
 8005a12:	f7fd fd6f 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a16:	2000      	movs	r0, #0
 8005a18:	f7fd fd6c 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8005a1c:	2078      	movs	r0, #120	; 0x78
 8005a1e:	f7fd fd69 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a22:	2000      	movs	r0, #0
 8005a24:	f7fd fd66 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8005a28:	2088      	movs	r0, #136	; 0x88
 8005a2a:	f7fd fd63 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a2e:	2000      	movs	r0, #0
 8005a30:	f7fd fd60 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8005a34:	2097      	movs	r0, #151	; 0x97
 8005a36:	f7fd fd5d 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	f7fd fd5a 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8005a40:	20a6      	movs	r0, #166	; 0xa6
 8005a42:	f7fd fd57 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a46:	2000      	movs	r0, #0
 8005a48:	f7fd fd54 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8005a4c:	20b7      	movs	r0, #183	; 0xb7
 8005a4e:	f7fd fd51 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a52:	2000      	movs	r0, #0
 8005a54:	f7fd fd4e 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8005a58:	20c2      	movs	r0, #194	; 0xc2
 8005a5a:	f7fd fd4b 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a5e:	2000      	movs	r0, #0
 8005a60:	f7fd fd48 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8005a64:	20c7      	movs	r0, #199	; 0xc7
 8005a66:	f7fd fd45 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	f7fd fd42 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8005a70:	20d1      	movs	r0, #209	; 0xd1
 8005a72:	f7fd fd3f 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a76:	2000      	movs	r0, #0
 8005a78:	f7fd fd3c 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8005a7c:	20d5      	movs	r0, #213	; 0xd5
 8005a7e:	f7fd fd39 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a82:	2000      	movs	r0, #0
 8005a84:	f7fd fd36 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8005a88:	20dd      	movs	r0, #221	; 0xdd
 8005a8a:	f7fd fd33 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a8e:	2000      	movs	r0, #0
 8005a90:	f7fd fd30 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8005a94:	20f3      	movs	r0, #243	; 0xf3
 8005a96:	f7fd fd2d 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	f7fd fd2a 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8005aa0:	20e4      	movs	r0, #228	; 0xe4
 8005aa2:	f7fd fd03 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8005aa6:	2001      	movs	r0, #1
 8005aa8:	f7fd fd24 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005aac:	2000      	movs	r0, #0
 8005aae:	f7fd fd21 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8005ab2:	2001      	movs	r0, #1
 8005ab4:	f7fd fd1e 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005ab8:	2000      	movs	r0, #0
 8005aba:	f7fd fd1b 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8005abe:	2002      	movs	r0, #2
 8005ac0:	f7fd fd18 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	f7fd fd15 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8005aca:	202a      	movs	r0, #42	; 0x2a
 8005acc:	f7fd fd12 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	f7fd fd0f 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8005ad6:	203c      	movs	r0, #60	; 0x3c
 8005ad8:	f7fd fd0c 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005adc:	2000      	movs	r0, #0
 8005ade:	f7fd fd09 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8005ae2:	204b      	movs	r0, #75	; 0x4b
 8005ae4:	f7fd fd06 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005ae8:	2000      	movs	r0, #0
 8005aea:	f7fd fd03 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8005aee:	205d      	movs	r0, #93	; 0x5d
 8005af0:	f7fd fd00 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005af4:	2000      	movs	r0, #0
 8005af6:	f7fd fcfd 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8005afa:	2074      	movs	r0, #116	; 0x74
 8005afc:	f7fd fcfa 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b00:	2000      	movs	r0, #0
 8005b02:	f7fd fcf7 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8005b06:	2084      	movs	r0, #132	; 0x84
 8005b08:	f7fd fcf4 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	f7fd fcf1 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8005b12:	2093      	movs	r0, #147	; 0x93
 8005b14:	f7fd fcee 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b18:	2000      	movs	r0, #0
 8005b1a:	f7fd fceb 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8005b1e:	20a2      	movs	r0, #162	; 0xa2
 8005b20:	f7fd fce8 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b24:	2000      	movs	r0, #0
 8005b26:	f7fd fce5 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8005b2a:	20b3      	movs	r0, #179	; 0xb3
 8005b2c:	f7fd fce2 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b30:	2000      	movs	r0, #0
 8005b32:	f7fd fcdf 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8005b36:	20be      	movs	r0, #190	; 0xbe
 8005b38:	f7fd fcdc 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	f7fd fcd9 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8005b42:	20c4      	movs	r0, #196	; 0xc4
 8005b44:	f7fd fcd6 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b48:	2000      	movs	r0, #0
 8005b4a:	f7fd fcd3 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8005b4e:	20cd      	movs	r0, #205	; 0xcd
 8005b50:	f7fd fcd0 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b54:	2000      	movs	r0, #0
 8005b56:	f7fd fccd 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8005b5a:	20d3      	movs	r0, #211	; 0xd3
 8005b5c:	f7fd fcca 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b60:	2000      	movs	r0, #0
 8005b62:	f7fd fcc7 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8005b66:	20dd      	movs	r0, #221	; 0xdd
 8005b68:	f7fd fcc4 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b6c:	2000      	movs	r0, #0
 8005b6e:	f7fd fcc1 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8005b72:	20f3      	movs	r0, #243	; 0xf3
 8005b74:	f7fd fcbe 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b78:	2000      	movs	r0, #0
 8005b7a:	f7fd fcbb 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8005b7e:	20e5      	movs	r0, #229	; 0xe5
 8005b80:	f7fd fc94 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005b84:	2000      	movs	r0, #0
 8005b86:	f7fd fcb5 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b8a:	2000      	movs	r0, #0
 8005b8c:	f7fd fcb2 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b90:	2000      	movs	r0, #0
 8005b92:	f7fd fcaf 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005b96:	2000      	movs	r0, #0
 8005b98:	f7fd fcac 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8005b9c:	2002      	movs	r0, #2
 8005b9e:	f7fd fca9 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	f7fd fca6 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8005ba8:	2029      	movs	r0, #41	; 0x29
 8005baa:	f7fd fca3 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005bae:	2000      	movs	r0, #0
 8005bb0:	f7fd fca0 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8005bb4:	203c      	movs	r0, #60	; 0x3c
 8005bb6:	f7fd fc9d 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005bba:	2000      	movs	r0, #0
 8005bbc:	f7fd fc9a 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8005bc0:	204b      	movs	r0, #75	; 0x4b
 8005bc2:	f7fd fc97 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	f7fd fc94 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8005bcc:	205d      	movs	r0, #93	; 0x5d
 8005bce:	f7fd fc91 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	f7fd fc8e 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8005bd8:	2074      	movs	r0, #116	; 0x74
 8005bda:	f7fd fc8b 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005bde:	2000      	movs	r0, #0
 8005be0:	f7fd fc88 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8005be4:	2084      	movs	r0, #132	; 0x84
 8005be6:	f7fd fc85 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005bea:	2000      	movs	r0, #0
 8005bec:	f7fd fc82 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8005bf0:	2093      	movs	r0, #147	; 0x93
 8005bf2:	f7fd fc7f 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	f7fd fc7c 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8005bfc:	20a2      	movs	r0, #162	; 0xa2
 8005bfe:	f7fd fc79 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005c02:	2000      	movs	r0, #0
 8005c04:	f7fd fc76 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8005c08:	20b3      	movs	r0, #179	; 0xb3
 8005c0a:	f7fd fc73 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005c0e:	2000      	movs	r0, #0
 8005c10:	f7fd fc70 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8005c14:	20be      	movs	r0, #190	; 0xbe
 8005c16:	f7fd fc6d 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	f7fd fc6a 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8005c20:	20c4      	movs	r0, #196	; 0xc4
 8005c22:	f7fd fc67 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005c26:	2000      	movs	r0, #0
 8005c28:	f7fd fc64 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8005c2c:	20cd      	movs	r0, #205	; 0xcd
 8005c2e:	f7fd fc61 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005c32:	2000      	movs	r0, #0
 8005c34:	f7fd fc5e 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8005c38:	20d3      	movs	r0, #211	; 0xd3
 8005c3a:	f7fd fc5b 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005c3e:	2000      	movs	r0, #0
 8005c40:	f7fd fc58 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8005c44:	20dc      	movs	r0, #220	; 0xdc
 8005c46:	f7fd fc55 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	f7fd fc52 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8005c50:	20f3      	movs	r0, #243	; 0xf3
 8005c52:	f7fd fc4f 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005c56:	2000      	movs	r0, #0
 8005c58:	f7fd fc4c 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 8005c5c:	20e6      	movs	r0, #230	; 0xe6
 8005c5e:	f7fd fc25 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 8005c62:	2011      	movs	r0, #17
 8005c64:	f7fd fc46 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005c68:	2000      	movs	r0, #0
 8005c6a:	f7fd fc43 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8005c6e:	2034      	movs	r0, #52	; 0x34
 8005c70:	f7fd fc40 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005c74:	2000      	movs	r0, #0
 8005c76:	f7fd fc3d 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8005c7a:	2056      	movs	r0, #86	; 0x56
 8005c7c:	f7fd fc3a 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005c80:	2000      	movs	r0, #0
 8005c82:	f7fd fc37 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8005c86:	2076      	movs	r0, #118	; 0x76
 8005c88:	f7fd fc34 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	f7fd fc31 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8005c92:	2077      	movs	r0, #119	; 0x77
 8005c94:	f7fd fc2e 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005c98:	2000      	movs	r0, #0
 8005c9a:	f7fd fc2b 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8005c9e:	2066      	movs	r0, #102	; 0x66
 8005ca0:	f7fd fc28 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	f7fd fc25 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8005caa:	2088      	movs	r0, #136	; 0x88
 8005cac:	f7fd fc22 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	f7fd fc1f 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8005cb6:	2099      	movs	r0, #153	; 0x99
 8005cb8:	f7fd fc1c 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005cbc:	2000      	movs	r0, #0
 8005cbe:	f7fd fc19 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8005cc2:	20bb      	movs	r0, #187	; 0xbb
 8005cc4:	f7fd fc16 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005cc8:	2000      	movs	r0, #0
 8005cca:	f7fd fc13 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8005cce:	2099      	movs	r0, #153	; 0x99
 8005cd0:	f7fd fc10 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	f7fd fc0d 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8005cda:	2066      	movs	r0, #102	; 0x66
 8005cdc:	f7fd fc0a 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	f7fd fc07 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8005ce6:	2055      	movs	r0, #85	; 0x55
 8005ce8:	f7fd fc04 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005cec:	2000      	movs	r0, #0
 8005cee:	f7fd fc01 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8005cf2:	2055      	movs	r0, #85	; 0x55
 8005cf4:	f7fd fbfe 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	f7fd fbfb 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8005cfe:	2045      	movs	r0, #69	; 0x45
 8005d00:	f7fd fbf8 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005d04:	2000      	movs	r0, #0
 8005d06:	f7fd fbf5 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8005d0a:	2043      	movs	r0, #67	; 0x43
 8005d0c:	f7fd fbf2 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005d10:	2000      	movs	r0, #0
 8005d12:	f7fd fbef 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8005d16:	2044      	movs	r0, #68	; 0x44
 8005d18:	f7fd fbec 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	f7fd fbe9 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 8005d22:	20e7      	movs	r0, #231	; 0xe7
 8005d24:	f7fd fbc2 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8005d28:	2032      	movs	r0, #50	; 0x32
 8005d2a:	f7fd fbe3 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005d2e:	2000      	movs	r0, #0
 8005d30:	f7fd fbe0 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8005d34:	2055      	movs	r0, #85	; 0x55
 8005d36:	f7fd fbdd 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	f7fd fbda 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8005d40:	2076      	movs	r0, #118	; 0x76
 8005d42:	f7fd fbd7 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005d46:	2000      	movs	r0, #0
 8005d48:	f7fd fbd4 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8005d4c:	2066      	movs	r0, #102	; 0x66
 8005d4e:	f7fd fbd1 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005d52:	2000      	movs	r0, #0
 8005d54:	f7fd fbce 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8005d58:	2067      	movs	r0, #103	; 0x67
 8005d5a:	f7fd fbcb 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005d5e:	2000      	movs	r0, #0
 8005d60:	f7fd fbc8 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8005d64:	2067      	movs	r0, #103	; 0x67
 8005d66:	f7fd fbc5 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005d6a:	2000      	movs	r0, #0
 8005d6c:	f7fd fbc2 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8005d70:	2087      	movs	r0, #135	; 0x87
 8005d72:	f7fd fbbf 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005d76:	2000      	movs	r0, #0
 8005d78:	f7fd fbbc 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8005d7c:	2099      	movs	r0, #153	; 0x99
 8005d7e:	f7fd fbb9 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005d82:	2000      	movs	r0, #0
 8005d84:	f7fd fbb6 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8005d88:	20bb      	movs	r0, #187	; 0xbb
 8005d8a:	f7fd fbb3 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005d8e:	2000      	movs	r0, #0
 8005d90:	f7fd fbb0 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8005d94:	2099      	movs	r0, #153	; 0x99
 8005d96:	f7fd fbad 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	f7fd fbaa 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8005da0:	2077      	movs	r0, #119	; 0x77
 8005da2:	f7fd fba7 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005da6:	2000      	movs	r0, #0
 8005da8:	f7fd fba4 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8005dac:	2044      	movs	r0, #68	; 0x44
 8005dae:	f7fd fba1 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005db2:	2000      	movs	r0, #0
 8005db4:	f7fd fb9e 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8005db8:	2056      	movs	r0, #86	; 0x56
 8005dba:	f7fd fb9b 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005dbe:	2000      	movs	r0, #0
 8005dc0:	f7fd fb98 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8005dc4:	2023      	movs	r0, #35	; 0x23
 8005dc6:	f7fd fb95 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005dca:	2000      	movs	r0, #0
 8005dcc:	f7fd fb92 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8005dd0:	2033      	movs	r0, #51	; 0x33
 8005dd2:	f7fd fb8f 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005dd6:	2000      	movs	r0, #0
 8005dd8:	f7fd fb8c 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8005ddc:	2045      	movs	r0, #69	; 0x45
 8005dde:	f7fd fb89 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005de2:	2000      	movs	r0, #0
 8005de4:	f7fd fb86 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8005de8:	20e8      	movs	r0, #232	; 0xe8
 8005dea:	f7fd fb5f 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005dee:	2000      	movs	r0, #0
 8005df0:	f7fd fb80 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005df4:	2000      	movs	r0, #0
 8005df6:	f7fd fb7d 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8005dfa:	2099      	movs	r0, #153	; 0x99
 8005dfc:	f7fd fb7a 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005e00:	2000      	movs	r0, #0
 8005e02:	f7fd fb77 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8005e06:	2087      	movs	r0, #135	; 0x87
 8005e08:	f7fd fb74 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	f7fd fb71 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8005e12:	2088      	movs	r0, #136	; 0x88
 8005e14:	f7fd fb6e 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005e18:	2000      	movs	r0, #0
 8005e1a:	f7fd fb6b 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8005e1e:	2077      	movs	r0, #119	; 0x77
 8005e20:	f7fd fb68 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005e24:	2000      	movs	r0, #0
 8005e26:	f7fd fb65 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8005e2a:	2066      	movs	r0, #102	; 0x66
 8005e2c:	f7fd fb62 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005e30:	2000      	movs	r0, #0
 8005e32:	f7fd fb5f 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8005e36:	2088      	movs	r0, #136	; 0x88
 8005e38:	f7fd fb5c 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	f7fd fb59 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 8005e42:	20aa      	movs	r0, #170	; 0xaa
 8005e44:	f7fd fb56 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005e48:	2000      	movs	r0, #0
 8005e4a:	f7fd fb53 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8005e4e:	20bb      	movs	r0, #187	; 0xbb
 8005e50:	f7fd fb50 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005e54:	2000      	movs	r0, #0
 8005e56:	f7fd fb4d 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8005e5a:	2099      	movs	r0, #153	; 0x99
 8005e5c:	f7fd fb4a 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005e60:	2000      	movs	r0, #0
 8005e62:	f7fd fb47 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8005e66:	2066      	movs	r0, #102	; 0x66
 8005e68:	f7fd fb44 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	f7fd fb41 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8005e72:	2055      	movs	r0, #85	; 0x55
 8005e74:	f7fd fb3e 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005e78:	2000      	movs	r0, #0
 8005e7a:	f7fd fb3b 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8005e7e:	2055      	movs	r0, #85	; 0x55
 8005e80:	f7fd fb38 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005e84:	2000      	movs	r0, #0
 8005e86:	f7fd fb35 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8005e8a:	2044      	movs	r0, #68	; 0x44
 8005e8c:	f7fd fb32 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005e90:	2000      	movs	r0, #0
 8005e92:	f7fd fb2f 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8005e96:	2044      	movs	r0, #68	; 0x44
 8005e98:	f7fd fb2c 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	f7fd fb29 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8005ea2:	2055      	movs	r0, #85	; 0x55
 8005ea4:	f7fd fb26 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005ea8:	2000      	movs	r0, #0
 8005eaa:	f7fd fb23 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 8005eae:	20e9      	movs	r0, #233	; 0xe9
 8005eb0:	f7fd fafc 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8005eb4:	20aa      	movs	r0, #170	; 0xaa
 8005eb6:	f7fd fb1d 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005eba:	2000      	movs	r0, #0
 8005ebc:	f7fd fb1a 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	f7fd fb17 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	f7fd fb14 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 8005ecc:	2000      	movs	r0, #0
 8005ece:	f7fd faed 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8005ed2:	20aa      	movs	r0, #170	; 0xaa
 8005ed4:	f7fd fb0e 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8005ed8:	20cf      	movs	r0, #207	; 0xcf
 8005eda:	f7fd fae7 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005ede:	2000      	movs	r0, #0
 8005ee0:	f7fd fb08 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	f7fd fb05 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005eea:	2000      	movs	r0, #0
 8005eec:	f7fd fb02 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	f7fd faff 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005ef6:	2000      	movs	r0, #0
 8005ef8:	f7fd fafc 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005efc:	2000      	movs	r0, #0
 8005efe:	f7fd faf9 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005f02:	2000      	movs	r0, #0
 8005f04:	f7fd faf6 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005f08:	2000      	movs	r0, #0
 8005f0a:	f7fd faf3 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005f0e:	2000      	movs	r0, #0
 8005f10:	f7fd faf0 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005f14:	2000      	movs	r0, #0
 8005f16:	f7fd faed 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005f1a:	2000      	movs	r0, #0
 8005f1c:	f7fd faea 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005f20:	2000      	movs	r0, #0
 8005f22:	f7fd fae7 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005f26:	2000      	movs	r0, #0
 8005f28:	f7fd fae4 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	f7fd fae1 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005f32:	2000      	movs	r0, #0
 8005f34:	f7fd fade 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005f38:	2000      	movs	r0, #0
 8005f3a:	f7fd fadb 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005f3e:	2000      	movs	r0, #0
 8005f40:	f7fd fad8 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 8005f44:	20f0      	movs	r0, #240	; 0xf0
 8005f46:	f7fd fab1 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	f7fd fad2 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8005f50:	2050      	movs	r0, #80	; 0x50
 8005f52:	f7fd facf 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005f56:	2000      	movs	r0, #0
 8005f58:	f7fd facc 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	f7fd fac9 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005f62:	2000      	movs	r0, #0
 8005f64:	f7fd fac6 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8005f68:	20f3      	movs	r0, #243	; 0xf3
 8005f6a:	f7fd fa9f 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005f6e:	2000      	movs	r0, #0
 8005f70:	f7fd fac0 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 8005f74:	20f9      	movs	r0, #249	; 0xf9
 8005f76:	f7fd fa99 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 8005f7a:	2006      	movs	r0, #6
 8005f7c:	f7fd faba 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8005f80:	2010      	movs	r0, #16
 8005f82:	f7fd fab7 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8005f86:	2029      	movs	r0, #41	; 0x29
 8005f88:	f7fd fab4 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	f7fd fab1 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 8005f92:	203a      	movs	r0, #58	; 0x3a
 8005f94:	f7fd fa8a 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8005f98:	2055      	movs	r0, #85	; 0x55
 8005f9a:	f7fd faab 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 8005f9e:	2011      	movs	r0, #17
 8005fa0:	f7fd fa84 	bl	80034ac <LCD_WR_REG>
		HAL_Delay(100);
 8005fa4:	2064      	movs	r0, #100	; 0x64
 8005fa6:	f7fa fd6b 	bl	8000a80 <HAL_Delay>
		LCD_WR_REG(0x29);
 8005faa:	2029      	movs	r0, #41	; 0x29
 8005fac:	f7fd fa7e 	bl	80034ac <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8005fb0:	2035      	movs	r0, #53	; 0x35
 8005fb2:	f7fd fa7b 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	f7fd fa9c 	bl	80034f4 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 8005fbc:	2051      	movs	r0, #81	; 0x51
 8005fbe:	f7fd fa75 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 8005fc2:	20ff      	movs	r0, #255	; 0xff
 8005fc4:	f7fd fa96 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8005fc8:	2053      	movs	r0, #83	; 0x53
 8005fca:	f7fd fa6f 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 8005fce:	202c      	movs	r0, #44	; 0x2c
 8005fd0:	f7fd fa90 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 8005fd4:	2055      	movs	r0, #85	; 0x55
 8005fd6:	f7fd fa69 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 8005fda:	2082      	movs	r0, #130	; 0x82
 8005fdc:	f7fd fa8a 	bl	80034f4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8005fe0:	202c      	movs	r0, #44	; 0x2c
 8005fe2:	f7fd fa63 	bl	80034ac <LCD_WR_REG>
 8005fe6:	f002 bca1 	b.w	800892c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 8005fea:	4b04      	ldr	r3, [pc, #16]	; (8005ffc <LCD_Init+0x1504>)
 8005fec:	889b      	ldrh	r3, [r3, #4]
 8005fee:	f245 5210 	movw	r2, #21776	; 0x5510
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	f040 8782 	bne.w	8006efc <LCD_Init+0x2404>
 8005ff8:	e002      	b.n	8006000 <LCD_Init+0x1508>
 8005ffa:	bf00      	nop
 8005ffc:	20000e18 	.word	0x20000e18
		LCD_WriteReg(0xF000, 0x55);
 8006000:	2155      	movs	r1, #85	; 0x55
 8006002:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8006006:	f7fd fadd 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 800600a:	21aa      	movs	r1, #170	; 0xaa
 800600c:	f24f 0001 	movw	r0, #61441	; 0xf001
 8006010:	f7fd fad8 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8006014:	2152      	movs	r1, #82	; 0x52
 8006016:	f24f 0002 	movw	r0, #61442	; 0xf002
 800601a:	f7fd fad3 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 800601e:	2108      	movs	r1, #8
 8006020:	f24f 0003 	movw	r0, #61443	; 0xf003
 8006024:	f7fd face 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8006028:	2101      	movs	r1, #1
 800602a:	f24f 0004 	movw	r0, #61444	; 0xf004
 800602e:	f7fd fac9 	bl	80035c4 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 8006032:	210d      	movs	r1, #13
 8006034:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8006038:	f7fd fac4 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 800603c:	210d      	movs	r1, #13
 800603e:	f24b 0001 	movw	r0, #45057	; 0xb001
 8006042:	f7fd fabf 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 8006046:	210d      	movs	r1, #13
 8006048:	f24b 0002 	movw	r0, #45058	; 0xb002
 800604c:	f7fd faba 	bl	80035c4 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 8006050:	2134      	movs	r1, #52	; 0x34
 8006052:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8006056:	f7fd fab5 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 800605a:	2134      	movs	r1, #52	; 0x34
 800605c:	f24b 6001 	movw	r0, #46593	; 0xb601
 8006060:	f7fd fab0 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 8006064:	2134      	movs	r1, #52	; 0x34
 8006066:	f24b 6002 	movw	r0, #46594	; 0xb602
 800606a:	f7fd faab 	bl	80035c4 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 800606e:	210d      	movs	r1, #13
 8006070:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8006074:	f7fd faa6 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8006078:	210d      	movs	r1, #13
 800607a:	f24b 1001 	movw	r0, #45313	; 0xb101
 800607e:	f7fd faa1 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 8006082:	210d      	movs	r1, #13
 8006084:	f24b 1002 	movw	r0, #45314	; 0xb102
 8006088:	f7fd fa9c 	bl	80035c4 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 800608c:	2134      	movs	r1, #52	; 0x34
 800608e:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8006092:	f7fd fa97 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 8006096:	2134      	movs	r1, #52	; 0x34
 8006098:	f24b 7001 	movw	r0, #46849	; 0xb701
 800609c:	f7fd fa92 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 80060a0:	2134      	movs	r1, #52	; 0x34
 80060a2:	f24b 7002 	movw	r0, #46850	; 0xb702
 80060a6:	f7fd fa8d 	bl	80035c4 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 80060aa:	2100      	movs	r1, #0
 80060ac:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 80060b0:	f7fd fa88 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 80060b4:	2100      	movs	r1, #0
 80060b6:	f24b 2001 	movw	r0, #45569	; 0xb201
 80060ba:	f7fd fa83 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 80060be:	2100      	movs	r1, #0
 80060c0:	f24b 2002 	movw	r0, #45570	; 0xb202
 80060c4:	f7fd fa7e 	bl	80035c4 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 80060c8:	2124      	movs	r1, #36	; 0x24
 80060ca:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80060ce:	f7fd fa79 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 80060d2:	2124      	movs	r1, #36	; 0x24
 80060d4:	f64b 0001 	movw	r0, #47105	; 0xb801
 80060d8:	f7fd fa74 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 80060dc:	2124      	movs	r1, #36	; 0x24
 80060de:	f64b 0002 	movw	r0, #47106	; 0xb802
 80060e2:	f7fd fa6f 	bl	80035c4 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 80060e6:	2101      	movs	r1, #1
 80060e8:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 80060ec:	f7fd fa6a 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 80060f0:	210f      	movs	r1, #15
 80060f2:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 80060f6:	f7fd fa65 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 80060fa:	210f      	movs	r1, #15
 80060fc:	f24b 3001 	movw	r0, #45825	; 0xb301
 8006100:	f7fd fa60 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 8006104:	210f      	movs	r1, #15
 8006106:	f24b 3002 	movw	r0, #45826	; 0xb302
 800610a:	f7fd fa5b 	bl	80035c4 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 800610e:	2134      	movs	r1, #52	; 0x34
 8006110:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8006114:	f7fd fa56 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8006118:	2134      	movs	r1, #52	; 0x34
 800611a:	f64b 1001 	movw	r0, #47361	; 0xb901
 800611e:	f7fd fa51 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 8006122:	2134      	movs	r1, #52	; 0x34
 8006124:	f64b 1002 	movw	r0, #47362	; 0xb902
 8006128:	f7fd fa4c 	bl	80035c4 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 800612c:	2108      	movs	r1, #8
 800612e:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8006132:	f7fd fa47 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 8006136:	2108      	movs	r1, #8
 8006138:	f24b 5001 	movw	r0, #46337	; 0xb501
 800613c:	f7fd fa42 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 8006140:	2108      	movs	r1, #8
 8006142:	f24b 5002 	movw	r0, #46338	; 0xb502
 8006146:	f7fd fa3d 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 800614a:	2103      	movs	r1, #3
 800614c:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8006150:	f7fd fa38 	bl	80035c4 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 8006154:	2124      	movs	r1, #36	; 0x24
 8006156:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 800615a:	f7fd fa33 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 800615e:	2124      	movs	r1, #36	; 0x24
 8006160:	f64b 2001 	movw	r0, #47617	; 0xba01
 8006164:	f7fd fa2e 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8006168:	2124      	movs	r1, #36	; 0x24
 800616a:	f64b 2002 	movw	r0, #47618	; 0xba02
 800616e:	f7fd fa29 	bl	80035c4 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 8006172:	2100      	movs	r1, #0
 8006174:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8006178:	f7fd fa24 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 800617c:	2178      	movs	r1, #120	; 0x78
 800617e:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8006182:	f7fd fa1f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8006186:	2100      	movs	r1, #0
 8006188:	f64b 4002 	movw	r0, #48130	; 0xbc02
 800618c:	f7fd fa1a 	bl	80035c4 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8006190:	2100      	movs	r1, #0
 8006192:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8006196:	f7fd fa15 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 800619a:	2178      	movs	r1, #120	; 0x78
 800619c:	f64b 5001 	movw	r0, #48385	; 0xbd01
 80061a0:	f7fd fa10 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 80061a4:	2100      	movs	r1, #0
 80061a6:	f64b 5002 	movw	r0, #48386	; 0xbd02
 80061aa:	f7fd fa0b 	bl	80035c4 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 80061ae:	2100      	movs	r1, #0
 80061b0:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 80061b4:	f7fd fa06 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 80061b8:	2164      	movs	r1, #100	; 0x64
 80061ba:	f64b 6001 	movw	r0, #48641	; 0xbe01
 80061be:	f7fd fa01 	bl	80035c4 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 80061c2:	2100      	movs	r1, #0
 80061c4:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 80061c8:	f7fd f9fc 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 80061cc:	2133      	movs	r1, #51	; 0x33
 80061ce:	f24d 1001 	movw	r0, #53505	; 0xd101
 80061d2:	f7fd f9f7 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 80061d6:	2100      	movs	r1, #0
 80061d8:	f24d 1002 	movw	r0, #53506	; 0xd102
 80061dc:	f7fd f9f2 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 80061e0:	2134      	movs	r1, #52	; 0x34
 80061e2:	f24d 1003 	movw	r0, #53507	; 0xd103
 80061e6:	f7fd f9ed 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 80061ea:	2100      	movs	r1, #0
 80061ec:	f24d 1004 	movw	r0, #53508	; 0xd104
 80061f0:	f7fd f9e8 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 80061f4:	213a      	movs	r1, #58	; 0x3a
 80061f6:	f24d 1005 	movw	r0, #53509	; 0xd105
 80061fa:	f7fd f9e3 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 80061fe:	2100      	movs	r1, #0
 8006200:	f24d 1006 	movw	r0, #53510	; 0xd106
 8006204:	f7fd f9de 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8006208:	214a      	movs	r1, #74	; 0x4a
 800620a:	f24d 1007 	movw	r0, #53511	; 0xd107
 800620e:	f7fd f9d9 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 8006212:	2100      	movs	r1, #0
 8006214:	f24d 1008 	movw	r0, #53512	; 0xd108
 8006218:	f7fd f9d4 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 800621c:	215c      	movs	r1, #92	; 0x5c
 800621e:	f24d 1009 	movw	r0, #53513	; 0xd109
 8006222:	f7fd f9cf 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 8006226:	2100      	movs	r1, #0
 8006228:	f24d 100a 	movw	r0, #53514	; 0xd10a
 800622c:	f7fd f9ca 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 8006230:	2181      	movs	r1, #129	; 0x81
 8006232:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8006236:	f7fd f9c5 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 800623a:	2100      	movs	r1, #0
 800623c:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8006240:	f7fd f9c0 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 8006244:	21a6      	movs	r1, #166	; 0xa6
 8006246:	f24d 100d 	movw	r0, #53517	; 0xd10d
 800624a:	f7fd f9bb 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 800624e:	2100      	movs	r1, #0
 8006250:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8006254:	f7fd f9b6 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 8006258:	21e5      	movs	r1, #229	; 0xe5
 800625a:	f24d 100f 	movw	r0, #53519	; 0xd10f
 800625e:	f7fd f9b1 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 8006262:	2101      	movs	r1, #1
 8006264:	f24d 1010 	movw	r0, #53520	; 0xd110
 8006268:	f7fd f9ac 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 800626c:	2113      	movs	r1, #19
 800626e:	f24d 1011 	movw	r0, #53521	; 0xd111
 8006272:	f7fd f9a7 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 8006276:	2101      	movs	r1, #1
 8006278:	f24d 1012 	movw	r0, #53522	; 0xd112
 800627c:	f7fd f9a2 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8006280:	2154      	movs	r1, #84	; 0x54
 8006282:	f24d 1013 	movw	r0, #53523	; 0xd113
 8006286:	f7fd f99d 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 800628a:	2101      	movs	r1, #1
 800628c:	f24d 1014 	movw	r0, #53524	; 0xd114
 8006290:	f7fd f998 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 8006294:	2182      	movs	r1, #130	; 0x82
 8006296:	f24d 1015 	movw	r0, #53525	; 0xd115
 800629a:	f7fd f993 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 800629e:	2101      	movs	r1, #1
 80062a0:	f24d 1016 	movw	r0, #53526	; 0xd116
 80062a4:	f7fd f98e 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 80062a8:	21ca      	movs	r1, #202	; 0xca
 80062aa:	f24d 1017 	movw	r0, #53527	; 0xd117
 80062ae:	f7fd f989 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 80062b2:	2102      	movs	r1, #2
 80062b4:	f24d 1018 	movw	r0, #53528	; 0xd118
 80062b8:	f7fd f984 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 80062bc:	2100      	movs	r1, #0
 80062be:	f24d 1019 	movw	r0, #53529	; 0xd119
 80062c2:	f7fd f97f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 80062c6:	2102      	movs	r1, #2
 80062c8:	f24d 101a 	movw	r0, #53530	; 0xd11a
 80062cc:	f7fd f97a 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 80062d0:	2101      	movs	r1, #1
 80062d2:	f24d 101b 	movw	r0, #53531	; 0xd11b
 80062d6:	f7fd f975 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 80062da:	2102      	movs	r1, #2
 80062dc:	f24d 101c 	movw	r0, #53532	; 0xd11c
 80062e0:	f7fd f970 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 80062e4:	2134      	movs	r1, #52	; 0x34
 80062e6:	f24d 101d 	movw	r0, #53533	; 0xd11d
 80062ea:	f7fd f96b 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 80062ee:	2102      	movs	r1, #2
 80062f0:	f24d 101e 	movw	r0, #53534	; 0xd11e
 80062f4:	f7fd f966 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 80062f8:	2167      	movs	r1, #103	; 0x67
 80062fa:	f24d 101f 	movw	r0, #53535	; 0xd11f
 80062fe:	f7fd f961 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 8006302:	2102      	movs	r1, #2
 8006304:	f24d 1020 	movw	r0, #53536	; 0xd120
 8006308:	f7fd f95c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 800630c:	2184      	movs	r1, #132	; 0x84
 800630e:	f24d 1021 	movw	r0, #53537	; 0xd121
 8006312:	f7fd f957 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 8006316:	2102      	movs	r1, #2
 8006318:	f24d 1022 	movw	r0, #53538	; 0xd122
 800631c:	f7fd f952 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 8006320:	21a4      	movs	r1, #164	; 0xa4
 8006322:	f24d 1023 	movw	r0, #53539	; 0xd123
 8006326:	f7fd f94d 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 800632a:	2102      	movs	r1, #2
 800632c:	f24d 1024 	movw	r0, #53540	; 0xd124
 8006330:	f7fd f948 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 8006334:	21b7      	movs	r1, #183	; 0xb7
 8006336:	f24d 1025 	movw	r0, #53541	; 0xd125
 800633a:	f7fd f943 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 800633e:	2102      	movs	r1, #2
 8006340:	f24d 1026 	movw	r0, #53542	; 0xd126
 8006344:	f7fd f93e 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8006348:	21cf      	movs	r1, #207	; 0xcf
 800634a:	f24d 1027 	movw	r0, #53543	; 0xd127
 800634e:	f7fd f939 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 8006352:	2102      	movs	r1, #2
 8006354:	f24d 1028 	movw	r0, #53544	; 0xd128
 8006358:	f7fd f934 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 800635c:	21de      	movs	r1, #222	; 0xde
 800635e:	f24d 1029 	movw	r0, #53545	; 0xd129
 8006362:	f7fd f92f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 8006366:	2102      	movs	r1, #2
 8006368:	f24d 102a 	movw	r0, #53546	; 0xd12a
 800636c:	f7fd f92a 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8006370:	21f2      	movs	r1, #242	; 0xf2
 8006372:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8006376:	f7fd f925 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 800637a:	2102      	movs	r1, #2
 800637c:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8006380:	f7fd f920 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 8006384:	21fe      	movs	r1, #254	; 0xfe
 8006386:	f24d 102d 	movw	r0, #53549	; 0xd12d
 800638a:	f7fd f91b 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 800638e:	2103      	movs	r1, #3
 8006390:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8006394:	f7fd f916 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8006398:	2110      	movs	r1, #16
 800639a:	f24d 102f 	movw	r0, #53551	; 0xd12f
 800639e:	f7fd f911 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 80063a2:	2103      	movs	r1, #3
 80063a4:	f24d 1030 	movw	r0, #53552	; 0xd130
 80063a8:	f7fd f90c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 80063ac:	2133      	movs	r1, #51	; 0x33
 80063ae:	f24d 1031 	movw	r0, #53553	; 0xd131
 80063b2:	f7fd f907 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 80063b6:	2103      	movs	r1, #3
 80063b8:	f24d 1032 	movw	r0, #53554	; 0xd132
 80063bc:	f7fd f902 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 80063c0:	216d      	movs	r1, #109	; 0x6d
 80063c2:	f24d 1033 	movw	r0, #53555	; 0xd133
 80063c6:	f7fd f8fd 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 80063ca:	2100      	movs	r1, #0
 80063cc:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 80063d0:	f7fd f8f8 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 80063d4:	2133      	movs	r1, #51	; 0x33
 80063d6:	f24d 2001 	movw	r0, #53761	; 0xd201
 80063da:	f7fd f8f3 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 80063de:	2100      	movs	r1, #0
 80063e0:	f24d 2002 	movw	r0, #53762	; 0xd202
 80063e4:	f7fd f8ee 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 80063e8:	2134      	movs	r1, #52	; 0x34
 80063ea:	f24d 2003 	movw	r0, #53763	; 0xd203
 80063ee:	f7fd f8e9 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 80063f2:	2100      	movs	r1, #0
 80063f4:	f24d 2004 	movw	r0, #53764	; 0xd204
 80063f8:	f7fd f8e4 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 80063fc:	213a      	movs	r1, #58	; 0x3a
 80063fe:	f24d 2005 	movw	r0, #53765	; 0xd205
 8006402:	f7fd f8df 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 8006406:	2100      	movs	r1, #0
 8006408:	f24d 2006 	movw	r0, #53766	; 0xd206
 800640c:	f7fd f8da 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8006410:	214a      	movs	r1, #74	; 0x4a
 8006412:	f24d 2007 	movw	r0, #53767	; 0xd207
 8006416:	f7fd f8d5 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 800641a:	2100      	movs	r1, #0
 800641c:	f24d 2008 	movw	r0, #53768	; 0xd208
 8006420:	f7fd f8d0 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 8006424:	215c      	movs	r1, #92	; 0x5c
 8006426:	f24d 2009 	movw	r0, #53769	; 0xd209
 800642a:	f7fd f8cb 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 800642e:	2100      	movs	r1, #0
 8006430:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8006434:	f7fd f8c6 	bl	80035c4 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8006438:	2181      	movs	r1, #129	; 0x81
 800643a:	f24d 200b 	movw	r0, #53771	; 0xd20b
 800643e:	f7fd f8c1 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 8006442:	2100      	movs	r1, #0
 8006444:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8006448:	f7fd f8bc 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 800644c:	21a6      	movs	r1, #166	; 0xa6
 800644e:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8006452:	f7fd f8b7 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 8006456:	2100      	movs	r1, #0
 8006458:	f24d 200e 	movw	r0, #53774	; 0xd20e
 800645c:	f7fd f8b2 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8006460:	21e5      	movs	r1, #229	; 0xe5
 8006462:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8006466:	f7fd f8ad 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 800646a:	2101      	movs	r1, #1
 800646c:	f24d 2010 	movw	r0, #53776	; 0xd210
 8006470:	f7fd f8a8 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 8006474:	2113      	movs	r1, #19
 8006476:	f24d 2011 	movw	r0, #53777	; 0xd211
 800647a:	f7fd f8a3 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 800647e:	2101      	movs	r1, #1
 8006480:	f24d 2012 	movw	r0, #53778	; 0xd212
 8006484:	f7fd f89e 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8006488:	2154      	movs	r1, #84	; 0x54
 800648a:	f24d 2013 	movw	r0, #53779	; 0xd213
 800648e:	f7fd f899 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 8006492:	2101      	movs	r1, #1
 8006494:	f24d 2014 	movw	r0, #53780	; 0xd214
 8006498:	f7fd f894 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 800649c:	2182      	movs	r1, #130	; 0x82
 800649e:	f24d 2015 	movw	r0, #53781	; 0xd215
 80064a2:	f7fd f88f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 80064a6:	2101      	movs	r1, #1
 80064a8:	f24d 2016 	movw	r0, #53782	; 0xd216
 80064ac:	f7fd f88a 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 80064b0:	21ca      	movs	r1, #202	; 0xca
 80064b2:	f24d 2017 	movw	r0, #53783	; 0xd217
 80064b6:	f7fd f885 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 80064ba:	2102      	movs	r1, #2
 80064bc:	f24d 2018 	movw	r0, #53784	; 0xd218
 80064c0:	f7fd f880 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 80064c4:	2100      	movs	r1, #0
 80064c6:	f24d 2019 	movw	r0, #53785	; 0xd219
 80064ca:	f7fd f87b 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 80064ce:	2102      	movs	r1, #2
 80064d0:	f24d 201a 	movw	r0, #53786	; 0xd21a
 80064d4:	f7fd f876 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 80064d8:	2101      	movs	r1, #1
 80064da:	f24d 201b 	movw	r0, #53787	; 0xd21b
 80064de:	f7fd f871 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 80064e2:	2102      	movs	r1, #2
 80064e4:	f24d 201c 	movw	r0, #53788	; 0xd21c
 80064e8:	f7fd f86c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 80064ec:	2134      	movs	r1, #52	; 0x34
 80064ee:	f24d 201d 	movw	r0, #53789	; 0xd21d
 80064f2:	f7fd f867 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 80064f6:	2102      	movs	r1, #2
 80064f8:	f24d 201e 	movw	r0, #53790	; 0xd21e
 80064fc:	f7fd f862 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8006500:	2167      	movs	r1, #103	; 0x67
 8006502:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8006506:	f7fd f85d 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 800650a:	2102      	movs	r1, #2
 800650c:	f24d 2020 	movw	r0, #53792	; 0xd220
 8006510:	f7fd f858 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 8006514:	2184      	movs	r1, #132	; 0x84
 8006516:	f24d 2021 	movw	r0, #53793	; 0xd221
 800651a:	f7fd f853 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 800651e:	2102      	movs	r1, #2
 8006520:	f24d 2022 	movw	r0, #53794	; 0xd222
 8006524:	f7fd f84e 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8006528:	21a4      	movs	r1, #164	; 0xa4
 800652a:	f24d 2023 	movw	r0, #53795	; 0xd223
 800652e:	f7fd f849 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 8006532:	2102      	movs	r1, #2
 8006534:	f24d 2024 	movw	r0, #53796	; 0xd224
 8006538:	f7fd f844 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 800653c:	21b7      	movs	r1, #183	; 0xb7
 800653e:	f24d 2025 	movw	r0, #53797	; 0xd225
 8006542:	f7fd f83f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 8006546:	2102      	movs	r1, #2
 8006548:	f24d 2026 	movw	r0, #53798	; 0xd226
 800654c:	f7fd f83a 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8006550:	21cf      	movs	r1, #207	; 0xcf
 8006552:	f24d 2027 	movw	r0, #53799	; 0xd227
 8006556:	f7fd f835 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 800655a:	2102      	movs	r1, #2
 800655c:	f24d 2028 	movw	r0, #53800	; 0xd228
 8006560:	f7fd f830 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 8006564:	21de      	movs	r1, #222	; 0xde
 8006566:	f24d 2029 	movw	r0, #53801	; 0xd229
 800656a:	f7fd f82b 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 800656e:	2102      	movs	r1, #2
 8006570:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8006574:	f7fd f826 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8006578:	21f2      	movs	r1, #242	; 0xf2
 800657a:	f24d 202b 	movw	r0, #53803	; 0xd22b
 800657e:	f7fd f821 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 8006582:	2102      	movs	r1, #2
 8006584:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8006588:	f7fd f81c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 800658c:	21fe      	movs	r1, #254	; 0xfe
 800658e:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8006592:	f7fd f817 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8006596:	2103      	movs	r1, #3
 8006598:	f24d 202e 	movw	r0, #53806	; 0xd22e
 800659c:	f7fd f812 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 80065a0:	2110      	movs	r1, #16
 80065a2:	f24d 202f 	movw	r0, #53807	; 0xd22f
 80065a6:	f7fd f80d 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 80065aa:	2103      	movs	r1, #3
 80065ac:	f24d 2030 	movw	r0, #53808	; 0xd230
 80065b0:	f7fd f808 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 80065b4:	2133      	movs	r1, #51	; 0x33
 80065b6:	f24d 2031 	movw	r0, #53809	; 0xd231
 80065ba:	f7fd f803 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 80065be:	2103      	movs	r1, #3
 80065c0:	f24d 2032 	movw	r0, #53810	; 0xd232
 80065c4:	f7fc fffe 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 80065c8:	216d      	movs	r1, #109	; 0x6d
 80065ca:	f24d 2033 	movw	r0, #53811	; 0xd233
 80065ce:	f7fc fff9 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 80065d2:	2100      	movs	r1, #0
 80065d4:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 80065d8:	f7fc fff4 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 80065dc:	2133      	movs	r1, #51	; 0x33
 80065de:	f24d 3001 	movw	r0, #54017	; 0xd301
 80065e2:	f7fc ffef 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 80065e6:	2100      	movs	r1, #0
 80065e8:	f24d 3002 	movw	r0, #54018	; 0xd302
 80065ec:	f7fc ffea 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 80065f0:	2134      	movs	r1, #52	; 0x34
 80065f2:	f24d 3003 	movw	r0, #54019	; 0xd303
 80065f6:	f7fc ffe5 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 80065fa:	2100      	movs	r1, #0
 80065fc:	f24d 3004 	movw	r0, #54020	; 0xd304
 8006600:	f7fc ffe0 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 8006604:	213a      	movs	r1, #58	; 0x3a
 8006606:	f24d 3005 	movw	r0, #54021	; 0xd305
 800660a:	f7fc ffdb 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 800660e:	2100      	movs	r1, #0
 8006610:	f24d 3006 	movw	r0, #54022	; 0xd306
 8006614:	f7fc ffd6 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8006618:	214a      	movs	r1, #74	; 0x4a
 800661a:	f24d 3007 	movw	r0, #54023	; 0xd307
 800661e:	f7fc ffd1 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8006622:	2100      	movs	r1, #0
 8006624:	f24d 3008 	movw	r0, #54024	; 0xd308
 8006628:	f7fc ffcc 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 800662c:	215c      	movs	r1, #92	; 0x5c
 800662e:	f24d 3009 	movw	r0, #54025	; 0xd309
 8006632:	f7fc ffc7 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8006636:	2100      	movs	r1, #0
 8006638:	f24d 300a 	movw	r0, #54026	; 0xd30a
 800663c:	f7fc ffc2 	bl	80035c4 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8006640:	2181      	movs	r1, #129	; 0x81
 8006642:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8006646:	f7fc ffbd 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 800664a:	2100      	movs	r1, #0
 800664c:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8006650:	f7fc ffb8 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8006654:	21a6      	movs	r1, #166	; 0xa6
 8006656:	f24d 300d 	movw	r0, #54029	; 0xd30d
 800665a:	f7fc ffb3 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 800665e:	2100      	movs	r1, #0
 8006660:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8006664:	f7fc ffae 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8006668:	21e5      	movs	r1, #229	; 0xe5
 800666a:	f24d 300f 	movw	r0, #54031	; 0xd30f
 800666e:	f7fc ffa9 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8006672:	2101      	movs	r1, #1
 8006674:	f24d 3010 	movw	r0, #54032	; 0xd310
 8006678:	f7fc ffa4 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 800667c:	2113      	movs	r1, #19
 800667e:	f24d 3011 	movw	r0, #54033	; 0xd311
 8006682:	f7fc ff9f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8006686:	2101      	movs	r1, #1
 8006688:	f24d 3012 	movw	r0, #54034	; 0xd312
 800668c:	f7fc ff9a 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8006690:	2154      	movs	r1, #84	; 0x54
 8006692:	f24d 3013 	movw	r0, #54035	; 0xd313
 8006696:	f7fc ff95 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 800669a:	2101      	movs	r1, #1
 800669c:	f24d 3014 	movw	r0, #54036	; 0xd314
 80066a0:	f7fc ff90 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 80066a4:	2182      	movs	r1, #130	; 0x82
 80066a6:	f24d 3015 	movw	r0, #54037	; 0xd315
 80066aa:	f7fc ff8b 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 80066ae:	2101      	movs	r1, #1
 80066b0:	f24d 3016 	movw	r0, #54038	; 0xd316
 80066b4:	f7fc ff86 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 80066b8:	21ca      	movs	r1, #202	; 0xca
 80066ba:	f24d 3017 	movw	r0, #54039	; 0xd317
 80066be:	f7fc ff81 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 80066c2:	2102      	movs	r1, #2
 80066c4:	f24d 3018 	movw	r0, #54040	; 0xd318
 80066c8:	f7fc ff7c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 80066cc:	2100      	movs	r1, #0
 80066ce:	f24d 3019 	movw	r0, #54041	; 0xd319
 80066d2:	f7fc ff77 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 80066d6:	2102      	movs	r1, #2
 80066d8:	f24d 301a 	movw	r0, #54042	; 0xd31a
 80066dc:	f7fc ff72 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 80066e0:	2101      	movs	r1, #1
 80066e2:	f24d 301b 	movw	r0, #54043	; 0xd31b
 80066e6:	f7fc ff6d 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 80066ea:	2102      	movs	r1, #2
 80066ec:	f24d 301c 	movw	r0, #54044	; 0xd31c
 80066f0:	f7fc ff68 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 80066f4:	2134      	movs	r1, #52	; 0x34
 80066f6:	f24d 301d 	movw	r0, #54045	; 0xd31d
 80066fa:	f7fc ff63 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 80066fe:	2102      	movs	r1, #2
 8006700:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8006704:	f7fc ff5e 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8006708:	2167      	movs	r1, #103	; 0x67
 800670a:	f24d 301f 	movw	r0, #54047	; 0xd31f
 800670e:	f7fc ff59 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8006712:	2102      	movs	r1, #2
 8006714:	f24d 3020 	movw	r0, #54048	; 0xd320
 8006718:	f7fc ff54 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 800671c:	2184      	movs	r1, #132	; 0x84
 800671e:	f24d 3021 	movw	r0, #54049	; 0xd321
 8006722:	f7fc ff4f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8006726:	2102      	movs	r1, #2
 8006728:	f24d 3022 	movw	r0, #54050	; 0xd322
 800672c:	f7fc ff4a 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8006730:	21a4      	movs	r1, #164	; 0xa4
 8006732:	f24d 3023 	movw	r0, #54051	; 0xd323
 8006736:	f7fc ff45 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 800673a:	2102      	movs	r1, #2
 800673c:	f24d 3024 	movw	r0, #54052	; 0xd324
 8006740:	f7fc ff40 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8006744:	21b7      	movs	r1, #183	; 0xb7
 8006746:	f24d 3025 	movw	r0, #54053	; 0xd325
 800674a:	f7fc ff3b 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 800674e:	2102      	movs	r1, #2
 8006750:	f24d 3026 	movw	r0, #54054	; 0xd326
 8006754:	f7fc ff36 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8006758:	21cf      	movs	r1, #207	; 0xcf
 800675a:	f24d 3027 	movw	r0, #54055	; 0xd327
 800675e:	f7fc ff31 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8006762:	2102      	movs	r1, #2
 8006764:	f24d 3028 	movw	r0, #54056	; 0xd328
 8006768:	f7fc ff2c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 800676c:	21de      	movs	r1, #222	; 0xde
 800676e:	f24d 3029 	movw	r0, #54057	; 0xd329
 8006772:	f7fc ff27 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8006776:	2102      	movs	r1, #2
 8006778:	f24d 302a 	movw	r0, #54058	; 0xd32a
 800677c:	f7fc ff22 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8006780:	21f2      	movs	r1, #242	; 0xf2
 8006782:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8006786:	f7fc ff1d 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 800678a:	2102      	movs	r1, #2
 800678c:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8006790:	f7fc ff18 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8006794:	21fe      	movs	r1, #254	; 0xfe
 8006796:	f24d 302d 	movw	r0, #54061	; 0xd32d
 800679a:	f7fc ff13 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 800679e:	2103      	movs	r1, #3
 80067a0:	f24d 302e 	movw	r0, #54062	; 0xd32e
 80067a4:	f7fc ff0e 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 80067a8:	2110      	movs	r1, #16
 80067aa:	f24d 302f 	movw	r0, #54063	; 0xd32f
 80067ae:	f7fc ff09 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 80067b2:	2103      	movs	r1, #3
 80067b4:	f24d 3030 	movw	r0, #54064	; 0xd330
 80067b8:	f7fc ff04 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 80067bc:	2133      	movs	r1, #51	; 0x33
 80067be:	f24d 3031 	movw	r0, #54065	; 0xd331
 80067c2:	f7fc feff 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 80067c6:	2103      	movs	r1, #3
 80067c8:	f24d 3032 	movw	r0, #54066	; 0xd332
 80067cc:	f7fc fefa 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 80067d0:	216d      	movs	r1, #109	; 0x6d
 80067d2:	f24d 3033 	movw	r0, #54067	; 0xd333
 80067d6:	f7fc fef5 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 80067da:	2100      	movs	r1, #0
 80067dc:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 80067e0:	f7fc fef0 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 80067e4:	2133      	movs	r1, #51	; 0x33
 80067e6:	f24d 4001 	movw	r0, #54273	; 0xd401
 80067ea:	f7fc feeb 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 80067ee:	2100      	movs	r1, #0
 80067f0:	f24d 4002 	movw	r0, #54274	; 0xd402
 80067f4:	f7fc fee6 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 80067f8:	2134      	movs	r1, #52	; 0x34
 80067fa:	f24d 4003 	movw	r0, #54275	; 0xd403
 80067fe:	f7fc fee1 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8006802:	2100      	movs	r1, #0
 8006804:	f24d 4004 	movw	r0, #54276	; 0xd404
 8006808:	f7fc fedc 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 800680c:	213a      	movs	r1, #58	; 0x3a
 800680e:	f24d 4005 	movw	r0, #54277	; 0xd405
 8006812:	f7fc fed7 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8006816:	2100      	movs	r1, #0
 8006818:	f24d 4006 	movw	r0, #54278	; 0xd406
 800681c:	f7fc fed2 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8006820:	214a      	movs	r1, #74	; 0x4a
 8006822:	f24d 4007 	movw	r0, #54279	; 0xd407
 8006826:	f7fc fecd 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 800682a:	2100      	movs	r1, #0
 800682c:	f24d 4008 	movw	r0, #54280	; 0xd408
 8006830:	f7fc fec8 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8006834:	215c      	movs	r1, #92	; 0x5c
 8006836:	f24d 4009 	movw	r0, #54281	; 0xd409
 800683a:	f7fc fec3 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 800683e:	2100      	movs	r1, #0
 8006840:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8006844:	f7fc febe 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8006848:	2181      	movs	r1, #129	; 0x81
 800684a:	f24d 400b 	movw	r0, #54283	; 0xd40b
 800684e:	f7fc feb9 	bl	80035c4 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8006852:	2100      	movs	r1, #0
 8006854:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8006858:	f7fc feb4 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 800685c:	21a6      	movs	r1, #166	; 0xa6
 800685e:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8006862:	f7fc feaf 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8006866:	2100      	movs	r1, #0
 8006868:	f24d 400e 	movw	r0, #54286	; 0xd40e
 800686c:	f7fc feaa 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8006870:	21e5      	movs	r1, #229	; 0xe5
 8006872:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8006876:	f7fc fea5 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 800687a:	2101      	movs	r1, #1
 800687c:	f24d 4010 	movw	r0, #54288	; 0xd410
 8006880:	f7fc fea0 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8006884:	2113      	movs	r1, #19
 8006886:	f24d 4011 	movw	r0, #54289	; 0xd411
 800688a:	f7fc fe9b 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 800688e:	2101      	movs	r1, #1
 8006890:	f24d 4012 	movw	r0, #54290	; 0xd412
 8006894:	f7fc fe96 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8006898:	2154      	movs	r1, #84	; 0x54
 800689a:	f24d 4013 	movw	r0, #54291	; 0xd413
 800689e:	f7fc fe91 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 80068a2:	2101      	movs	r1, #1
 80068a4:	f24d 4014 	movw	r0, #54292	; 0xd414
 80068a8:	f7fc fe8c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 80068ac:	2182      	movs	r1, #130	; 0x82
 80068ae:	f24d 4015 	movw	r0, #54293	; 0xd415
 80068b2:	f7fc fe87 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 80068b6:	2101      	movs	r1, #1
 80068b8:	f24d 4016 	movw	r0, #54294	; 0xd416
 80068bc:	f7fc fe82 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 80068c0:	21ca      	movs	r1, #202	; 0xca
 80068c2:	f24d 4017 	movw	r0, #54295	; 0xd417
 80068c6:	f7fc fe7d 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 80068ca:	2102      	movs	r1, #2
 80068cc:	f24d 4018 	movw	r0, #54296	; 0xd418
 80068d0:	f7fc fe78 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 80068d4:	2100      	movs	r1, #0
 80068d6:	f24d 4019 	movw	r0, #54297	; 0xd419
 80068da:	f7fc fe73 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 80068de:	2102      	movs	r1, #2
 80068e0:	f24d 401a 	movw	r0, #54298	; 0xd41a
 80068e4:	f7fc fe6e 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 80068e8:	2101      	movs	r1, #1
 80068ea:	f24d 401b 	movw	r0, #54299	; 0xd41b
 80068ee:	f7fc fe69 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 80068f2:	2102      	movs	r1, #2
 80068f4:	f24d 401c 	movw	r0, #54300	; 0xd41c
 80068f8:	f7fc fe64 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 80068fc:	2134      	movs	r1, #52	; 0x34
 80068fe:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8006902:	f7fc fe5f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8006906:	2102      	movs	r1, #2
 8006908:	f24d 401e 	movw	r0, #54302	; 0xd41e
 800690c:	f7fc fe5a 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8006910:	2167      	movs	r1, #103	; 0x67
 8006912:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8006916:	f7fc fe55 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 800691a:	2102      	movs	r1, #2
 800691c:	f24d 4020 	movw	r0, #54304	; 0xd420
 8006920:	f7fc fe50 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8006924:	2184      	movs	r1, #132	; 0x84
 8006926:	f24d 4021 	movw	r0, #54305	; 0xd421
 800692a:	f7fc fe4b 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 800692e:	2102      	movs	r1, #2
 8006930:	f24d 4022 	movw	r0, #54306	; 0xd422
 8006934:	f7fc fe46 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8006938:	21a4      	movs	r1, #164	; 0xa4
 800693a:	f24d 4023 	movw	r0, #54307	; 0xd423
 800693e:	f7fc fe41 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8006942:	2102      	movs	r1, #2
 8006944:	f24d 4024 	movw	r0, #54308	; 0xd424
 8006948:	f7fc fe3c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 800694c:	21b7      	movs	r1, #183	; 0xb7
 800694e:	f24d 4025 	movw	r0, #54309	; 0xd425
 8006952:	f7fc fe37 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8006956:	2102      	movs	r1, #2
 8006958:	f24d 4026 	movw	r0, #54310	; 0xd426
 800695c:	f7fc fe32 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8006960:	21cf      	movs	r1, #207	; 0xcf
 8006962:	f24d 4027 	movw	r0, #54311	; 0xd427
 8006966:	f7fc fe2d 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 800696a:	2102      	movs	r1, #2
 800696c:	f24d 4028 	movw	r0, #54312	; 0xd428
 8006970:	f7fc fe28 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8006974:	21de      	movs	r1, #222	; 0xde
 8006976:	f24d 4029 	movw	r0, #54313	; 0xd429
 800697a:	f7fc fe23 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 800697e:	2102      	movs	r1, #2
 8006980:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8006984:	f7fc fe1e 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8006988:	21f2      	movs	r1, #242	; 0xf2
 800698a:	f24d 402b 	movw	r0, #54315	; 0xd42b
 800698e:	f7fc fe19 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8006992:	2102      	movs	r1, #2
 8006994:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8006998:	f7fc fe14 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 800699c:	21fe      	movs	r1, #254	; 0xfe
 800699e:	f24d 402d 	movw	r0, #54317	; 0xd42d
 80069a2:	f7fc fe0f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 80069a6:	2103      	movs	r1, #3
 80069a8:	f24d 402e 	movw	r0, #54318	; 0xd42e
 80069ac:	f7fc fe0a 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 80069b0:	2110      	movs	r1, #16
 80069b2:	f24d 402f 	movw	r0, #54319	; 0xd42f
 80069b6:	f7fc fe05 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 80069ba:	2103      	movs	r1, #3
 80069bc:	f24d 4030 	movw	r0, #54320	; 0xd430
 80069c0:	f7fc fe00 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 80069c4:	2133      	movs	r1, #51	; 0x33
 80069c6:	f24d 4031 	movw	r0, #54321	; 0xd431
 80069ca:	f7fc fdfb 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 80069ce:	2103      	movs	r1, #3
 80069d0:	f24d 4032 	movw	r0, #54322	; 0xd432
 80069d4:	f7fc fdf6 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 80069d8:	216d      	movs	r1, #109	; 0x6d
 80069da:	f24d 4033 	movw	r0, #54323	; 0xd433
 80069de:	f7fc fdf1 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 80069e2:	2100      	movs	r1, #0
 80069e4:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 80069e8:	f7fc fdec 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 80069ec:	2133      	movs	r1, #51	; 0x33
 80069ee:	f24d 5001 	movw	r0, #54529	; 0xd501
 80069f2:	f7fc fde7 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 80069f6:	2100      	movs	r1, #0
 80069f8:	f24d 5002 	movw	r0, #54530	; 0xd502
 80069fc:	f7fc fde2 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8006a00:	2134      	movs	r1, #52	; 0x34
 8006a02:	f24d 5003 	movw	r0, #54531	; 0xd503
 8006a06:	f7fc fddd 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	f24d 5004 	movw	r0, #54532	; 0xd504
 8006a10:	f7fc fdd8 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8006a14:	213a      	movs	r1, #58	; 0x3a
 8006a16:	f24d 5005 	movw	r0, #54533	; 0xd505
 8006a1a:	f7fc fdd3 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8006a1e:	2100      	movs	r1, #0
 8006a20:	f24d 5006 	movw	r0, #54534	; 0xd506
 8006a24:	f7fc fdce 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8006a28:	214a      	movs	r1, #74	; 0x4a
 8006a2a:	f24d 5007 	movw	r0, #54535	; 0xd507
 8006a2e:	f7fc fdc9 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 8006a32:	2100      	movs	r1, #0
 8006a34:	f24d 5008 	movw	r0, #54536	; 0xd508
 8006a38:	f7fc fdc4 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8006a3c:	215c      	movs	r1, #92	; 0x5c
 8006a3e:	f24d 5009 	movw	r0, #54537	; 0xd509
 8006a42:	f7fc fdbf 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8006a46:	2100      	movs	r1, #0
 8006a48:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8006a4c:	f7fc fdba 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8006a50:	2181      	movs	r1, #129	; 0x81
 8006a52:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8006a56:	f7fc fdb5 	bl	80035c4 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8006a60:	f7fc fdb0 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 8006a64:	21a6      	movs	r1, #166	; 0xa6
 8006a66:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8006a6a:	f7fc fdab 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8006a6e:	2100      	movs	r1, #0
 8006a70:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8006a74:	f7fc fda6 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8006a78:	21e5      	movs	r1, #229	; 0xe5
 8006a7a:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8006a7e:	f7fc fda1 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 8006a82:	2101      	movs	r1, #1
 8006a84:	f24d 5010 	movw	r0, #54544	; 0xd510
 8006a88:	f7fc fd9c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8006a8c:	2113      	movs	r1, #19
 8006a8e:	f24d 5011 	movw	r0, #54545	; 0xd511
 8006a92:	f7fc fd97 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8006a96:	2101      	movs	r1, #1
 8006a98:	f24d 5012 	movw	r0, #54546	; 0xd512
 8006a9c:	f7fc fd92 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8006aa0:	2154      	movs	r1, #84	; 0x54
 8006aa2:	f24d 5013 	movw	r0, #54547	; 0xd513
 8006aa6:	f7fc fd8d 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8006aaa:	2101      	movs	r1, #1
 8006aac:	f24d 5014 	movw	r0, #54548	; 0xd514
 8006ab0:	f7fc fd88 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8006ab4:	2182      	movs	r1, #130	; 0x82
 8006ab6:	f24d 5015 	movw	r0, #54549	; 0xd515
 8006aba:	f7fc fd83 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8006abe:	2101      	movs	r1, #1
 8006ac0:	f24d 5016 	movw	r0, #54550	; 0xd516
 8006ac4:	f7fc fd7e 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8006ac8:	21ca      	movs	r1, #202	; 0xca
 8006aca:	f24d 5017 	movw	r0, #54551	; 0xd517
 8006ace:	f7fc fd79 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8006ad2:	2102      	movs	r1, #2
 8006ad4:	f24d 5018 	movw	r0, #54552	; 0xd518
 8006ad8:	f7fc fd74 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8006adc:	2100      	movs	r1, #0
 8006ade:	f24d 5019 	movw	r0, #54553	; 0xd519
 8006ae2:	f7fc fd6f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8006ae6:	2102      	movs	r1, #2
 8006ae8:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8006aec:	f7fc fd6a 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8006af0:	2101      	movs	r1, #1
 8006af2:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8006af6:	f7fc fd65 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8006afa:	2102      	movs	r1, #2
 8006afc:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8006b00:	f7fc fd60 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8006b04:	2134      	movs	r1, #52	; 0x34
 8006b06:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8006b0a:	f7fc fd5b 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8006b0e:	2102      	movs	r1, #2
 8006b10:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8006b14:	f7fc fd56 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8006b18:	2167      	movs	r1, #103	; 0x67
 8006b1a:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8006b1e:	f7fc fd51 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8006b22:	2102      	movs	r1, #2
 8006b24:	f24d 5020 	movw	r0, #54560	; 0xd520
 8006b28:	f7fc fd4c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8006b2c:	2184      	movs	r1, #132	; 0x84
 8006b2e:	f24d 5021 	movw	r0, #54561	; 0xd521
 8006b32:	f7fc fd47 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 8006b36:	2102      	movs	r1, #2
 8006b38:	f24d 5022 	movw	r0, #54562	; 0xd522
 8006b3c:	f7fc fd42 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8006b40:	21a4      	movs	r1, #164	; 0xa4
 8006b42:	f24d 5023 	movw	r0, #54563	; 0xd523
 8006b46:	f7fc fd3d 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8006b4a:	2102      	movs	r1, #2
 8006b4c:	f24d 5024 	movw	r0, #54564	; 0xd524
 8006b50:	f7fc fd38 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 8006b54:	21b7      	movs	r1, #183	; 0xb7
 8006b56:	f24d 5025 	movw	r0, #54565	; 0xd525
 8006b5a:	f7fc fd33 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 8006b5e:	2102      	movs	r1, #2
 8006b60:	f24d 5026 	movw	r0, #54566	; 0xd526
 8006b64:	f7fc fd2e 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8006b68:	21cf      	movs	r1, #207	; 0xcf
 8006b6a:	f24d 5027 	movw	r0, #54567	; 0xd527
 8006b6e:	f7fc fd29 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 8006b72:	2102      	movs	r1, #2
 8006b74:	f24d 5028 	movw	r0, #54568	; 0xd528
 8006b78:	f7fc fd24 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8006b7c:	21de      	movs	r1, #222	; 0xde
 8006b7e:	f24d 5029 	movw	r0, #54569	; 0xd529
 8006b82:	f7fc fd1f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 8006b86:	2102      	movs	r1, #2
 8006b88:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8006b8c:	f7fc fd1a 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8006b90:	21f2      	movs	r1, #242	; 0xf2
 8006b92:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8006b96:	f7fc fd15 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 8006b9a:	2102      	movs	r1, #2
 8006b9c:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8006ba0:	f7fc fd10 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 8006ba4:	21fe      	movs	r1, #254	; 0xfe
 8006ba6:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8006baa:	f7fc fd0b 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 8006bae:	2103      	movs	r1, #3
 8006bb0:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8006bb4:	f7fc fd06 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8006bb8:	2110      	movs	r1, #16
 8006bba:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8006bbe:	f7fc fd01 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 8006bc2:	2103      	movs	r1, #3
 8006bc4:	f24d 5030 	movw	r0, #54576	; 0xd530
 8006bc8:	f7fc fcfc 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 8006bcc:	2133      	movs	r1, #51	; 0x33
 8006bce:	f24d 5031 	movw	r0, #54577	; 0xd531
 8006bd2:	f7fc fcf7 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 8006bd6:	2103      	movs	r1, #3
 8006bd8:	f24d 5032 	movw	r0, #54578	; 0xd532
 8006bdc:	f7fc fcf2 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8006be0:	216d      	movs	r1, #109	; 0x6d
 8006be2:	f24d 5033 	movw	r0, #54579	; 0xd533
 8006be6:	f7fc fced 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 8006bea:	2100      	movs	r1, #0
 8006bec:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8006bf0:	f7fc fce8 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 8006bf4:	2133      	movs	r1, #51	; 0x33
 8006bf6:	f24d 6001 	movw	r0, #54785	; 0xd601
 8006bfa:	f7fc fce3 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 8006bfe:	2100      	movs	r1, #0
 8006c00:	f24d 6002 	movw	r0, #54786	; 0xd602
 8006c04:	f7fc fcde 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8006c08:	2134      	movs	r1, #52	; 0x34
 8006c0a:	f24d 6003 	movw	r0, #54787	; 0xd603
 8006c0e:	f7fc fcd9 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 8006c12:	2100      	movs	r1, #0
 8006c14:	f24d 6004 	movw	r0, #54788	; 0xd604
 8006c18:	f7fc fcd4 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 8006c1c:	213a      	movs	r1, #58	; 0x3a
 8006c1e:	f24d 6005 	movw	r0, #54789	; 0xd605
 8006c22:	f7fc fccf 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 8006c26:	2100      	movs	r1, #0
 8006c28:	f24d 6006 	movw	r0, #54790	; 0xd606
 8006c2c:	f7fc fcca 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8006c30:	214a      	movs	r1, #74	; 0x4a
 8006c32:	f24d 6007 	movw	r0, #54791	; 0xd607
 8006c36:	f7fc fcc5 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	f24d 6008 	movw	r0, #54792	; 0xd608
 8006c40:	f7fc fcc0 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 8006c44:	215c      	movs	r1, #92	; 0x5c
 8006c46:	f24d 6009 	movw	r0, #54793	; 0xd609
 8006c4a:	f7fc fcbb 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 8006c4e:	2100      	movs	r1, #0
 8006c50:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8006c54:	f7fc fcb6 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 8006c58:	2181      	movs	r1, #129	; 0x81
 8006c5a:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8006c5e:	f7fc fcb1 	bl	80035c4 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 8006c62:	2100      	movs	r1, #0
 8006c64:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8006c68:	f7fc fcac 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 8006c6c:	21a6      	movs	r1, #166	; 0xa6
 8006c6e:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8006c72:	f7fc fca7 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 8006c76:	2100      	movs	r1, #0
 8006c78:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8006c7c:	f7fc fca2 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8006c80:	21e5      	movs	r1, #229	; 0xe5
 8006c82:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8006c86:	f7fc fc9d 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	f24d 6010 	movw	r0, #54800	; 0xd610
 8006c90:	f7fc fc98 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 8006c94:	2113      	movs	r1, #19
 8006c96:	f24d 6011 	movw	r0, #54801	; 0xd611
 8006c9a:	f7fc fc93 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	f24d 6012 	movw	r0, #54802	; 0xd612
 8006ca4:	f7fc fc8e 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8006ca8:	2154      	movs	r1, #84	; 0x54
 8006caa:	f24d 6013 	movw	r0, #54803	; 0xd613
 8006cae:	f7fc fc89 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	f24d 6014 	movw	r0, #54804	; 0xd614
 8006cb8:	f7fc fc84 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 8006cbc:	2182      	movs	r1, #130	; 0x82
 8006cbe:	f24d 6015 	movw	r0, #54805	; 0xd615
 8006cc2:	f7fc fc7f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 8006cc6:	2101      	movs	r1, #1
 8006cc8:	f24d 6016 	movw	r0, #54806	; 0xd616
 8006ccc:	f7fc fc7a 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8006cd0:	21ca      	movs	r1, #202	; 0xca
 8006cd2:	f24d 6017 	movw	r0, #54807	; 0xd617
 8006cd6:	f7fc fc75 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 8006cda:	2102      	movs	r1, #2
 8006cdc:	f24d 6018 	movw	r0, #54808	; 0xd618
 8006ce0:	f7fc fc70 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	f24d 6019 	movw	r0, #54809	; 0xd619
 8006cea:	f7fc fc6b 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 8006cee:	2102      	movs	r1, #2
 8006cf0:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8006cf4:	f7fc fc66 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8006cf8:	2101      	movs	r1, #1
 8006cfa:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8006cfe:	f7fc fc61 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 8006d02:	2102      	movs	r1, #2
 8006d04:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8006d08:	f7fc fc5c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 8006d0c:	2134      	movs	r1, #52	; 0x34
 8006d0e:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8006d12:	f7fc fc57 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 8006d16:	2102      	movs	r1, #2
 8006d18:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8006d1c:	f7fc fc52 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8006d20:	2167      	movs	r1, #103	; 0x67
 8006d22:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8006d26:	f7fc fc4d 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 8006d2a:	2102      	movs	r1, #2
 8006d2c:	f24d 6020 	movw	r0, #54816	; 0xd620
 8006d30:	f7fc fc48 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 8006d34:	2184      	movs	r1, #132	; 0x84
 8006d36:	f24d 6021 	movw	r0, #54817	; 0xd621
 8006d3a:	f7fc fc43 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 8006d3e:	2102      	movs	r1, #2
 8006d40:	f24d 6022 	movw	r0, #54818	; 0xd622
 8006d44:	f7fc fc3e 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 8006d48:	21a4      	movs	r1, #164	; 0xa4
 8006d4a:	f24d 6023 	movw	r0, #54819	; 0xd623
 8006d4e:	f7fc fc39 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 8006d52:	2102      	movs	r1, #2
 8006d54:	f24d 6024 	movw	r0, #54820	; 0xd624
 8006d58:	f7fc fc34 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 8006d5c:	21b7      	movs	r1, #183	; 0xb7
 8006d5e:	f24d 6025 	movw	r0, #54821	; 0xd625
 8006d62:	f7fc fc2f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 8006d66:	2102      	movs	r1, #2
 8006d68:	f24d 6026 	movw	r0, #54822	; 0xd626
 8006d6c:	f7fc fc2a 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 8006d70:	21cf      	movs	r1, #207	; 0xcf
 8006d72:	f24d 6027 	movw	r0, #54823	; 0xd627
 8006d76:	f7fc fc25 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 8006d7a:	2102      	movs	r1, #2
 8006d7c:	f24d 6028 	movw	r0, #54824	; 0xd628
 8006d80:	f7fc fc20 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 8006d84:	21de      	movs	r1, #222	; 0xde
 8006d86:	f24d 6029 	movw	r0, #54825	; 0xd629
 8006d8a:	f7fc fc1b 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 8006d8e:	2102      	movs	r1, #2
 8006d90:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8006d94:	f7fc fc16 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8006d98:	21f2      	movs	r1, #242	; 0xf2
 8006d9a:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8006d9e:	f7fc fc11 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 8006da2:	2102      	movs	r1, #2
 8006da4:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8006da8:	f7fc fc0c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 8006dac:	21fe      	movs	r1, #254	; 0xfe
 8006dae:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8006db2:	f7fc fc07 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 8006db6:	2103      	movs	r1, #3
 8006db8:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8006dbc:	f7fc fc02 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8006dc0:	2110      	movs	r1, #16
 8006dc2:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8006dc6:	f7fc fbfd 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 8006dca:	2103      	movs	r1, #3
 8006dcc:	f24d 6030 	movw	r0, #54832	; 0xd630
 8006dd0:	f7fc fbf8 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 8006dd4:	2133      	movs	r1, #51	; 0x33
 8006dd6:	f24d 6031 	movw	r0, #54833	; 0xd631
 8006dda:	f7fc fbf3 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 8006dde:	2103      	movs	r1, #3
 8006de0:	f24d 6032 	movw	r0, #54834	; 0xd632
 8006de4:	f7fc fbee 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8006de8:	216d      	movs	r1, #109	; 0x6d
 8006dea:	f24d 6033 	movw	r0, #54835	; 0xd633
 8006dee:	f7fc fbe9 	bl	80035c4 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 8006df2:	2155      	movs	r1, #85	; 0x55
 8006df4:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8006df8:	f7fc fbe4 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8006dfc:	21aa      	movs	r1, #170	; 0xaa
 8006dfe:	f24f 0001 	movw	r0, #61441	; 0xf001
 8006e02:	f7fc fbdf 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8006e06:	2152      	movs	r1, #82	; 0x52
 8006e08:	f24f 0002 	movw	r0, #61442	; 0xf002
 8006e0c:	f7fc fbda 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8006e10:	2108      	movs	r1, #8
 8006e12:	f24f 0003 	movw	r0, #61443	; 0xf003
 8006e16:	f7fc fbd5 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	f24f 0004 	movw	r0, #61444	; 0xf004
 8006e20:	f7fc fbd0 	bl	80035c4 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8006e24:	21cc      	movs	r1, #204	; 0xcc
 8006e26:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8006e2a:	f7fc fbcb 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8006e2e:	2100      	movs	r1, #0
 8006e30:	f24b 1001 	movw	r0, #45313	; 0xb101
 8006e34:	f7fc fbc6 	bl	80035c4 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 8006e38:	2105      	movs	r1, #5
 8006e3a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8006e3e:	f7fc fbc1 	bl	80035c4 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 8006e42:	2170      	movs	r1, #112	; 0x70
 8006e44:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8006e48:	f7fc fbbc 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 8006e4c:	2170      	movs	r1, #112	; 0x70
 8006e4e:	f24b 7001 	movw	r0, #46849	; 0xb701
 8006e52:	f7fc fbb7 	bl	80035c4 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 8006e56:	2101      	movs	r1, #1
 8006e58:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8006e5c:	f7fc fbb2 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 8006e60:	2103      	movs	r1, #3
 8006e62:	f64b 0001 	movw	r0, #47105	; 0xb801
 8006e66:	f7fc fbad 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 8006e6a:	2103      	movs	r1, #3
 8006e6c:	f64b 0002 	movw	r0, #47106	; 0xb802
 8006e70:	f7fc fba8 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 8006e74:	2103      	movs	r1, #3
 8006e76:	f64b 0003 	movw	r0, #47107	; 0xb803
 8006e7a:	f7fc fba3 	bl	80035c4 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 8006e7e:	2102      	movs	r1, #2
 8006e80:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8006e84:	f7fc fb9e 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 8006e88:	2100      	movs	r1, #0
 8006e8a:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8006e8e:	f7fc fb99 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8006e92:	2100      	movs	r1, #0
 8006e94:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8006e98:	f7fc fb94 	bl	80035c4 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 8006e9c:	21d0      	movs	r1, #208	; 0xd0
 8006e9e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8006ea2:	f7fc fb8f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 8006ea6:	2102      	movs	r1, #2
 8006ea8:	f64c 1001 	movw	r0, #51457	; 0xc901
 8006eac:	f7fc fb8a 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8006eb0:	2150      	movs	r1, #80	; 0x50
 8006eb2:	f64c 1002 	movw	r0, #51458	; 0xc902
 8006eb6:	f7fc fb85 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 8006eba:	2150      	movs	r1, #80	; 0x50
 8006ebc:	f64c 1003 	movw	r0, #51459	; 0xc903
 8006ec0:	f7fc fb80 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 8006ec4:	2150      	movs	r1, #80	; 0x50
 8006ec6:	f64c 1004 	movw	r0, #51460	; 0xc904
 8006eca:	f7fc fb7b 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 8006ece:	2100      	movs	r1, #0
 8006ed0:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8006ed4:	f7fc fb76 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8006ed8:	2155      	movs	r1, #85	; 0x55
 8006eda:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8006ede:	f7fc fb71 	bl	80035c4 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8006ee2:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8006ee6:	f7fc fae1 	bl	80034ac <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 8006eea:	2001      	movs	r0, #1
 8006eec:	f7f9 fdc8 	bl	8000a80 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8006ef0:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8006ef4:	f7fc fada 	bl	80034ac <LCD_WR_REG>
 8006ef8:	f001 bd18 	b.w	800892c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 8006efc:	4bec      	ldr	r3, [pc, #944]	; (80072b0 <LCD_Init+0x27b8>)
 8006efe:	889b      	ldrh	r3, [r3, #4]
 8006f00:	f249 3225 	movw	r2, #37669	; 0x9325
 8006f04:	4293      	cmp	r3, r2
 8006f06:	f040 80d7 	bne.w	80070b8 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 8006f0a:	f647 01f0 	movw	r1, #30960	; 0x78f0
 8006f0e:	20e5      	movs	r0, #229	; 0xe5
 8006f10:	f7fc fb58 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 8006f14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f18:	2001      	movs	r0, #1
 8006f1a:	f7fc fb53 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8006f1e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006f22:	2002      	movs	r0, #2
 8006f24:	f7fc fb4e 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8006f28:	f241 0130 	movw	r1, #4144	; 0x1030
 8006f2c:	2003      	movs	r0, #3
 8006f2e:	f7fc fb49 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8006f32:	2100      	movs	r1, #0
 8006f34:	2004      	movs	r0, #4
 8006f36:	f7fc fb45 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8006f3a:	f240 2102 	movw	r1, #514	; 0x202
 8006f3e:	2008      	movs	r0, #8
 8006f40:	f7fc fb40 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8006f44:	2100      	movs	r1, #0
 8006f46:	2009      	movs	r0, #9
 8006f48:	f7fc fb3c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	200a      	movs	r0, #10
 8006f50:	f7fc fb38 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8006f54:	2100      	movs	r1, #0
 8006f56:	200c      	movs	r0, #12
 8006f58:	f7fc fb34 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	200d      	movs	r0, #13
 8006f60:	f7fc fb30 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8006f64:	2100      	movs	r1, #0
 8006f66:	200f      	movs	r0, #15
 8006f68:	f7fc fb2c 	bl	80035c4 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	2010      	movs	r0, #16
 8006f70:	f7fc fb28 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8006f74:	2107      	movs	r1, #7
 8006f76:	2011      	movs	r0, #17
 8006f78:	f7fc fb24 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	2012      	movs	r0, #18
 8006f80:	f7fc fb20 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8006f84:	2100      	movs	r1, #0
 8006f86:	2013      	movs	r0, #19
 8006f88:	f7fc fb1c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	2007      	movs	r0, #7
 8006f90:	f7fc fb18 	bl	80035c4 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 8006f94:	f241 6190 	movw	r1, #5776	; 0x1690
 8006f98:	2010      	movs	r0, #16
 8006f9a:	f7fc fb13 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8006f9e:	f240 2127 	movw	r1, #551	; 0x227
 8006fa2:	2011      	movs	r0, #17
 8006fa4:	f7fc fb0e 	bl	80035c4 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8006fa8:	219d      	movs	r1, #157	; 0x9d
 8006faa:	2012      	movs	r0, #18
 8006fac:	f7fc fb0a 	bl	80035c4 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8006fb0:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8006fb4:	2013      	movs	r0, #19
 8006fb6:	f7fc fb05 	bl	80035c4 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 8006fba:	2125      	movs	r1, #37	; 0x25
 8006fbc:	2029      	movs	r0, #41	; 0x29
 8006fbe:	f7fc fb01 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 8006fc2:	210d      	movs	r1, #13
 8006fc4:	202b      	movs	r0, #43	; 0x2b
 8006fc6:	f7fc fafd 	bl	80035c4 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 8006fca:	2107      	movs	r1, #7
 8006fcc:	2030      	movs	r0, #48	; 0x30
 8006fce:	f7fc faf9 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 8006fd2:	f240 3103 	movw	r1, #771	; 0x303
 8006fd6:	2031      	movs	r0, #49	; 0x31
 8006fd8:	f7fc faf4 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 8006fdc:	2103      	movs	r1, #3
 8006fde:	2032      	movs	r0, #50	; 0x32
 8006fe0:	f7fc faf0 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 8006fe4:	f240 2106 	movw	r1, #518	; 0x206
 8006fe8:	2035      	movs	r0, #53	; 0x35
 8006fea:	f7fc faeb 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 8006fee:	2108      	movs	r1, #8
 8006ff0:	2036      	movs	r0, #54	; 0x36
 8006ff2:	f7fc fae7 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 8006ff6:	f240 4106 	movw	r1, #1030	; 0x406
 8006ffa:	2037      	movs	r0, #55	; 0x37
 8006ffc:	f7fc fae2 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8007000:	f44f 7141 	mov.w	r1, #772	; 0x304
 8007004:	2038      	movs	r0, #56	; 0x38
 8007006:	f7fc fadd 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 800700a:	2107      	movs	r1, #7
 800700c:	2039      	movs	r0, #57	; 0x39
 800700e:	f7fc fad9 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 8007012:	f240 6102 	movw	r1, #1538	; 0x602
 8007016:	203c      	movs	r0, #60	; 0x3c
 8007018:	f7fc fad4 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 800701c:	2108      	movs	r1, #8
 800701e:	203d      	movs	r0, #61	; 0x3d
 8007020:	f7fc fad0 	bl	80035c4 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 8007024:	2100      	movs	r1, #0
 8007026:	2050      	movs	r0, #80	; 0x50
 8007028:	f7fc facc 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 800702c:	21ef      	movs	r1, #239	; 0xef
 800702e:	2051      	movs	r0, #81	; 0x51
 8007030:	f7fc fac8 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8007034:	2100      	movs	r1, #0
 8007036:	2052      	movs	r0, #82	; 0x52
 8007038:	f7fc fac4 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800703c:	f240 113f 	movw	r1, #319	; 0x13f
 8007040:	2053      	movs	r0, #83	; 0x53
 8007042:	f7fc fabf 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 8007046:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 800704a:	2060      	movs	r0, #96	; 0x60
 800704c:	f7fc faba 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8007050:	2101      	movs	r1, #1
 8007052:	2061      	movs	r0, #97	; 0x61
 8007054:	f7fc fab6 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8007058:	2100      	movs	r1, #0
 800705a:	206a      	movs	r0, #106	; 0x6a
 800705c:	f7fc fab2 	bl	80035c4 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 8007060:	2100      	movs	r1, #0
 8007062:	2080      	movs	r0, #128	; 0x80
 8007064:	f7fc faae 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8007068:	2100      	movs	r1, #0
 800706a:	2081      	movs	r0, #129	; 0x81
 800706c:	f7fc faaa 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8007070:	2100      	movs	r1, #0
 8007072:	2082      	movs	r0, #130	; 0x82
 8007074:	f7fc faa6 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8007078:	2100      	movs	r1, #0
 800707a:	2083      	movs	r0, #131	; 0x83
 800707c:	f7fc faa2 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8007080:	2100      	movs	r1, #0
 8007082:	2084      	movs	r0, #132	; 0x84
 8007084:	f7fc fa9e 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8007088:	2100      	movs	r1, #0
 800708a:	2085      	movs	r0, #133	; 0x85
 800708c:	f7fc fa9a 	bl	80035c4 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8007090:	2110      	movs	r1, #16
 8007092:	2090      	movs	r0, #144	; 0x90
 8007094:	f7fc fa96 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8007098:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800709c:	2092      	movs	r0, #146	; 0x92
 800709e:	f7fc fa91 	bl	80035c4 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 80070a2:	f240 1133 	movw	r1, #307	; 0x133
 80070a6:	2007      	movs	r0, #7
 80070a8:	f7fc fa8c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 80070ac:	2122      	movs	r1, #34	; 0x22
 80070ae:	2000      	movs	r0, #0
 80070b0:	f7fc fa88 	bl	80035c4 <LCD_WriteReg>
 80070b4:	f001 bc3a 	b.w	800892c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 80070b8:	4b7d      	ldr	r3, [pc, #500]	; (80072b0 <LCD_Init+0x27b8>)
 80070ba:	889b      	ldrh	r3, [r3, #4]
 80070bc:	f249 3228 	movw	r2, #37672	; 0x9328
 80070c0:	4293      	cmp	r3, r2
 80070c2:	f040 80f7 	bne.w	80072b4 <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 80070c6:	f241 018f 	movw	r1, #4239	; 0x108f
 80070ca:	20ec      	movs	r0, #236	; 0xec
 80070cc:	f7fc fa7a 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 80070d0:	f241 2134 	movw	r1, #4660	; 0x1234
 80070d4:	20ef      	movs	r0, #239	; 0xef
 80070d6:	f7fc fa75 	bl	80035c4 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 80070da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80070de:	2001      	movs	r0, #1
 80070e0:	f7fc fa70 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 80070e4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80070e8:	2002      	movs	r0, #2
 80070ea:	f7fc fa6b 	bl	80035c4 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 80070ee:	f241 0130 	movw	r1, #4144	; 0x1030
 80070f2:	2003      	movs	r0, #3
 80070f4:	f7fc fa66 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80070f8:	2100      	movs	r1, #0
 80070fa:	2004      	movs	r0, #4
 80070fc:	f7fc fa62 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8007100:	f240 2102 	movw	r1, #514	; 0x202
 8007104:	2008      	movs	r0, #8
 8007106:	f7fc fa5d 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 800710a:	2100      	movs	r1, #0
 800710c:	2009      	movs	r0, #9
 800710e:	f7fc fa59 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 8007112:	2100      	movs	r1, #0
 8007114:	200a      	movs	r0, #10
 8007116:	f7fc fa55 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 800711a:	2101      	movs	r1, #1
 800711c:	200c      	movs	r0, #12
 800711e:	f7fc fa51 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 8007122:	2100      	movs	r1, #0
 8007124:	200d      	movs	r0, #13
 8007126:	f7fc fa4d 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 800712a:	2100      	movs	r1, #0
 800712c:	200f      	movs	r0, #15
 800712e:	f7fc fa49 	bl	80035c4 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 8007132:	2100      	movs	r1, #0
 8007134:	2010      	movs	r0, #16
 8007136:	f7fc fa45 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 800713a:	2107      	movs	r1, #7
 800713c:	2011      	movs	r0, #17
 800713e:	f7fc fa41 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8007142:	2100      	movs	r1, #0
 8007144:	2012      	movs	r0, #18
 8007146:	f7fc fa3d 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 800714a:	2100      	movs	r1, #0
 800714c:	2013      	movs	r0, #19
 800714e:	f7fc fa39 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 8007152:	2101      	movs	r1, #1
 8007154:	2007      	movs	r0, #7
 8007156:	f7fc fa35 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(50);
 800715a:	2032      	movs	r0, #50	; 0x32
 800715c:	f7f9 fc90 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 8007160:	f241 4190 	movw	r1, #5264	; 0x1490
 8007164:	2010      	movs	r0, #16
 8007166:	f7fc fa2d 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 800716a:	f240 2127 	movw	r1, #551	; 0x227
 800716e:	2011      	movs	r0, #17
 8007170:	f7fc fa28 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(50);
 8007174:	2032      	movs	r0, #50	; 0x32
 8007176:	f7f9 fc83 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 800717a:	218a      	movs	r1, #138	; 0x8a
 800717c:	2012      	movs	r0, #18
 800717e:	f7fc fa21 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(50);
 8007182:	2032      	movs	r0, #50	; 0x32
 8007184:	f7f9 fc7c 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 8007188:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 800718c:	2013      	movs	r0, #19
 800718e:	f7fc fa19 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 8007192:	2106      	movs	r1, #6
 8007194:	2029      	movs	r0, #41	; 0x29
 8007196:	f7fc fa15 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 800719a:	210d      	movs	r1, #13
 800719c:	202b      	movs	r0, #43	; 0x2b
 800719e:	f7fc fa11 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(50);
 80071a2:	2032      	movs	r0, #50	; 0x32
 80071a4:	f7f9 fc6c 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 80071a8:	2100      	movs	r1, #0
 80071aa:	2020      	movs	r0, #32
 80071ac:	f7fc fa0a 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 80071b0:	2100      	movs	r1, #0
 80071b2:	2021      	movs	r0, #33	; 0x21
 80071b4:	f7fc fa06 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(50);
 80071b8:	2032      	movs	r0, #50	; 0x32
 80071ba:	f7f9 fc61 	bl	8000a80 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 80071be:	2100      	movs	r1, #0
 80071c0:	2030      	movs	r0, #48	; 0x30
 80071c2:	f7fc f9ff 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 80071c6:	f240 6104 	movw	r1, #1540	; 0x604
 80071ca:	2031      	movs	r0, #49	; 0x31
 80071cc:	f7fc f9fa 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 80071d0:	f240 3105 	movw	r1, #773	; 0x305
 80071d4:	2032      	movs	r0, #50	; 0x32
 80071d6:	f7fc f9f5 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 80071da:	2100      	movs	r1, #0
 80071dc:	2035      	movs	r0, #53	; 0x35
 80071de:	f7fc f9f1 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 80071e2:	f640 4109 	movw	r1, #3081	; 0xc09
 80071e6:	2036      	movs	r0, #54	; 0x36
 80071e8:	f7fc f9ec 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 80071ec:	f44f 7101 	mov.w	r1, #516	; 0x204
 80071f0:	2037      	movs	r0, #55	; 0x37
 80071f2:	f7fc f9e7 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 80071f6:	f240 3101 	movw	r1, #769	; 0x301
 80071fa:	2038      	movs	r0, #56	; 0x38
 80071fc:	f7fc f9e2 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8007200:	f240 7107 	movw	r1, #1799	; 0x707
 8007204:	2039      	movs	r0, #57	; 0x39
 8007206:	f7fc f9dd 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 800720a:	2100      	movs	r1, #0
 800720c:	203c      	movs	r0, #60	; 0x3c
 800720e:	f7fc f9d9 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 8007212:	f640 210a 	movw	r1, #2570	; 0xa0a
 8007216:	203d      	movs	r0, #61	; 0x3d
 8007218:	f7fc f9d4 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(50);
 800721c:	2032      	movs	r0, #50	; 0x32
 800721e:	f7f9 fc2f 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 8007222:	2100      	movs	r1, #0
 8007224:	2050      	movs	r0, #80	; 0x50
 8007226:	f7fc f9cd 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 800722a:	21ef      	movs	r1, #239	; 0xef
 800722c:	2051      	movs	r0, #81	; 0x51
 800722e:	f7fc f9c9 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 8007232:	2100      	movs	r1, #0
 8007234:	2052      	movs	r0, #82	; 0x52
 8007236:	f7fc f9c5 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 800723a:	f240 113f 	movw	r1, #319	; 0x13f
 800723e:	2053      	movs	r0, #83	; 0x53
 8007240:	f7fc f9c0 	bl	80035c4 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 8007244:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8007248:	2060      	movs	r0, #96	; 0x60
 800724a:	f7fc f9bb 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 800724e:	2101      	movs	r1, #1
 8007250:	2061      	movs	r0, #97	; 0x61
 8007252:	f7fc f9b7 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8007256:	2100      	movs	r1, #0
 8007258:	206a      	movs	r0, #106	; 0x6a
 800725a:	f7fc f9b3 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 800725e:	2100      	movs	r1, #0
 8007260:	2080      	movs	r0, #128	; 0x80
 8007262:	f7fc f9af 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8007266:	2100      	movs	r1, #0
 8007268:	2081      	movs	r0, #129	; 0x81
 800726a:	f7fc f9ab 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 800726e:	2100      	movs	r1, #0
 8007270:	2082      	movs	r0, #130	; 0x82
 8007272:	f7fc f9a7 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8007276:	2100      	movs	r1, #0
 8007278:	2083      	movs	r0, #131	; 0x83
 800727a:	f7fc f9a3 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 800727e:	2100      	movs	r1, #0
 8007280:	2084      	movs	r0, #132	; 0x84
 8007282:	f7fc f99f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8007286:	2100      	movs	r1, #0
 8007288:	2085      	movs	r0, #133	; 0x85
 800728a:	f7fc f99b 	bl	80035c4 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 800728e:	2110      	movs	r1, #16
 8007290:	2090      	movs	r0, #144	; 0x90
 8007292:	f7fc f997 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8007296:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800729a:	2092      	movs	r0, #146	; 0x92
 800729c:	f7fc f992 	bl	80035c4 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 80072a0:	f240 1133 	movw	r1, #307	; 0x133
 80072a4:	2007      	movs	r0, #7
 80072a6:	f7fc f98d 	bl	80035c4 <LCD_WriteReg>
 80072aa:	f001 bb3f 	b.w	800892c <LCD_Init+0x3e34>
 80072ae:	bf00      	nop
 80072b0:	20000e18 	.word	0x20000e18
	} else if (lcddev.id == 0x9320) //测试OK.
 80072b4:	4bce      	ldr	r3, [pc, #824]	; (80075f0 <LCD_Init+0x2af8>)
 80072b6:	889b      	ldrh	r3, [r3, #4]
 80072b8:	f249 3220 	movw	r2, #37664	; 0x9320
 80072bc:	4293      	cmp	r3, r2
 80072be:	f040 80ad 	bne.w	800741c <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 80072c2:	2100      	movs	r1, #0
 80072c4:	2000      	movs	r0, #0
 80072c6:	f7fc f97d 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 80072ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80072ce:	2001      	movs	r0, #1
 80072d0:	f7fc f978 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 80072d4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80072d8:	2002      	movs	r0, #2
 80072da:	f7fc f973 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 80072de:	f241 0130 	movw	r1, #4144	; 0x1030
 80072e2:	2003      	movs	r0, #3
 80072e4:	f7fc f96e 	bl	80035c4 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 80072e8:	2100      	movs	r1, #0
 80072ea:	2004      	movs	r0, #4
 80072ec:	f7fc f96a 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 80072f0:	f240 2102 	movw	r1, #514	; 0x202
 80072f4:	2008      	movs	r0, #8
 80072f6:	f7fc f965 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 80072fa:	2100      	movs	r1, #0
 80072fc:	2009      	movs	r0, #9
 80072fe:	f7fc f961 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 8007302:	2100      	movs	r1, #0
 8007304:	200a      	movs	r0, #10
 8007306:	f7fc f95d 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 800730a:	2101      	movs	r1, #1
 800730c:	200c      	movs	r0, #12
 800730e:	f7fc f959 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 8007312:	2100      	movs	r1, #0
 8007314:	200d      	movs	r0, #13
 8007316:	f7fc f955 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 800731a:	2100      	movs	r1, #0
 800731c:	200f      	movs	r0, #15
 800731e:	f7fc f951 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(50);
 8007322:	2032      	movs	r0, #50	; 0x32
 8007324:	f7f9 fbac 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8007328:	f240 1101 	movw	r1, #257	; 0x101
 800732c:	2007      	movs	r0, #7
 800732e:	f7fc f949 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(50);
 8007332:	2032      	movs	r0, #50	; 0x32
 8007334:	f7f9 fba4 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 8007338:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800733c:	2010      	movs	r0, #16
 800733e:	f7fc f941 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 8007342:	2107      	movs	r1, #7
 8007344:	2011      	movs	r0, #17
 8007346:	f7fc f93d 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 800734a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800734e:	2012      	movs	r0, #18
 8007350:	f7fc f938 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 8007354:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8007358:	2013      	movs	r0, #19
 800735a:	f7fc f933 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 800735e:	2100      	movs	r1, #0
 8007360:	2029      	movs	r0, #41	; 0x29
 8007362:	f7fc f92f 	bl	80035c4 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 8007366:	f244 0110 	movw	r1, #16400	; 0x4010
 800736a:	202b      	movs	r0, #43	; 0x2b
 800736c:	f7fc f92a 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8007370:	2100      	movs	r1, #0
 8007372:	2050      	movs	r0, #80	; 0x50
 8007374:	f7fc f926 	bl	80035c4 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 8007378:	21ef      	movs	r1, #239	; 0xef
 800737a:	2051      	movs	r0, #81	; 0x51
 800737c:	f7fc f922 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8007380:	2100      	movs	r1, #0
 8007382:	2052      	movs	r0, #82	; 0x52
 8007384:	f7fc f91e 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 8007388:	f240 113f 	movw	r1, #319	; 0x13f
 800738c:	2053      	movs	r0, #83	; 0x53
 800738e:	f7fc f919 	bl	80035c4 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 8007392:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007396:	2060      	movs	r0, #96	; 0x60
 8007398:	f7fc f914 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 800739c:	2101      	movs	r1, #1
 800739e:	2061      	movs	r0, #97	; 0x61
 80073a0:	f7fc f910 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 80073a4:	2100      	movs	r1, #0
 80073a6:	206a      	movs	r0, #106	; 0x6a
 80073a8:	f7fc f90c 	bl	80035c4 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 80073ac:	2100      	movs	r1, #0
 80073ae:	2080      	movs	r0, #128	; 0x80
 80073b0:	f7fc f908 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 80073b4:	2100      	movs	r1, #0
 80073b6:	2081      	movs	r0, #129	; 0x81
 80073b8:	f7fc f904 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 80073bc:	2100      	movs	r1, #0
 80073be:	2082      	movs	r0, #130	; 0x82
 80073c0:	f7fc f900 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 80073c4:	2100      	movs	r1, #0
 80073c6:	2083      	movs	r0, #131	; 0x83
 80073c8:	f7fc f8fc 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 80073cc:	2100      	movs	r1, #0
 80073ce:	2084      	movs	r0, #132	; 0x84
 80073d0:	f7fc f8f8 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 80073d4:	2100      	movs	r1, #0
 80073d6:	2085      	movs	r0, #133	; 0x85
 80073d8:	f7fc f8f4 	bl	80035c4 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 80073dc:	2110      	movs	r1, #16
 80073de:	2090      	movs	r0, #144	; 0x90
 80073e0:	f7fc f8f0 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 80073e4:	2100      	movs	r1, #0
 80073e6:	2092      	movs	r0, #146	; 0x92
 80073e8:	f7fc f8ec 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 80073ec:	2101      	movs	r1, #1
 80073ee:	2093      	movs	r0, #147	; 0x93
 80073f0:	f7fc f8e8 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 80073f4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80073f8:	2095      	movs	r0, #149	; 0x95
 80073fa:	f7fc f8e3 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 80073fe:	2100      	movs	r1, #0
 8007400:	2097      	movs	r0, #151	; 0x97
 8007402:	f7fc f8df 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 8007406:	2100      	movs	r1, #0
 8007408:	2098      	movs	r0, #152	; 0x98
 800740a:	f7fc f8db 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 800740e:	f240 1173 	movw	r1, #371	; 0x173
 8007412:	2007      	movs	r0, #7
 8007414:	f7fc f8d6 	bl	80035c4 <LCD_WriteReg>
 8007418:	f001 ba88 	b.w	800892c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 800741c:	4b74      	ldr	r3, [pc, #464]	; (80075f0 <LCD_Init+0x2af8>)
 800741e:	889b      	ldrh	r3, [r3, #4]
 8007420:	f249 3231 	movw	r2, #37681	; 0x9331
 8007424:	4293      	cmp	r3, r2
 8007426:	f040 80e5 	bne.w	80075f4 <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 800742a:	f241 0114 	movw	r1, #4116	; 0x1014
 800742e:	20e7      	movs	r0, #231	; 0xe7
 8007430:	f7fc f8c8 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8007434:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007438:	2001      	movs	r0, #1
 800743a:	f7fc f8c3 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 800743e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007442:	2002      	movs	r0, #2
 8007444:	f7fc f8be 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8007448:	f241 0138 	movw	r1, #4152	; 0x1038
 800744c:	2003      	movs	r0, #3
 800744e:	f7fc f8b9 	bl	80035c4 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8007452:	f240 2102 	movw	r1, #514	; 0x202
 8007456:	2008      	movs	r0, #8
 8007458:	f7fc f8b4 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 800745c:	2100      	movs	r1, #0
 800745e:	2009      	movs	r0, #9
 8007460:	f7fc f8b0 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8007464:	2100      	movs	r1, #0
 8007466:	200a      	movs	r0, #10
 8007468:	f7fc f8ac 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 800746c:	2100      	movs	r1, #0
 800746e:	200c      	movs	r0, #12
 8007470:	f7fc f8a8 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8007474:	2100      	movs	r1, #0
 8007476:	200d      	movs	r0, #13
 8007478:	f7fc f8a4 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 800747c:	2100      	movs	r1, #0
 800747e:	200f      	movs	r0, #15
 8007480:	f7fc f8a0 	bl	80035c4 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8007484:	2100      	movs	r1, #0
 8007486:	2010      	movs	r0, #16
 8007488:	f7fc f89c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 800748c:	2107      	movs	r1, #7
 800748e:	2011      	movs	r0, #17
 8007490:	f7fc f898 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8007494:	2100      	movs	r1, #0
 8007496:	2012      	movs	r0, #18
 8007498:	f7fc f894 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 800749c:	2100      	movs	r1, #0
 800749e:	2013      	movs	r0, #19
 80074a0:	f7fc f890 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 80074a4:	20c8      	movs	r0, #200	; 0xc8
 80074a6:	f7f9 faeb 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 80074aa:	f241 6190 	movw	r1, #5776	; 0x1690
 80074ae:	2010      	movs	r0, #16
 80074b0:	f7fc f888 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 80074b4:	f240 2127 	movw	r1, #551	; 0x227
 80074b8:	2011      	movs	r0, #17
 80074ba:	f7fc f883 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80074be:	2032      	movs	r0, #50	; 0x32
 80074c0:	f7f9 fade 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 80074c4:	210c      	movs	r1, #12
 80074c6:	2012      	movs	r0, #18
 80074c8:	f7fc f87c 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80074cc:	2032      	movs	r0, #50	; 0x32
 80074ce:	f7f9 fad7 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 80074d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80074d6:	2013      	movs	r0, #19
 80074d8:	f7fc f874 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 80074dc:	2111      	movs	r1, #17
 80074de:	2029      	movs	r0, #41	; 0x29
 80074e0:	f7fc f870 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 80074e4:	210b      	movs	r1, #11
 80074e6:	202b      	movs	r0, #43	; 0x2b
 80074e8:	f7fc f86c 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80074ec:	2032      	movs	r0, #50	; 0x32
 80074ee:	f7f9 fac7 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 80074f2:	2100      	movs	r1, #0
 80074f4:	2020      	movs	r0, #32
 80074f6:	f7fc f865 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 80074fa:	f240 113f 	movw	r1, #319	; 0x13f
 80074fe:	2021      	movs	r0, #33	; 0x21
 8007500:	f7fc f860 	bl	80035c4 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8007504:	2100      	movs	r1, #0
 8007506:	2030      	movs	r0, #48	; 0x30
 8007508:	f7fc f85c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 800750c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007510:	2031      	movs	r0, #49	; 0x31
 8007512:	f7fc f857 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8007516:	2100      	movs	r1, #0
 8007518:	2032      	movs	r0, #50	; 0x32
 800751a:	f7fc f853 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 800751e:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007522:	2035      	movs	r0, #53	; 0x35
 8007524:	f7fc f84e 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8007528:	f241 610a 	movw	r1, #5642	; 0x160a
 800752c:	2036      	movs	r0, #54	; 0x36
 800752e:	f7fc f849 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8007532:	f240 7107 	movw	r1, #1799	; 0x707
 8007536:	2037      	movs	r0, #55	; 0x37
 8007538:	f7fc f844 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 800753c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007540:	2038      	movs	r0, #56	; 0x38
 8007542:	f7fc f83f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8007546:	f240 7107 	movw	r1, #1799	; 0x707
 800754a:	2039      	movs	r0, #57	; 0x39
 800754c:	f7fc f83a 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8007550:	f240 4102 	movw	r1, #1026	; 0x402
 8007554:	203c      	movs	r0, #60	; 0x3c
 8007556:	f7fc f835 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 800755a:	f640 410f 	movw	r1, #3087	; 0xc0f
 800755e:	203d      	movs	r0, #61	; 0x3d
 8007560:	f7fc f830 	bl	80035c4 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8007564:	2100      	movs	r1, #0
 8007566:	2050      	movs	r0, #80	; 0x50
 8007568:	f7fc f82c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 800756c:	21ef      	movs	r1, #239	; 0xef
 800756e:	2051      	movs	r0, #81	; 0x51
 8007570:	f7fc f828 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8007574:	2100      	movs	r1, #0
 8007576:	2052      	movs	r0, #82	; 0x52
 8007578:	f7fc f824 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 800757c:	f240 113f 	movw	r1, #319	; 0x13f
 8007580:	2053      	movs	r0, #83	; 0x53
 8007582:	f7fc f81f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8007586:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800758a:	2060      	movs	r0, #96	; 0x60
 800758c:	f7fc f81a 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8007590:	2101      	movs	r1, #1
 8007592:	2061      	movs	r0, #97	; 0x61
 8007594:	f7fc f816 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8007598:	2100      	movs	r1, #0
 800759a:	206a      	movs	r0, #106	; 0x6a
 800759c:	f7fc f812 	bl	80035c4 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 80075a0:	2100      	movs	r1, #0
 80075a2:	2080      	movs	r0, #128	; 0x80
 80075a4:	f7fc f80e 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80075a8:	2100      	movs	r1, #0
 80075aa:	2081      	movs	r0, #129	; 0x81
 80075ac:	f7fc f80a 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80075b0:	2100      	movs	r1, #0
 80075b2:	2082      	movs	r0, #130	; 0x82
 80075b4:	f7fc f806 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80075b8:	2100      	movs	r1, #0
 80075ba:	2083      	movs	r0, #131	; 0x83
 80075bc:	f7fc f802 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80075c0:	2100      	movs	r1, #0
 80075c2:	2084      	movs	r0, #132	; 0x84
 80075c4:	f7fb fffe 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80075c8:	2100      	movs	r1, #0
 80075ca:	2085      	movs	r0, #133	; 0x85
 80075cc:	f7fb fffa 	bl	80035c4 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 80075d0:	2110      	movs	r1, #16
 80075d2:	2090      	movs	r0, #144	; 0x90
 80075d4:	f7fb fff6 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80075d8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80075dc:	2092      	movs	r0, #146	; 0x92
 80075de:	f7fb fff1 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 80075e2:	f240 1133 	movw	r1, #307	; 0x133
 80075e6:	2007      	movs	r0, #7
 80075e8:	f7fb ffec 	bl	80035c4 <LCD_WriteReg>
 80075ec:	f001 b99e 	b.w	800892c <LCD_Init+0x3e34>
 80075f0:	20000e18 	.word	0x20000e18
	} else if (lcddev.id == 0x5408) {
 80075f4:	4be2      	ldr	r3, [pc, #904]	; (8007980 <LCD_Init+0x2e88>)
 80075f6:	889b      	ldrh	r3, [r3, #4]
 80075f8:	f245 4208 	movw	r2, #21512	; 0x5408
 80075fc:	4293      	cmp	r3, r2
 80075fe:	f040 80a3 	bne.w	8007748 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 8007602:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007606:	2001      	movs	r0, #1
 8007608:	f7fb ffdc 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 800760c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8007610:	2002      	movs	r0, #2
 8007612:	f7fb ffd7 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 8007616:	f241 0130 	movw	r1, #4144	; 0x1030
 800761a:	2003      	movs	r0, #3
 800761c:	f7fb ffd2 	bl	80035c4 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8007620:	2100      	movs	r1, #0
 8007622:	2004      	movs	r0, #4
 8007624:	f7fb ffce 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8007628:	f240 2107 	movw	r1, #519	; 0x207
 800762c:	2008      	movs	r0, #8
 800762e:	f7fb ffc9 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8007632:	2100      	movs	r1, #0
 8007634:	2009      	movs	r0, #9
 8007636:	f7fb ffc5 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 800763a:	2100      	movs	r1, #0
 800763c:	200a      	movs	r0, #10
 800763e:	f7fb ffc1 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8007642:	2100      	movs	r1, #0
 8007644:	200c      	movs	r0, #12
 8007646:	f7fb ffbd 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 800764a:	2100      	movs	r1, #0
 800764c:	200d      	movs	r0, #13
 800764e:	f7fb ffb9 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8007652:	2100      	movs	r1, #0
 8007654:	200f      	movs	r0, #15
 8007656:	f7fb ffb5 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(20);
 800765a:	2014      	movs	r0, #20
 800765c:	f7f9 fa10 	bl	8000a80 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8007660:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8007664:	2010      	movs	r0, #16
 8007666:	f7fb ffad 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 800766a:	2101      	movs	r1, #1
 800766c:	2011      	movs	r0, #17
 800766e:	f7fb ffa9 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8007672:	2101      	movs	r1, #1
 8007674:	2017      	movs	r0, #23
 8007676:	f7fb ffa5 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 800767a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800767e:	2012      	movs	r0, #18
 8007680:	f7fb ffa0 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8007684:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007688:	2013      	movs	r0, #19
 800768a:	f7fb ff9b 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 800768e:	2109      	movs	r1, #9
 8007690:	2029      	movs	r0, #41	; 0x29
 8007692:	f7fb ff97 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8007696:	2109      	movs	r1, #9
 8007698:	202a      	movs	r0, #42	; 0x2a
 800769a:	f7fb ff93 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 800769e:	2100      	movs	r1, #0
 80076a0:	20a4      	movs	r0, #164	; 0xa4
 80076a2:	f7fb ff8f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 80076a6:	2100      	movs	r1, #0
 80076a8:	2050      	movs	r0, #80	; 0x50
 80076aa:	f7fb ff8b 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 80076ae:	21ef      	movs	r1, #239	; 0xef
 80076b0:	2051      	movs	r0, #81	; 0x51
 80076b2:	f7fb ff87 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 80076b6:	2100      	movs	r1, #0
 80076b8:	2052      	movs	r0, #82	; 0x52
 80076ba:	f7fb ff83 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 80076be:	f240 113f 	movw	r1, #319	; 0x13f
 80076c2:	2053      	movs	r0, #83	; 0x53
 80076c4:	f7fb ff7e 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 80076c8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80076cc:	2060      	movs	r0, #96	; 0x60
 80076ce:	f7fb ff79 	bl	80035c4 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 80076d2:	2101      	movs	r1, #1
 80076d4:	2061      	movs	r0, #97	; 0x61
 80076d6:	f7fb ff75 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 80076da:	2100      	movs	r1, #0
 80076dc:	206a      	movs	r0, #106	; 0x6a
 80076de:	f7fb ff71 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 80076e2:	2100      	movs	r1, #0
 80076e4:	2080      	movs	r0, #128	; 0x80
 80076e6:	f7fb ff6d 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 80076ea:	2100      	movs	r1, #0
 80076ec:	2081      	movs	r0, #129	; 0x81
 80076ee:	f7fb ff69 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 80076f2:	2100      	movs	r1, #0
 80076f4:	2082      	movs	r0, #130	; 0x82
 80076f6:	f7fb ff65 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 80076fa:	2100      	movs	r1, #0
 80076fc:	2083      	movs	r0, #131	; 0x83
 80076fe:	f7fb ff61 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8007702:	2100      	movs	r1, #0
 8007704:	2084      	movs	r0, #132	; 0x84
 8007706:	f7fb ff5d 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 800770a:	2100      	movs	r1, #0
 800770c:	2085      	movs	r0, #133	; 0x85
 800770e:	f7fb ff59 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8007712:	2113      	movs	r1, #19
 8007714:	2090      	movs	r0, #144	; 0x90
 8007716:	f7fb ff55 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 800771a:	2100      	movs	r1, #0
 800771c:	2092      	movs	r0, #146	; 0x92
 800771e:	f7fb ff51 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8007722:	2103      	movs	r1, #3
 8007724:	2093      	movs	r0, #147	; 0x93
 8007726:	f7fb ff4d 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 800772a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800772e:	2095      	movs	r0, #149	; 0x95
 8007730:	f7fb ff48 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8007734:	f240 1173 	movw	r1, #371	; 0x173
 8007738:	2007      	movs	r0, #7
 800773a:	f7fb ff43 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(50);
 800773e:	2032      	movs	r0, #50	; 0x32
 8007740:	f7f9 f99e 	bl	8000a80 <HAL_Delay>
 8007744:	f001 b8f2 	b.w	800892c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8007748:	4b8d      	ldr	r3, [pc, #564]	; (8007980 <LCD_Init+0x2e88>)
 800774a:	889b      	ldrh	r3, [r3, #4]
 800774c:	f241 5205 	movw	r2, #5381	; 0x1505
 8007750:	4293      	cmp	r3, r2
 8007752:	f040 8117 	bne.w	8007984 <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8007756:	2100      	movs	r1, #0
 8007758:	2007      	movs	r0, #7
 800775a:	f7fb ff33 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(50);
 800775e:	2032      	movs	r0, #50	; 0x32
 8007760:	f7f9 f98e 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8007764:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8007768:	2012      	movs	r0, #18
 800776a:	f7fb ff2b 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 800776e:	2101      	movs	r1, #1
 8007770:	20a4      	movs	r0, #164	; 0xa4
 8007772:	f7fb ff27 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8007776:	210f      	movs	r1, #15
 8007778:	2008      	movs	r0, #8
 800777a:	f7fb ff23 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 800777e:	2108      	movs	r1, #8
 8007780:	200a      	movs	r0, #10
 8007782:	f7fb ff1f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8007786:	2108      	movs	r1, #8
 8007788:	200d      	movs	r0, #13
 800778a:	f7fb ff1b 	bl	80035c4 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 800778e:	f240 7107 	movw	r1, #1799	; 0x707
 8007792:	2030      	movs	r0, #48	; 0x30
 8007794:	f7fb ff16 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8007798:	2107      	movs	r1, #7
 800779a:	2031      	movs	r0, #49	; 0x31
 800779c:	f7fb ff12 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 80077a0:	f240 6103 	movw	r1, #1539	; 0x603
 80077a4:	2032      	movs	r0, #50	; 0x32
 80077a6:	f7fb ff0d 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 80077aa:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80077ae:	2033      	movs	r0, #51	; 0x33
 80077b0:	f7fb ff08 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 80077b4:	f240 2102 	movw	r1, #514	; 0x202
 80077b8:	2034      	movs	r0, #52	; 0x34
 80077ba:	f7fb ff03 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 80077be:	2102      	movs	r1, #2
 80077c0:	2035      	movs	r0, #53	; 0x35
 80077c2:	f7fb feff 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 80077c6:	f641 710f 	movw	r1, #7951	; 0x1f0f
 80077ca:	2036      	movs	r0, #54	; 0x36
 80077cc:	f7fb fefa 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 80077d0:	f240 7107 	movw	r1, #1799	; 0x707
 80077d4:	2037      	movs	r0, #55	; 0x37
 80077d6:	f7fb fef5 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 80077da:	2100      	movs	r1, #0
 80077dc:	2038      	movs	r0, #56	; 0x38
 80077de:	f7fb fef1 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 80077e2:	2100      	movs	r1, #0
 80077e4:	2039      	movs	r0, #57	; 0x39
 80077e6:	f7fb feed 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 80077ea:	f240 7107 	movw	r1, #1799	; 0x707
 80077ee:	203a      	movs	r0, #58	; 0x3a
 80077f0:	f7fb fee8 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 80077f4:	2100      	movs	r1, #0
 80077f6:	203b      	movs	r0, #59	; 0x3b
 80077f8:	f7fb fee4 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 80077fc:	2107      	movs	r1, #7
 80077fe:	203c      	movs	r0, #60	; 0x3c
 8007800:	f7fb fee0 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8007804:	2100      	movs	r1, #0
 8007806:	203d      	movs	r0, #61	; 0x3d
 8007808:	f7fb fedc 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(50);
 800780c:	2032      	movs	r0, #50	; 0x32
 800780e:	f7f9 f937 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8007812:	2101      	movs	r1, #1
 8007814:	2007      	movs	r0, #7
 8007816:	f7fb fed5 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 800781a:	2101      	movs	r1, #1
 800781c:	2017      	movs	r0, #23
 800781e:	f7fb fed1 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(50);
 8007822:	2032      	movs	r0, #50	; 0x32
 8007824:	f7f9 f92c 	bl	8000a80 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8007828:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 800782c:	2010      	movs	r0, #16
 800782e:	f7fb fec9 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8007832:	f240 2117 	movw	r1, #535	; 0x217
 8007836:	2011      	movs	r0, #17
 8007838:	f7fb fec4 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 800783c:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8007840:	2012      	movs	r0, #18
 8007842:	f7fb febf 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8007846:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800784a:	2013      	movs	r0, #19
 800784c:	f7fb feba 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8007850:	2100      	movs	r1, #0
 8007852:	202a      	movs	r0, #42	; 0x2a
 8007854:	f7fb feb6 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8007858:	210a      	movs	r1, #10
 800785a:	2029      	movs	r0, #41	; 0x29
 800785c:	f7fb feb2 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8007860:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8007864:	2012      	movs	r0, #18
 8007866:	f7fb fead 	bl	80035c4 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 800786a:	2100      	movs	r1, #0
 800786c:	2050      	movs	r0, #80	; 0x50
 800786e:	f7fb fea9 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8007872:	21ef      	movs	r1, #239	; 0xef
 8007874:	2051      	movs	r0, #81	; 0x51
 8007876:	f7fb fea5 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800787a:	2100      	movs	r1, #0
 800787c:	2052      	movs	r0, #82	; 0x52
 800787e:	f7fb fea1 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8007882:	f240 113f 	movw	r1, #319	; 0x13f
 8007886:	2053      	movs	r0, #83	; 0x53
 8007888:	f7fb fe9c 	bl	80035c4 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 800788c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007890:	2060      	movs	r0, #96	; 0x60
 8007892:	f7fb fe97 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8007896:	2101      	movs	r1, #1
 8007898:	2061      	movs	r0, #97	; 0x61
 800789a:	f7fb fe93 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 800789e:	2100      	movs	r1, #0
 80078a0:	206a      	movs	r0, #106	; 0x6a
 80078a2:	f7fb fe8f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 80078a6:	2100      	movs	r1, #0
 80078a8:	2080      	movs	r0, #128	; 0x80
 80078aa:	f7fb fe8b 	bl	80035c4 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 80078ae:	2100      	movs	r1, #0
 80078b0:	2081      	movs	r0, #129	; 0x81
 80078b2:	f7fb fe87 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80078b6:	2100      	movs	r1, #0
 80078b8:	2082      	movs	r0, #130	; 0x82
 80078ba:	f7fb fe83 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80078be:	2100      	movs	r1, #0
 80078c0:	2083      	movs	r0, #131	; 0x83
 80078c2:	f7fb fe7f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80078c6:	2100      	movs	r1, #0
 80078c8:	2084      	movs	r0, #132	; 0x84
 80078ca:	f7fb fe7b 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80078ce:	2100      	movs	r1, #0
 80078d0:	2085      	movs	r0, #133	; 0x85
 80078d2:	f7fb fe77 	bl	80035c4 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 80078d6:	2113      	movs	r1, #19
 80078d8:	2090      	movs	r0, #144	; 0x90
 80078da:	f7fb fe73 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 80078de:	f44f 7140 	mov.w	r1, #768	; 0x300
 80078e2:	2092      	movs	r0, #146	; 0x92
 80078e4:	f7fb fe6e 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 80078e8:	2105      	movs	r1, #5
 80078ea:	2093      	movs	r0, #147	; 0x93
 80078ec:	f7fb fe6a 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 80078f0:	2100      	movs	r1, #0
 80078f2:	2095      	movs	r0, #149	; 0x95
 80078f4:	f7fb fe66 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 80078f8:	2100      	movs	r1, #0
 80078fa:	2097      	movs	r0, #151	; 0x97
 80078fc:	f7fb fe62 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8007900:	2100      	movs	r1, #0
 8007902:	2098      	movs	r0, #152	; 0x98
 8007904:	f7fb fe5e 	bl	80035c4 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8007908:	f44f 7180 	mov.w	r1, #256	; 0x100
 800790c:	2001      	movs	r0, #1
 800790e:	f7fb fe59 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8007912:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8007916:	2002      	movs	r0, #2
 8007918:	f7fb fe54 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 800791c:	f241 0138 	movw	r1, #4152	; 0x1038
 8007920:	2003      	movs	r0, #3
 8007922:	f7fb fe4f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8007926:	2100      	movs	r1, #0
 8007928:	2004      	movs	r0, #4
 800792a:	f7fb fe4b 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800792e:	2100      	movs	r1, #0
 8007930:	200c      	movs	r0, #12
 8007932:	f7fb fe47 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8007936:	2100      	movs	r1, #0
 8007938:	200f      	movs	r0, #15
 800793a:	f7fb fe43 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 800793e:	2100      	movs	r1, #0
 8007940:	2020      	movs	r0, #32
 8007942:	f7fb fe3f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8007946:	2100      	movs	r1, #0
 8007948:	2021      	movs	r0, #33	; 0x21
 800794a:	f7fb fe3b 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 800794e:	2121      	movs	r1, #33	; 0x21
 8007950:	2007      	movs	r0, #7
 8007952:	f7fb fe37 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(20);
 8007956:	2014      	movs	r0, #20
 8007958:	f7f9 f892 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 800795c:	2161      	movs	r1, #97	; 0x61
 800795e:	2007      	movs	r0, #7
 8007960:	f7fb fe30 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(20);
 8007964:	2014      	movs	r0, #20
 8007966:	f7f9 f88b 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 800796a:	f240 1173 	movw	r1, #371	; 0x173
 800796e:	2007      	movs	r0, #7
 8007970:	f7fb fe28 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(20);
 8007974:	2014      	movs	r0, #20
 8007976:	f7f9 f883 	bl	8000a80 <HAL_Delay>
 800797a:	f000 bfd7 	b.w	800892c <LCD_Init+0x3e34>
 800797e:	bf00      	nop
 8007980:	20000e18 	.word	0x20000e18
	} else if (lcddev.id == 0xB505) {
 8007984:	4bf0      	ldr	r3, [pc, #960]	; (8007d48 <LCD_Init+0x3250>)
 8007986:	889b      	ldrh	r3, [r3, #4]
 8007988:	f24b 5205 	movw	r2, #46341	; 0xb505
 800798c:	4293      	cmp	r3, r2
 800798e:	f040 8103 	bne.w	8007b98 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8007992:	2100      	movs	r1, #0
 8007994:	2000      	movs	r0, #0
 8007996:	f7fb fe15 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800799a:	2100      	movs	r1, #0
 800799c:	2000      	movs	r0, #0
 800799e:	f7fb fe11 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80079a2:	2100      	movs	r1, #0
 80079a4:	2000      	movs	r0, #0
 80079a6:	f7fb fe0d 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80079aa:	2100      	movs	r1, #0
 80079ac:	2000      	movs	r0, #0
 80079ae:	f7fb fe09 	bl	80035c4 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 80079b2:	2101      	movs	r1, #1
 80079b4:	20a4      	movs	r0, #164	; 0xa4
 80079b6:	f7fb fe05 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(20);
 80079ba:	2014      	movs	r0, #20
 80079bc:	f7f9 f860 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 80079c0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80079c4:	2060      	movs	r0, #96	; 0x60
 80079c6:	f7fb fdfd 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80079ca:	f240 2102 	movw	r1, #514	; 0x202
 80079ce:	2008      	movs	r0, #8
 80079d0:	f7fb fdf8 	bl	80035c4 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 80079d4:	f44f 7105 	mov.w	r1, #532	; 0x214
 80079d8:	2030      	movs	r0, #48	; 0x30
 80079da:	f7fb fdf3 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 80079de:	f243 7115 	movw	r1, #14101	; 0x3715
 80079e2:	2031      	movs	r0, #49	; 0x31
 80079e4:	f7fb fdee 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 80079e8:	f240 6104 	movw	r1, #1540	; 0x604
 80079ec:	2032      	movs	r0, #50	; 0x32
 80079ee:	f7fb fde9 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 80079f2:	f640 6116 	movw	r1, #3606	; 0xe16
 80079f6:	2033      	movs	r0, #51	; 0x33
 80079f8:	f7fb fde4 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 80079fc:	f242 2111 	movw	r1, #8721	; 0x2211
 8007a00:	2034      	movs	r0, #52	; 0x34
 8007a02:	f7fb fddf 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8007a06:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8007a0a:	2035      	movs	r0, #53	; 0x35
 8007a0c:	f7fb fdda 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8007a10:	f248 5107 	movw	r1, #34055	; 0x8507
 8007a14:	2036      	movs	r0, #54	; 0x36
 8007a16:	f7fb fdd5 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8007a1a:	f241 4107 	movw	r1, #5127	; 0x1407
 8007a1e:	2037      	movs	r0, #55	; 0x37
 8007a20:	f7fb fdd0 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8007a24:	f241 4103 	movw	r1, #5123	; 0x1403
 8007a28:	2038      	movs	r0, #56	; 0x38
 8007a2a:	f7fb fdcb 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8007a2e:	2120      	movs	r1, #32
 8007a30:	2039      	movs	r0, #57	; 0x39
 8007a32:	f7fb fdc7 	bl	80035c4 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 8007a36:	211a      	movs	r1, #26
 8007a38:	2090      	movs	r0, #144	; 0x90
 8007a3a:	f7fb fdc3 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8007a3e:	2100      	movs	r1, #0
 8007a40:	2010      	movs	r0, #16
 8007a42:	f7fb fdbf 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8007a46:	2107      	movs	r1, #7
 8007a48:	2011      	movs	r0, #17
 8007a4a:	f7fb fdbb 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8007a4e:	2100      	movs	r1, #0
 8007a50:	2012      	movs	r0, #18
 8007a52:	f7fb fdb7 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8007a56:	2100      	movs	r1, #0
 8007a58:	2013      	movs	r0, #19
 8007a5a:	f7fb fdb3 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(20);
 8007a5e:	2014      	movs	r0, #20
 8007a60:	f7f9 f80e 	bl	8000a80 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 8007a64:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8007a68:	2010      	movs	r0, #16
 8007a6a:	f7fb fdab 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8007a6e:	f240 1137 	movw	r1, #311	; 0x137
 8007a72:	2011      	movs	r0, #17
 8007a74:	f7fb fda6 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(20);
 8007a78:	2014      	movs	r0, #20
 8007a7a:	f7f9 f801 	bl	8000a80 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8007a7e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8007a82:	2012      	movs	r0, #18
 8007a84:	f7fb fd9e 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(20);
 8007a88:	2014      	movs	r0, #20
 8007a8a:	f7f8 fff9 	bl	8000a80 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8007a8e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8007a92:	2013      	movs	r0, #19
 8007a94:	f7fb fd96 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8007a98:	2180      	movs	r1, #128	; 0x80
 8007a9a:	202a      	movs	r0, #42	; 0x2a
 8007a9c:	f7fb fd92 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8007aa0:	2148      	movs	r1, #72	; 0x48
 8007aa2:	2029      	movs	r0, #41	; 0x29
 8007aa4:	f7fb fd8e 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(20);
 8007aa8:	2014      	movs	r0, #20
 8007aaa:	f7f8 ffe9 	bl	8000a80 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8007aae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007ab2:	2001      	movs	r0, #1
 8007ab4:	f7fb fd86 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8007ab8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8007abc:	2002      	movs	r0, #2
 8007abe:	f7fb fd81 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8007ac2:	f241 0138 	movw	r1, #4152	; 0x1038
 8007ac6:	2003      	movs	r0, #3
 8007ac8:	f7fb fd7c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8007acc:	f240 2102 	movw	r1, #514	; 0x202
 8007ad0:	2008      	movs	r0, #8
 8007ad2:	f7fb fd77 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	200a      	movs	r0, #10
 8007ada:	f7fb fd73 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8007ade:	2100      	movs	r1, #0
 8007ae0:	200c      	movs	r0, #12
 8007ae2:	f7fb fd6f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	200d      	movs	r0, #13
 8007aea:	f7fb fd6b 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8007aee:	2130      	movs	r1, #48	; 0x30
 8007af0:	200e      	movs	r0, #14
 8007af2:	f7fb fd67 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8007af6:	2100      	movs	r1, #0
 8007af8:	2050      	movs	r0, #80	; 0x50
 8007afa:	f7fb fd63 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8007afe:	21ef      	movs	r1, #239	; 0xef
 8007b00:	2051      	movs	r0, #81	; 0x51
 8007b02:	f7fb fd5f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8007b06:	2100      	movs	r1, #0
 8007b08:	2052      	movs	r0, #82	; 0x52
 8007b0a:	f7fb fd5b 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8007b0e:	f240 113f 	movw	r1, #319	; 0x13f
 8007b12:	2053      	movs	r0, #83	; 0x53
 8007b14:	f7fb fd56 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8007b18:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007b1c:	2060      	movs	r0, #96	; 0x60
 8007b1e:	f7fb fd51 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8007b22:	2101      	movs	r1, #1
 8007b24:	2061      	movs	r0, #97	; 0x61
 8007b26:	f7fb fd4d 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	206a      	movs	r0, #106	; 0x6a
 8007b2e:	f7fb fd49 	bl	80035c4 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 8007b32:	2111      	movs	r1, #17
 8007b34:	2090      	movs	r0, #144	; 0x90
 8007b36:	f7fb fd45 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8007b3a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007b3e:	2092      	movs	r0, #146	; 0x92
 8007b40:	f7fb fd40 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 8007b44:	f240 4102 	movw	r1, #1026	; 0x402
 8007b48:	2093      	movs	r0, #147	; 0x93
 8007b4a:	f7fb fd3b 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8007b4e:	2102      	movs	r1, #2
 8007b50:	2094      	movs	r0, #148	; 0x94
 8007b52:	f7fb fd37 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(20);
 8007b56:	2014      	movs	r0, #20
 8007b58:	f7f8 ff92 	bl	8000a80 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 8007b5c:	2101      	movs	r1, #1
 8007b5e:	2007      	movs	r0, #7
 8007b60:	f7fb fd30 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(20);
 8007b64:	2014      	movs	r0, #20
 8007b66:	f7f8 ff8b 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8007b6a:	2161      	movs	r1, #97	; 0x61
 8007b6c:	2007      	movs	r0, #7
 8007b6e:	f7fb fd29 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 8007b72:	f240 1173 	movw	r1, #371	; 0x173
 8007b76:	2007      	movs	r0, #7
 8007b78:	f7fb fd24 	bl	80035c4 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	2020      	movs	r0, #32
 8007b80:	f7fb fd20 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8007b84:	2100      	movs	r1, #0
 8007b86:	2021      	movs	r0, #33	; 0x21
 8007b88:	f7fb fd1c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 8007b8c:	2122      	movs	r1, #34	; 0x22
 8007b8e:	2000      	movs	r0, #0
 8007b90:	f7fb fd18 	bl	80035c4 <LCD_WriteReg>
 8007b94:	f000 beca 	b.w	800892c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8007b98:	4b6b      	ldr	r3, [pc, #428]	; (8007d48 <LCD_Init+0x3250>)
 8007b9a:	889b      	ldrh	r3, [r3, #4]
 8007b9c:	f24c 5205 	movw	r2, #50437	; 0xc505
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	f040 80d3 	bne.w	8007d4c <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	2000      	movs	r0, #0
 8007baa:	f7fb fd0b 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8007bae:	2100      	movs	r1, #0
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	f7fb fd07 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(20);
 8007bb6:	2014      	movs	r0, #20
 8007bb8:	f7f8 ff62 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	2000      	movs	r0, #0
 8007bc0:	f7fb fd00 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	2000      	movs	r0, #0
 8007bc8:	f7fb fcfc 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8007bcc:	2100      	movs	r1, #0
 8007bce:	2000      	movs	r0, #0
 8007bd0:	f7fb fcf8 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	2000      	movs	r0, #0
 8007bd8:	f7fb fcf4 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8007bdc:	2101      	movs	r1, #1
 8007bde:	20a4      	movs	r0, #164	; 0xa4
 8007be0:	f7fb fcf0 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(20);
 8007be4:	2014      	movs	r0, #20
 8007be6:	f7f8 ff4b 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8007bea:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007bee:	2060      	movs	r0, #96	; 0x60
 8007bf0:	f7fb fce8 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 8007bf4:	f640 0106 	movw	r1, #2054	; 0x806
 8007bf8:	2008      	movs	r0, #8
 8007bfa:	f7fb fce3 	bl	80035c4 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8007bfe:	f240 7103 	movw	r1, #1795	; 0x703
 8007c02:	2030      	movs	r0, #48	; 0x30
 8007c04:	f7fb fcde 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8007c08:	2101      	movs	r1, #1
 8007c0a:	2031      	movs	r0, #49	; 0x31
 8007c0c:	f7fb fcda 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8007c10:	2104      	movs	r1, #4
 8007c12:	2032      	movs	r0, #50	; 0x32
 8007c14:	f7fb fcd6 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8007c18:	f44f 7181 	mov.w	r1, #258	; 0x102
 8007c1c:	2033      	movs	r0, #51	; 0x33
 8007c1e:	f7fb fcd1 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 8007c22:	f44f 7140 	mov.w	r1, #768	; 0x300
 8007c26:	2034      	movs	r0, #52	; 0x34
 8007c28:	f7fb fccc 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 8007c2c:	f240 1103 	movw	r1, #259	; 0x103
 8007c30:	2035      	movs	r0, #53	; 0x35
 8007c32:	f7fb fcc7 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 8007c36:	211f      	movs	r1, #31
 8007c38:	2036      	movs	r0, #54	; 0x36
 8007c3a:	f7fb fcc3 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 8007c3e:	f240 7103 	movw	r1, #1795	; 0x703
 8007c42:	2037      	movs	r0, #55	; 0x37
 8007c44:	f7fb fcbe 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 8007c48:	2101      	movs	r1, #1
 8007c4a:	2038      	movs	r0, #56	; 0x38
 8007c4c:	f7fb fcba 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 8007c50:	2104      	movs	r1, #4
 8007c52:	2039      	movs	r0, #57	; 0x39
 8007c54:	f7fb fcb6 	bl	80035c4 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8007c58:	2115      	movs	r1, #21
 8007c5a:	2090      	movs	r0, #144	; 0x90
 8007c5c:	f7fb fcb2 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8007c60:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8007c64:	2010      	movs	r0, #16
 8007c66:	f7fb fcad 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 8007c6a:	f240 2147 	movw	r1, #583	; 0x247
 8007c6e:	2011      	movs	r0, #17
 8007c70:	f7fb fca8 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 8007c74:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8007c78:	2012      	movs	r0, #18
 8007c7a:	f7fb fca3 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 8007c7e:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8007c82:	2013      	movs	r0, #19
 8007c84:	f7fb fc9e 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(120);
 8007c88:	2078      	movs	r0, #120	; 0x78
 8007c8a:	f7f8 fef9 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 8007c8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007c92:	2001      	movs	r0, #1
 8007c94:	f7fb fc96 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8007c98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c9c:	2002      	movs	r0, #2
 8007c9e:	f7fb fc91 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8007ca2:	f241 0130 	movw	r1, #4144	; 0x1030
 8007ca6:	2003      	movs	r0, #3
 8007ca8:	f7fb fc8c 	bl	80035c4 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8007cac:	2108      	movs	r1, #8
 8007cae:	200a      	movs	r0, #10
 8007cb0:	f7fb fc88 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	200c      	movs	r0, #12
 8007cb8:	f7fb fc84 	bl	80035c4 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8007cbc:	2120      	movs	r1, #32
 8007cbe:	200e      	movs	r0, #14
 8007cc0:	f7fb fc80 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	200f      	movs	r0, #15
 8007cc8:	f7fb fc7c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8007ccc:	2100      	movs	r1, #0
 8007cce:	2020      	movs	r0, #32
 8007cd0:	f7fb fc78 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	2021      	movs	r0, #33	; 0x21
 8007cd8:	f7fb fc74 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 8007cdc:	213d      	movs	r1, #61	; 0x3d
 8007cde:	202a      	movs	r0, #42	; 0x2a
 8007ce0:	f7fb fc70 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(20);
 8007ce4:	2014      	movs	r0, #20
 8007ce6:	f7f8 fecb 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8007cea:	212d      	movs	r1, #45	; 0x2d
 8007cec:	2029      	movs	r0, #41	; 0x29
 8007cee:	f7fb fc69 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	2050      	movs	r0, #80	; 0x50
 8007cf6:	f7fb fc65 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8007cfa:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8007cfe:	2051      	movs	r0, #81	; 0x51
 8007d00:	f7fb fc60 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8007d04:	2100      	movs	r1, #0
 8007d06:	2052      	movs	r0, #82	; 0x52
 8007d08:	f7fb fc5c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8007d0c:	f240 113f 	movw	r1, #319	; 0x13f
 8007d10:	2053      	movs	r0, #83	; 0x53
 8007d12:	f7fb fc57 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8007d16:	2100      	movs	r1, #0
 8007d18:	2061      	movs	r0, #97	; 0x61
 8007d1a:	f7fb fc53 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8007d1e:	2100      	movs	r1, #0
 8007d20:	206a      	movs	r0, #106	; 0x6a
 8007d22:	f7fb fc4f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8007d26:	f44f 7140 	mov.w	r1, #768	; 0x300
 8007d2a:	2092      	movs	r0, #146	; 0x92
 8007d2c:	f7fb fc4a 	bl	80035c4 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 8007d30:	2105      	movs	r1, #5
 8007d32:	2093      	movs	r0, #147	; 0x93
 8007d34:	f7fb fc46 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8007d38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d3c:	2007      	movs	r0, #7
 8007d3e:	f7fb fc41 	bl	80035c4 <LCD_WriteReg>
 8007d42:	f000 bdf3 	b.w	800892c <LCD_Init+0x3e34>
 8007d46:	bf00      	nop
 8007d48:	20000e18 	.word	0x20000e18
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 8007d4c:	4bc2      	ldr	r3, [pc, #776]	; (8008058 <LCD_Init+0x3560>)
 8007d4e:	889b      	ldrh	r3, [r3, #4]
 8007d50:	f648 1289 	movw	r2, #35209	; 0x8989
 8007d54:	4293      	cmp	r3, r2
 8007d56:	f040 80bc 	bne.w	8007ed2 <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	f7fb fc31 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 8007d62:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 8007d66:	2003      	movs	r0, #3
 8007d68:	f7fb fc2c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	200c      	movs	r0, #12
 8007d70:	f7fb fc28 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 8007d74:	f640 010c 	movw	r1, #2060	; 0x80c
 8007d78:	200d      	movs	r0, #13
 8007d7a:	f7fb fc23 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 8007d7e:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 8007d82:	200e      	movs	r0, #14
 8007d84:	f7fb fc1e 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 8007d88:	21b0      	movs	r1, #176	; 0xb0
 8007d8a:	201e      	movs	r0, #30
 8007d8c:	f7fb fc1a 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8007d90:	f642 313f 	movw	r1, #11071	; 0x2b3f
 8007d94:	2001      	movs	r0, #1
 8007d96:	f7fb fc15 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 8007d9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007d9e:	2002      	movs	r0, #2
 8007da0:	f7fb fc10 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8007da4:	2100      	movs	r1, #0
 8007da6:	2010      	movs	r0, #16
 8007da8:	f7fb fc0c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 8007dac:	f246 0178 	movw	r1, #24696	; 0x6078
 8007db0:	2011      	movs	r0, #17
 8007db2:	f7fb fc07 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 8007db6:	2100      	movs	r1, #0
 8007db8:	2005      	movs	r0, #5
 8007dba:	f7fb fc03 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	2006      	movs	r0, #6
 8007dc2:	f7fb fbff 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 8007dc6:	f64e 711c 	movw	r1, #61212	; 0xef1c
 8007dca:	2016      	movs	r0, #22
 8007dcc:	f7fb fbfa 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8007dd0:	2103      	movs	r1, #3
 8007dd2:	2017      	movs	r0, #23
 8007dd4:	f7fb fbf6 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8007dd8:	f240 2133 	movw	r1, #563	; 0x233
 8007ddc:	2007      	movs	r0, #7
 8007dde:	f7fb fbf1 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 8007de2:	2100      	movs	r1, #0
 8007de4:	200b      	movs	r0, #11
 8007de6:	f7fb fbed 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 8007dea:	2100      	movs	r1, #0
 8007dec:	200f      	movs	r0, #15
 8007dee:	f7fb fbe9 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 8007df2:	2100      	movs	r1, #0
 8007df4:	2041      	movs	r0, #65	; 0x41
 8007df6:	f7fb fbe5 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	2042      	movs	r0, #66	; 0x42
 8007dfe:	f7fb fbe1 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 8007e02:	2100      	movs	r1, #0
 8007e04:	2048      	movs	r0, #72	; 0x48
 8007e06:	f7fb fbdd 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 8007e0a:	f240 113f 	movw	r1, #319	; 0x13f
 8007e0e:	2049      	movs	r0, #73	; 0x49
 8007e10:	f7fb fbd8 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 8007e14:	2100      	movs	r1, #0
 8007e16:	204a      	movs	r0, #74	; 0x4a
 8007e18:	f7fb fbd4 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	204b      	movs	r0, #75	; 0x4b
 8007e20:	f7fb fbd0 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 8007e24:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8007e28:	2044      	movs	r0, #68	; 0x44
 8007e2a:	f7fb fbcb 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 8007e2e:	2100      	movs	r1, #0
 8007e30:	2045      	movs	r0, #69	; 0x45
 8007e32:	f7fb fbc7 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 8007e36:	f240 113f 	movw	r1, #319	; 0x13f
 8007e3a:	2046      	movs	r0, #70	; 0x46
 8007e3c:	f7fb fbc2 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 8007e40:	f240 7107 	movw	r1, #1799	; 0x707
 8007e44:	2030      	movs	r0, #48	; 0x30
 8007e46:	f7fb fbbd 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 8007e4a:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007e4e:	2031      	movs	r0, #49	; 0x31
 8007e50:	f7fb fbb8 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 8007e54:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007e58:	2032      	movs	r0, #50	; 0x32
 8007e5a:	f7fb fbb3 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 8007e5e:	f240 5102 	movw	r1, #1282	; 0x502
 8007e62:	2033      	movs	r0, #51	; 0x33
 8007e64:	f7fb fbae 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 8007e68:	f240 5107 	movw	r1, #1287	; 0x507
 8007e6c:	2034      	movs	r0, #52	; 0x34
 8007e6e:	f7fb fba9 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8007e72:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007e76:	2035      	movs	r0, #53	; 0x35
 8007e78:	f7fb fba4 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 8007e7c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007e80:	2036      	movs	r0, #54	; 0x36
 8007e82:	f7fb fb9f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 8007e86:	f240 5102 	movw	r1, #1282	; 0x502
 8007e8a:	2037      	movs	r0, #55	; 0x37
 8007e8c:	f7fb fb9a 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8007e90:	f240 3102 	movw	r1, #770	; 0x302
 8007e94:	203a      	movs	r0, #58	; 0x3a
 8007e96:	f7fb fb95 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 8007e9a:	f240 3102 	movw	r1, #770	; 0x302
 8007e9e:	203b      	movs	r0, #59	; 0x3b
 8007ea0:	f7fb fb90 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	2023      	movs	r0, #35	; 0x23
 8007ea8:	f7fb fb8c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 8007eac:	2100      	movs	r1, #0
 8007eae:	2024      	movs	r0, #36	; 0x24
 8007eb0:	f7fb fb88 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 8007eb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007eb8:	2025      	movs	r0, #37	; 0x25
 8007eba:	f7fb fb83 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 8007ebe:	2100      	movs	r1, #0
 8007ec0:	204f      	movs	r0, #79	; 0x4f
 8007ec2:	f7fb fb7f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	204e      	movs	r0, #78	; 0x4e
 8007eca:	f7fb fb7b 	bl	80035c4 <LCD_WriteReg>
 8007ece:	f000 bd2d 	b.w	800892c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 8007ed2:	4b61      	ldr	r3, [pc, #388]	; (8008058 <LCD_Init+0x3560>)
 8007ed4:	889b      	ldrh	r3, [r3, #4]
 8007ed6:	f244 5231 	movw	r2, #17713	; 0x4531
 8007eda:	4293      	cmp	r3, r2
 8007edc:	f040 80be 	bne.w	800805c <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	2000      	movs	r0, #0
 8007ee4:	f7fb fb6e 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(10);
 8007ee8:	200a      	movs	r0, #10
 8007eea:	f7f8 fdc9 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 8007eee:	f241 6128 	movw	r1, #5672	; 0x1628
 8007ef2:	2010      	movs	r0, #16
 8007ef4:	f7fb fb66 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8007ef8:	210e      	movs	r1, #14
 8007efa:	2012      	movs	r0, #18
 8007efc:	f7fb fb62 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8007f00:	f640 2139 	movw	r1, #2617	; 0xa39
 8007f04:	2013      	movs	r0, #19
 8007f06:	f7fb fb5d 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(10);
 8007f0a:	200a      	movs	r0, #10
 8007f0c:	f7f8 fdb8 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8007f10:	2140      	movs	r1, #64	; 0x40
 8007f12:	2011      	movs	r0, #17
 8007f14:	f7fb fb56 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8007f18:	2150      	movs	r1, #80	; 0x50
 8007f1a:	2015      	movs	r0, #21
 8007f1c:	f7fb fb52 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(10);
 8007f20:	200a      	movs	r0, #10
 8007f22:	f7f8 fdad 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 8007f26:	211e      	movs	r1, #30
 8007f28:	2012      	movs	r0, #18
 8007f2a:	f7fb fb4b 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(10);
 8007f2e:	200a      	movs	r0, #10
 8007f30:	f7f8 fda6 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 8007f34:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8007f38:	2010      	movs	r0, #16
 8007f3a:	f7fb fb43 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 8007f3e:	f642 2139 	movw	r1, #10809	; 0x2a39
 8007f42:	2013      	movs	r0, #19
 8007f44:	f7fb fb3e 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(10);
 8007f48:	200a      	movs	r0, #10
 8007f4a:	f7f8 fd99 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 8007f4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007f52:	2001      	movs	r0, #1
 8007f54:	f7fb fb36 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8007f58:	f44f 7140 	mov.w	r1, #768	; 0x300
 8007f5c:	2002      	movs	r0, #2
 8007f5e:	f7fb fb31 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 8007f62:	f241 0138 	movw	r1, #4152	; 0x1038
 8007f66:	2003      	movs	r0, #3
 8007f68:	f7fb fb2c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 8007f6c:	f240 2102 	movw	r1, #514	; 0x202
 8007f70:	2008      	movs	r0, #8
 8007f72:	f7fb fb27 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8007f76:	2108      	movs	r1, #8
 8007f78:	200a      	movs	r0, #10
 8007f7a:	f7fb fb23 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 8007f7e:	2100      	movs	r1, #0
 8007f80:	2030      	movs	r0, #48	; 0x30
 8007f82:	f7fb fb1f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8007f86:	f240 4102 	movw	r1, #1026	; 0x402
 8007f8a:	2031      	movs	r0, #49	; 0x31
 8007f8c:	f7fb fb1a 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8007f90:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007f94:	2032      	movs	r0, #50	; 0x32
 8007f96:	f7fb fb15 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 8007f9a:	f240 5103 	movw	r1, #1283	; 0x503
 8007f9e:	2033      	movs	r0, #51	; 0x33
 8007fa0:	f7fb fb10 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 8007fa4:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007fa8:	2034      	movs	r0, #52	; 0x34
 8007faa:	f7fb fb0b 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 8007fae:	f240 3101 	movw	r1, #769	; 0x301
 8007fb2:	2035      	movs	r0, #53	; 0x35
 8007fb4:	f7fb fb06 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8007fb8:	f240 7107 	movw	r1, #1799	; 0x707
 8007fbc:	2036      	movs	r0, #54	; 0x36
 8007fbe:	f7fb fb01 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8007fc2:	f240 3105 	movw	r1, #773	; 0x305
 8007fc6:	2037      	movs	r0, #55	; 0x37
 8007fc8:	f7fb fafc 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 8007fcc:	f44f 7102 	mov.w	r1, #520	; 0x208
 8007fd0:	2038      	movs	r0, #56	; 0x38
 8007fd2:	f7fb faf7 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 8007fd6:	f640 710b 	movw	r1, #3851	; 0xf0b
 8007fda:	2039      	movs	r0, #57	; 0x39
 8007fdc:	f7fb faf2 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8007fe0:	2102      	movs	r1, #2
 8007fe2:	2041      	movs	r0, #65	; 0x41
 8007fe4:	f7fb faee 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8007fe8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007fec:	2060      	movs	r0, #96	; 0x60
 8007fee:	f7fb fae9 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8007ff2:	2101      	movs	r1, #1
 8007ff4:	2061      	movs	r0, #97	; 0x61
 8007ff6:	f7fb fae5 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 8007ffa:	f44f 7104 	mov.w	r1, #528	; 0x210
 8007ffe:	2090      	movs	r0, #144	; 0x90
 8008000:	f7fb fae0 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 8008004:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8008008:	2092      	movs	r0, #146	; 0x92
 800800a:	f7fb fadb 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 800800e:	2104      	movs	r1, #4
 8008010:	2093      	movs	r0, #147	; 0x93
 8008012:	f7fb fad7 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 8008016:	f44f 7180 	mov.w	r1, #256	; 0x100
 800801a:	20a0      	movs	r0, #160	; 0xa0
 800801c:	f7fb fad2 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8008020:	2101      	movs	r1, #1
 8008022:	2007      	movs	r0, #7
 8008024:	f7fb face 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8008028:	2121      	movs	r1, #33	; 0x21
 800802a:	2007      	movs	r0, #7
 800802c:	f7fb faca 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8008030:	2123      	movs	r1, #35	; 0x23
 8008032:	2007      	movs	r0, #7
 8008034:	f7fb fac6 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8008038:	2133      	movs	r1, #51	; 0x33
 800803a:	2007      	movs	r0, #7
 800803c:	f7fb fac2 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8008040:	f240 1133 	movw	r1, #307	; 0x133
 8008044:	2007      	movs	r0, #7
 8008046:	f7fb fabd 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 800804a:	2100      	movs	r1, #0
 800804c:	20a0      	movs	r0, #160	; 0xa0
 800804e:	f7fb fab9 	bl	80035c4 <LCD_WriteReg>
 8008052:	f000 bc6b 	b.w	800892c <LCD_Init+0x3e34>
 8008056:	bf00      	nop
 8008058:	20000e18 	.word	0x20000e18
	} else if (lcddev.id == 0x4535) {
 800805c:	4b5b      	ldr	r3, [pc, #364]	; (80081cc <LCD_Init+0x36d4>)
 800805e:	889b      	ldrh	r3, [r3, #4]
 8008060:	f244 5235 	movw	r2, #17717	; 0x4535
 8008064:	4293      	cmp	r3, r2
 8008066:	f040 80b3 	bne.w	80081d0 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 800806a:	2130      	movs	r1, #48	; 0x30
 800806c:	2015      	movs	r0, #21
 800806e:	f7fb faa9 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 8008072:	2110      	movs	r1, #16
 8008074:	209a      	movs	r0, #154	; 0x9a
 8008076:	f7fb faa5 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 800807a:	2120      	movs	r1, #32
 800807c:	2011      	movs	r0, #17
 800807e:	f7fb faa1 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 8008082:	f243 4128 	movw	r1, #13352	; 0x3428
 8008086:	2010      	movs	r0, #16
 8008088:	f7fb fa9c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 800808c:	2102      	movs	r1, #2
 800808e:	2012      	movs	r0, #18
 8008090:	f7fb fa98 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 8008094:	f241 0138 	movw	r1, #4152	; 0x1038
 8008098:	2013      	movs	r0, #19
 800809a:	f7fb fa93 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(40);
 800809e:	2028      	movs	r0, #40	; 0x28
 80080a0:	f7f8 fcee 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 80080a4:	2112      	movs	r1, #18
 80080a6:	2012      	movs	r0, #18
 80080a8:	f7fb fa8c 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(40);
 80080ac:	2028      	movs	r0, #40	; 0x28
 80080ae:	f7f8 fce7 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 80080b2:	f243 4120 	movw	r1, #13344	; 0x3420
 80080b6:	2010      	movs	r0, #16
 80080b8:	f7fb fa84 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 80080bc:	f243 0138 	movw	r1, #12344	; 0x3038
 80080c0:	2013      	movs	r0, #19
 80080c2:	f7fb fa7f 	bl	80035c4 <LCD_WriteReg>
		HAL_Delay(70);
 80080c6:	2046      	movs	r0, #70	; 0x46
 80080c8:	f7f8 fcda 	bl	8000a80 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 80080cc:	2100      	movs	r1, #0
 80080ce:	2030      	movs	r0, #48	; 0x30
 80080d0:	f7fb fa78 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 80080d4:	f240 4102 	movw	r1, #1026	; 0x402
 80080d8:	2031      	movs	r0, #49	; 0x31
 80080da:	f7fb fa73 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 80080de:	f240 3107 	movw	r1, #775	; 0x307
 80080e2:	2032      	movs	r0, #50	; 0x32
 80080e4:	f7fb fa6e 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 80080e8:	f44f 7141 	mov.w	r1, #772	; 0x304
 80080ec:	2033      	movs	r0, #51	; 0x33
 80080ee:	f7fb fa69 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 80080f2:	2104      	movs	r1, #4
 80080f4:	2034      	movs	r0, #52	; 0x34
 80080f6:	f7fb fa65 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 80080fa:	f240 4101 	movw	r1, #1025	; 0x401
 80080fe:	2035      	movs	r0, #53	; 0x35
 8008100:	f7fb fa60 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8008104:	f240 7107 	movw	r1, #1799	; 0x707
 8008108:	2036      	movs	r0, #54	; 0x36
 800810a:	f7fb fa5b 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 800810e:	f240 3105 	movw	r1, #773	; 0x305
 8008112:	2037      	movs	r0, #55	; 0x37
 8008114:	f7fb fa56 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8008118:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800811c:	2038      	movs	r0, #56	; 0x38
 800811e:	f7fb fa51 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 8008122:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8008126:	2039      	movs	r0, #57	; 0x39
 8008128:	f7fb fa4c 	bl	80035c4 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 800812c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008130:	2001      	movs	r0, #1
 8008132:	f7fb fa47 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8008136:	f44f 7140 	mov.w	r1, #768	; 0x300
 800813a:	2002      	movs	r0, #2
 800813c:	f7fb fa42 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 8008140:	f241 0130 	movw	r1, #4144	; 0x1030
 8008144:	2003      	movs	r0, #3
 8008146:	f7fb fa3d 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 800814a:	f640 0108 	movw	r1, #2056	; 0x808
 800814e:	2008      	movs	r0, #8
 8008150:	f7fb fa38 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8008154:	2108      	movs	r1, #8
 8008156:	200a      	movs	r0, #10
 8008158:	f7fb fa34 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 800815c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8008160:	2060      	movs	r0, #96	; 0x60
 8008162:	f7fb fa2f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8008166:	2101      	movs	r1, #1
 8008168:	2061      	movs	r0, #97	; 0x61
 800816a:	f7fb fa2b 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 800816e:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8008172:	2090      	movs	r0, #144	; 0x90
 8008174:	f7fb fa26 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 8008178:	f44f 7180 	mov.w	r1, #256	; 0x100
 800817c:	2092      	movs	r0, #146	; 0x92
 800817e:	f7fb fa21 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 8008182:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008186:	2093      	movs	r0, #147	; 0x93
 8008188:	f7fb fa1c 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 800818c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8008190:	20a0      	movs	r0, #160	; 0xa0
 8008192:	f7fb fa17 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 8008196:	2110      	movs	r1, #16
 8008198:	20a3      	movs	r0, #163	; 0xa3
 800819a:	f7fb fa13 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 800819e:	2101      	movs	r1, #1
 80081a0:	2007      	movs	r0, #7
 80081a2:	f7fb fa0f 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 80081a6:	2121      	movs	r1, #33	; 0x21
 80081a8:	2007      	movs	r0, #7
 80081aa:	f7fb fa0b 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80081ae:	2123      	movs	r1, #35	; 0x23
 80081b0:	2007      	movs	r0, #7
 80081b2:	f7fb fa07 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80081b6:	2133      	movs	r1, #51	; 0x33
 80081b8:	2007      	movs	r0, #7
 80081ba:	f7fb fa03 	bl	80035c4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 80081be:	f240 1133 	movw	r1, #307	; 0x133
 80081c2:	2007      	movs	r0, #7
 80081c4:	f7fb f9fe 	bl	80035c4 <LCD_WriteReg>
 80081c8:	e3b0      	b.n	800892c <LCD_Init+0x3e34>
 80081ca:	bf00      	nop
 80081cc:	20000e18 	.word	0x20000e18
	} else if (lcddev.id == 0X1963) {
 80081d0:	4ba8      	ldr	r3, [pc, #672]	; (8008474 <LCD_Init+0x397c>)
 80081d2:	889b      	ldrh	r3, [r3, #4]
 80081d4:	f641 1263 	movw	r2, #6499	; 0x1963
 80081d8:	4293      	cmp	r3, r2
 80081da:	f040 83a7 	bne.w	800892c <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 80081de:	20e2      	movs	r0, #226	; 0xe2
 80081e0:	f7fb f964 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 80081e4:	4ba4      	ldr	r3, [pc, #656]	; (8008478 <LCD_Init+0x3980>)
 80081e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081ea:	611a      	str	r2, [r3, #16]
 80081ec:	4ba2      	ldr	r3, [pc, #648]	; (8008478 <LCD_Init+0x3980>)
 80081ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081f2:	615a      	str	r2, [r3, #20]
 80081f4:	4ba1      	ldr	r3, [pc, #644]	; (800847c <LCD_Init+0x3984>)
 80081f6:	221d      	movs	r2, #29
 80081f8:	60da      	str	r2, [r3, #12]
 80081fa:	4b9f      	ldr	r3, [pc, #636]	; (8008478 <LCD_Init+0x3980>)
 80081fc:	2280      	movs	r2, #128	; 0x80
 80081fe:	615a      	str	r2, [r3, #20]
 8008200:	4b9d      	ldr	r3, [pc, #628]	; (8008478 <LCD_Init+0x3980>)
 8008202:	2280      	movs	r2, #128	; 0x80
 8008204:	611a      	str	r2, [r3, #16]
 8008206:	4b9c      	ldr	r3, [pc, #624]	; (8008478 <LCD_Init+0x3980>)
 8008208:	f44f 7200 	mov.w	r2, #512	; 0x200
 800820c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 800820e:	4b9a      	ldr	r3, [pc, #616]	; (8008478 <LCD_Init+0x3980>)
 8008210:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008214:	611a      	str	r2, [r3, #16]
 8008216:	4b98      	ldr	r3, [pc, #608]	; (8008478 <LCD_Init+0x3980>)
 8008218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800821c:	615a      	str	r2, [r3, #20]
 800821e:	4b97      	ldr	r3, [pc, #604]	; (800847c <LCD_Init+0x3984>)
 8008220:	2202      	movs	r2, #2
 8008222:	60da      	str	r2, [r3, #12]
 8008224:	4b94      	ldr	r3, [pc, #592]	; (8008478 <LCD_Init+0x3980>)
 8008226:	2280      	movs	r2, #128	; 0x80
 8008228:	615a      	str	r2, [r3, #20]
 800822a:	4b93      	ldr	r3, [pc, #588]	; (8008478 <LCD_Init+0x3980>)
 800822c:	2280      	movs	r2, #128	; 0x80
 800822e:	611a      	str	r2, [r3, #16]
 8008230:	4b91      	ldr	r3, [pc, #580]	; (8008478 <LCD_Init+0x3980>)
 8008232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008236:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 8008238:	4b8f      	ldr	r3, [pc, #572]	; (8008478 <LCD_Init+0x3980>)
 800823a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800823e:	611a      	str	r2, [r3, #16]
 8008240:	4b8d      	ldr	r3, [pc, #564]	; (8008478 <LCD_Init+0x3980>)
 8008242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008246:	615a      	str	r2, [r3, #20]
 8008248:	4b8c      	ldr	r3, [pc, #560]	; (800847c <LCD_Init+0x3984>)
 800824a:	2204      	movs	r2, #4
 800824c:	60da      	str	r2, [r3, #12]
 800824e:	4b8a      	ldr	r3, [pc, #552]	; (8008478 <LCD_Init+0x3980>)
 8008250:	2280      	movs	r2, #128	; 0x80
 8008252:	615a      	str	r2, [r3, #20]
 8008254:	4b88      	ldr	r3, [pc, #544]	; (8008478 <LCD_Init+0x3980>)
 8008256:	2280      	movs	r2, #128	; 0x80
 8008258:	611a      	str	r2, [r3, #16]
 800825a:	4b87      	ldr	r3, [pc, #540]	; (8008478 <LCD_Init+0x3980>)
 800825c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008260:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 8008262:	2001      	movs	r0, #1
 8008264:	f7f8 fc0c 	bl	8000a80 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8008268:	20e0      	movs	r0, #224	; 0xe0
 800826a:	f7fb f91f 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 800826e:	4b82      	ldr	r3, [pc, #520]	; (8008478 <LCD_Init+0x3980>)
 8008270:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008274:	611a      	str	r2, [r3, #16]
 8008276:	4b80      	ldr	r3, [pc, #512]	; (8008478 <LCD_Init+0x3980>)
 8008278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800827c:	615a      	str	r2, [r3, #20]
 800827e:	4b7f      	ldr	r3, [pc, #508]	; (800847c <LCD_Init+0x3984>)
 8008280:	2201      	movs	r2, #1
 8008282:	60da      	str	r2, [r3, #12]
 8008284:	4b7c      	ldr	r3, [pc, #496]	; (8008478 <LCD_Init+0x3980>)
 8008286:	2280      	movs	r2, #128	; 0x80
 8008288:	615a      	str	r2, [r3, #20]
 800828a:	4b7b      	ldr	r3, [pc, #492]	; (8008478 <LCD_Init+0x3980>)
 800828c:	2280      	movs	r2, #128	; 0x80
 800828e:	611a      	str	r2, [r3, #16]
 8008290:	4b79      	ldr	r3, [pc, #484]	; (8008478 <LCD_Init+0x3980>)
 8008292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008296:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8008298:	200a      	movs	r0, #10
 800829a:	f7f8 fbf1 	bl	8000a80 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 800829e:	20e0      	movs	r0, #224	; 0xe0
 80082a0:	f7fb f904 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 80082a4:	4b74      	ldr	r3, [pc, #464]	; (8008478 <LCD_Init+0x3980>)
 80082a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082aa:	611a      	str	r2, [r3, #16]
 80082ac:	4b72      	ldr	r3, [pc, #456]	; (8008478 <LCD_Init+0x3980>)
 80082ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082b2:	615a      	str	r2, [r3, #20]
 80082b4:	4b71      	ldr	r3, [pc, #452]	; (800847c <LCD_Init+0x3984>)
 80082b6:	2203      	movs	r2, #3
 80082b8:	60da      	str	r2, [r3, #12]
 80082ba:	4b6f      	ldr	r3, [pc, #444]	; (8008478 <LCD_Init+0x3980>)
 80082bc:	2280      	movs	r2, #128	; 0x80
 80082be:	615a      	str	r2, [r3, #20]
 80082c0:	4b6d      	ldr	r3, [pc, #436]	; (8008478 <LCD_Init+0x3980>)
 80082c2:	2280      	movs	r2, #128	; 0x80
 80082c4:	611a      	str	r2, [r3, #16]
 80082c6:	4b6c      	ldr	r3, [pc, #432]	; (8008478 <LCD_Init+0x3980>)
 80082c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082cc:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 80082ce:	200c      	movs	r0, #12
 80082d0:	f7f8 fbd6 	bl	8000a80 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 80082d4:	2001      	movs	r0, #1
 80082d6:	f7fb f8e9 	bl	80034ac <LCD_WR_REG>
		HAL_Delay(10);
 80082da:	200a      	movs	r0, #10
 80082dc:	f7f8 fbd0 	bl	8000a80 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 80082e0:	20e6      	movs	r0, #230	; 0xe6
 80082e2:	f7fb f8e3 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 80082e6:	4b64      	ldr	r3, [pc, #400]	; (8008478 <LCD_Init+0x3980>)
 80082e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082ec:	611a      	str	r2, [r3, #16]
 80082ee:	4b62      	ldr	r3, [pc, #392]	; (8008478 <LCD_Init+0x3980>)
 80082f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082f4:	615a      	str	r2, [r3, #20]
 80082f6:	4b61      	ldr	r3, [pc, #388]	; (800847c <LCD_Init+0x3984>)
 80082f8:	222f      	movs	r2, #47	; 0x2f
 80082fa:	60da      	str	r2, [r3, #12]
 80082fc:	4b5e      	ldr	r3, [pc, #376]	; (8008478 <LCD_Init+0x3980>)
 80082fe:	2280      	movs	r2, #128	; 0x80
 8008300:	615a      	str	r2, [r3, #20]
 8008302:	4b5d      	ldr	r3, [pc, #372]	; (8008478 <LCD_Init+0x3980>)
 8008304:	2280      	movs	r2, #128	; 0x80
 8008306:	611a      	str	r2, [r3, #16]
 8008308:	4b5b      	ldr	r3, [pc, #364]	; (8008478 <LCD_Init+0x3980>)
 800830a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800830e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8008310:	4b59      	ldr	r3, [pc, #356]	; (8008478 <LCD_Init+0x3980>)
 8008312:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008316:	611a      	str	r2, [r3, #16]
 8008318:	4b57      	ldr	r3, [pc, #348]	; (8008478 <LCD_Init+0x3980>)
 800831a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800831e:	615a      	str	r2, [r3, #20]
 8008320:	4b56      	ldr	r3, [pc, #344]	; (800847c <LCD_Init+0x3984>)
 8008322:	22ff      	movs	r2, #255	; 0xff
 8008324:	60da      	str	r2, [r3, #12]
 8008326:	4b54      	ldr	r3, [pc, #336]	; (8008478 <LCD_Init+0x3980>)
 8008328:	2280      	movs	r2, #128	; 0x80
 800832a:	615a      	str	r2, [r3, #20]
 800832c:	4b52      	ldr	r3, [pc, #328]	; (8008478 <LCD_Init+0x3980>)
 800832e:	2280      	movs	r2, #128	; 0x80
 8008330:	611a      	str	r2, [r3, #16]
 8008332:	4b51      	ldr	r3, [pc, #324]	; (8008478 <LCD_Init+0x3980>)
 8008334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008338:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 800833a:	4b4f      	ldr	r3, [pc, #316]	; (8008478 <LCD_Init+0x3980>)
 800833c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008340:	611a      	str	r2, [r3, #16]
 8008342:	4b4d      	ldr	r3, [pc, #308]	; (8008478 <LCD_Init+0x3980>)
 8008344:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008348:	615a      	str	r2, [r3, #20]
 800834a:	4b4c      	ldr	r3, [pc, #304]	; (800847c <LCD_Init+0x3984>)
 800834c:	22ff      	movs	r2, #255	; 0xff
 800834e:	60da      	str	r2, [r3, #12]
 8008350:	4b49      	ldr	r3, [pc, #292]	; (8008478 <LCD_Init+0x3980>)
 8008352:	2280      	movs	r2, #128	; 0x80
 8008354:	615a      	str	r2, [r3, #20]
 8008356:	4b48      	ldr	r3, [pc, #288]	; (8008478 <LCD_Init+0x3980>)
 8008358:	2280      	movs	r2, #128	; 0x80
 800835a:	611a      	str	r2, [r3, #16]
 800835c:	4b46      	ldr	r3, [pc, #280]	; (8008478 <LCD_Init+0x3980>)
 800835e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008362:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 8008364:	20b0      	movs	r0, #176	; 0xb0
 8008366:	f7fb f8a1 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 800836a:	4b43      	ldr	r3, [pc, #268]	; (8008478 <LCD_Init+0x3980>)
 800836c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008370:	611a      	str	r2, [r3, #16]
 8008372:	4b41      	ldr	r3, [pc, #260]	; (8008478 <LCD_Init+0x3980>)
 8008374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008378:	615a      	str	r2, [r3, #20]
 800837a:	4b40      	ldr	r3, [pc, #256]	; (800847c <LCD_Init+0x3984>)
 800837c:	2220      	movs	r2, #32
 800837e:	60da      	str	r2, [r3, #12]
 8008380:	4b3d      	ldr	r3, [pc, #244]	; (8008478 <LCD_Init+0x3980>)
 8008382:	2280      	movs	r2, #128	; 0x80
 8008384:	615a      	str	r2, [r3, #20]
 8008386:	4b3c      	ldr	r3, [pc, #240]	; (8008478 <LCD_Init+0x3980>)
 8008388:	2280      	movs	r2, #128	; 0x80
 800838a:	611a      	str	r2, [r3, #16]
 800838c:	4b3a      	ldr	r3, [pc, #232]	; (8008478 <LCD_Init+0x3980>)
 800838e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008392:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 8008394:	4b38      	ldr	r3, [pc, #224]	; (8008478 <LCD_Init+0x3980>)
 8008396:	f44f 7280 	mov.w	r2, #256	; 0x100
 800839a:	611a      	str	r2, [r3, #16]
 800839c:	4b36      	ldr	r3, [pc, #216]	; (8008478 <LCD_Init+0x3980>)
 800839e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083a2:	615a      	str	r2, [r3, #20]
 80083a4:	4b35      	ldr	r3, [pc, #212]	; (800847c <LCD_Init+0x3984>)
 80083a6:	2200      	movs	r2, #0
 80083a8:	60da      	str	r2, [r3, #12]
 80083aa:	4b33      	ldr	r3, [pc, #204]	; (8008478 <LCD_Init+0x3980>)
 80083ac:	2280      	movs	r2, #128	; 0x80
 80083ae:	615a      	str	r2, [r3, #20]
 80083b0:	4b31      	ldr	r3, [pc, #196]	; (8008478 <LCD_Init+0x3980>)
 80083b2:	2280      	movs	r2, #128	; 0x80
 80083b4:	611a      	str	r2, [r3, #16]
 80083b6:	4b30      	ldr	r3, [pc, #192]	; (8008478 <LCD_Init+0x3980>)
 80083b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083bc:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 80083be:	4b2e      	ldr	r3, [pc, #184]	; (8008478 <LCD_Init+0x3980>)
 80083c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083c4:	611a      	str	r2, [r3, #16]
 80083c6:	4b2c      	ldr	r3, [pc, #176]	; (8008478 <LCD_Init+0x3980>)
 80083c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083cc:	615a      	str	r2, [r3, #20]
 80083ce:	4b2b      	ldr	r3, [pc, #172]	; (800847c <LCD_Init+0x3984>)
 80083d0:	2203      	movs	r2, #3
 80083d2:	60da      	str	r2, [r3, #12]
 80083d4:	4b28      	ldr	r3, [pc, #160]	; (8008478 <LCD_Init+0x3980>)
 80083d6:	2280      	movs	r2, #128	; 0x80
 80083d8:	615a      	str	r2, [r3, #20]
 80083da:	4b27      	ldr	r3, [pc, #156]	; (8008478 <LCD_Init+0x3980>)
 80083dc:	2280      	movs	r2, #128	; 0x80
 80083de:	611a      	str	r2, [r3, #16]
 80083e0:	4b25      	ldr	r3, [pc, #148]	; (8008478 <LCD_Init+0x3980>)
 80083e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083e6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 80083e8:	4b23      	ldr	r3, [pc, #140]	; (8008478 <LCD_Init+0x3980>)
 80083ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083ee:	611a      	str	r2, [r3, #16]
 80083f0:	4b21      	ldr	r3, [pc, #132]	; (8008478 <LCD_Init+0x3980>)
 80083f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083f6:	615a      	str	r2, [r3, #20]
 80083f8:	4b20      	ldr	r3, [pc, #128]	; (800847c <LCD_Init+0x3984>)
 80083fa:	f240 321f 	movw	r2, #799	; 0x31f
 80083fe:	60da      	str	r2, [r3, #12]
 8008400:	4b1d      	ldr	r3, [pc, #116]	; (8008478 <LCD_Init+0x3980>)
 8008402:	2280      	movs	r2, #128	; 0x80
 8008404:	615a      	str	r2, [r3, #20]
 8008406:	4b1c      	ldr	r3, [pc, #112]	; (8008478 <LCD_Init+0x3980>)
 8008408:	2280      	movs	r2, #128	; 0x80
 800840a:	611a      	str	r2, [r3, #16]
 800840c:	4b1a      	ldr	r3, [pc, #104]	; (8008478 <LCD_Init+0x3980>)
 800840e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008412:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 8008414:	4b18      	ldr	r3, [pc, #96]	; (8008478 <LCD_Init+0x3980>)
 8008416:	f44f 7280 	mov.w	r2, #256	; 0x100
 800841a:	611a      	str	r2, [r3, #16]
 800841c:	4b16      	ldr	r3, [pc, #88]	; (8008478 <LCD_Init+0x3980>)
 800841e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008422:	615a      	str	r2, [r3, #20]
 8008424:	4b15      	ldr	r3, [pc, #84]	; (800847c <LCD_Init+0x3984>)
 8008426:	2201      	movs	r2, #1
 8008428:	60da      	str	r2, [r3, #12]
 800842a:	4b13      	ldr	r3, [pc, #76]	; (8008478 <LCD_Init+0x3980>)
 800842c:	2280      	movs	r2, #128	; 0x80
 800842e:	615a      	str	r2, [r3, #20]
 8008430:	4b11      	ldr	r3, [pc, #68]	; (8008478 <LCD_Init+0x3980>)
 8008432:	2280      	movs	r2, #128	; 0x80
 8008434:	611a      	str	r2, [r3, #16]
 8008436:	4b10      	ldr	r3, [pc, #64]	; (8008478 <LCD_Init+0x3980>)
 8008438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800843c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 800843e:	4b0e      	ldr	r3, [pc, #56]	; (8008478 <LCD_Init+0x3980>)
 8008440:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008444:	611a      	str	r2, [r3, #16]
 8008446:	4b0c      	ldr	r3, [pc, #48]	; (8008478 <LCD_Init+0x3980>)
 8008448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800844c:	615a      	str	r2, [r3, #20]
 800844e:	4b0b      	ldr	r3, [pc, #44]	; (800847c <LCD_Init+0x3984>)
 8008450:	f240 12df 	movw	r2, #479	; 0x1df
 8008454:	60da      	str	r2, [r3, #12]
 8008456:	4b08      	ldr	r3, [pc, #32]	; (8008478 <LCD_Init+0x3980>)
 8008458:	2280      	movs	r2, #128	; 0x80
 800845a:	615a      	str	r2, [r3, #20]
 800845c:	4b06      	ldr	r3, [pc, #24]	; (8008478 <LCD_Init+0x3980>)
 800845e:	2280      	movs	r2, #128	; 0x80
 8008460:	611a      	str	r2, [r3, #16]
 8008462:	4b05      	ldr	r3, [pc, #20]	; (8008478 <LCD_Init+0x3980>)
 8008464:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008468:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 800846a:	4b03      	ldr	r3, [pc, #12]	; (8008478 <LCD_Init+0x3980>)
 800846c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008470:	e006      	b.n	8008480 <LCD_Init+0x3988>
 8008472:	bf00      	nop
 8008474:	20000e18 	.word	0x20000e18
 8008478:	40011000 	.word	0x40011000
 800847c:	40010c00 	.word	0x40010c00
 8008480:	611a      	str	r2, [r3, #16]
 8008482:	4ba3      	ldr	r3, [pc, #652]	; (8008710 <LCD_Init+0x3c18>)
 8008484:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008488:	615a      	str	r2, [r3, #20]
 800848a:	4ba2      	ldr	r3, [pc, #648]	; (8008714 <LCD_Init+0x3c1c>)
 800848c:	2200      	movs	r2, #0
 800848e:	60da      	str	r2, [r3, #12]
 8008490:	4b9f      	ldr	r3, [pc, #636]	; (8008710 <LCD_Init+0x3c18>)
 8008492:	2280      	movs	r2, #128	; 0x80
 8008494:	615a      	str	r2, [r3, #20]
 8008496:	4b9e      	ldr	r3, [pc, #632]	; (8008710 <LCD_Init+0x3c18>)
 8008498:	2280      	movs	r2, #128	; 0x80
 800849a:	611a      	str	r2, [r3, #16]
 800849c:	4b9c      	ldr	r3, [pc, #624]	; (8008710 <LCD_Init+0x3c18>)
 800849e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084a2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 80084a4:	20b4      	movs	r0, #180	; 0xb4
 80084a6:	f7fb f801 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 80084aa:	4b99      	ldr	r3, [pc, #612]	; (8008710 <LCD_Init+0x3c18>)
 80084ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084b0:	611a      	str	r2, [r3, #16]
 80084b2:	4b97      	ldr	r3, [pc, #604]	; (8008710 <LCD_Init+0x3c18>)
 80084b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084b8:	615a      	str	r2, [r3, #20]
 80084ba:	4b96      	ldr	r3, [pc, #600]	; (8008714 <LCD_Init+0x3c1c>)
 80084bc:	2204      	movs	r2, #4
 80084be:	60da      	str	r2, [r3, #12]
 80084c0:	4b93      	ldr	r3, [pc, #588]	; (8008710 <LCD_Init+0x3c18>)
 80084c2:	2280      	movs	r2, #128	; 0x80
 80084c4:	615a      	str	r2, [r3, #20]
 80084c6:	4b92      	ldr	r3, [pc, #584]	; (8008710 <LCD_Init+0x3c18>)
 80084c8:	2280      	movs	r2, #128	; 0x80
 80084ca:	611a      	str	r2, [r3, #16]
 80084cc:	4b90      	ldr	r3, [pc, #576]	; (8008710 <LCD_Init+0x3c18>)
 80084ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084d2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 80084d4:	4b8e      	ldr	r3, [pc, #568]	; (8008710 <LCD_Init+0x3c18>)
 80084d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084da:	611a      	str	r2, [r3, #16]
 80084dc:	4b8c      	ldr	r3, [pc, #560]	; (8008710 <LCD_Init+0x3c18>)
 80084de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084e2:	615a      	str	r2, [r3, #20]
 80084e4:	4b8b      	ldr	r3, [pc, #556]	; (8008714 <LCD_Init+0x3c1c>)
 80084e6:	f240 421f 	movw	r2, #1055	; 0x41f
 80084ea:	60da      	str	r2, [r3, #12]
 80084ec:	4b88      	ldr	r3, [pc, #544]	; (8008710 <LCD_Init+0x3c18>)
 80084ee:	2280      	movs	r2, #128	; 0x80
 80084f0:	615a      	str	r2, [r3, #20]
 80084f2:	4b87      	ldr	r3, [pc, #540]	; (8008710 <LCD_Init+0x3c18>)
 80084f4:	2280      	movs	r2, #128	; 0x80
 80084f6:	611a      	str	r2, [r3, #16]
 80084f8:	4b85      	ldr	r3, [pc, #532]	; (8008710 <LCD_Init+0x3c18>)
 80084fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084fe:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8008500:	4b83      	ldr	r3, [pc, #524]	; (8008710 <LCD_Init+0x3c18>)
 8008502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008506:	611a      	str	r2, [r3, #16]
 8008508:	4b81      	ldr	r3, [pc, #516]	; (8008710 <LCD_Init+0x3c18>)
 800850a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800850e:	615a      	str	r2, [r3, #20]
 8008510:	4b80      	ldr	r3, [pc, #512]	; (8008714 <LCD_Init+0x3c1c>)
 8008512:	2200      	movs	r2, #0
 8008514:	60da      	str	r2, [r3, #12]
 8008516:	4b7e      	ldr	r3, [pc, #504]	; (8008710 <LCD_Init+0x3c18>)
 8008518:	2280      	movs	r2, #128	; 0x80
 800851a:	615a      	str	r2, [r3, #20]
 800851c:	4b7c      	ldr	r3, [pc, #496]	; (8008710 <LCD_Init+0x3c18>)
 800851e:	2280      	movs	r2, #128	; 0x80
 8008520:	611a      	str	r2, [r3, #16]
 8008522:	4b7b      	ldr	r3, [pc, #492]	; (8008710 <LCD_Init+0x3c18>)
 8008524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008528:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 800852a:	4b79      	ldr	r3, [pc, #484]	; (8008710 <LCD_Init+0x3c18>)
 800852c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008530:	611a      	str	r2, [r3, #16]
 8008532:	4b77      	ldr	r3, [pc, #476]	; (8008710 <LCD_Init+0x3c18>)
 8008534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008538:	615a      	str	r2, [r3, #20]
 800853a:	4b76      	ldr	r3, [pc, #472]	; (8008714 <LCD_Init+0x3c1c>)
 800853c:	222e      	movs	r2, #46	; 0x2e
 800853e:	60da      	str	r2, [r3, #12]
 8008540:	4b73      	ldr	r3, [pc, #460]	; (8008710 <LCD_Init+0x3c18>)
 8008542:	2280      	movs	r2, #128	; 0x80
 8008544:	615a      	str	r2, [r3, #20]
 8008546:	4b72      	ldr	r3, [pc, #456]	; (8008710 <LCD_Init+0x3c18>)
 8008548:	2280      	movs	r2, #128	; 0x80
 800854a:	611a      	str	r2, [r3, #16]
 800854c:	4b70      	ldr	r3, [pc, #448]	; (8008710 <LCD_Init+0x3c18>)
 800854e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008552:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8008554:	4b6e      	ldr	r3, [pc, #440]	; (8008710 <LCD_Init+0x3c18>)
 8008556:	f44f 7280 	mov.w	r2, #256	; 0x100
 800855a:	611a      	str	r2, [r3, #16]
 800855c:	4b6c      	ldr	r3, [pc, #432]	; (8008710 <LCD_Init+0x3c18>)
 800855e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008562:	615a      	str	r2, [r3, #20]
 8008564:	4b6b      	ldr	r3, [pc, #428]	; (8008714 <LCD_Init+0x3c1c>)
 8008566:	2200      	movs	r2, #0
 8008568:	60da      	str	r2, [r3, #12]
 800856a:	4b69      	ldr	r3, [pc, #420]	; (8008710 <LCD_Init+0x3c18>)
 800856c:	2280      	movs	r2, #128	; 0x80
 800856e:	615a      	str	r2, [r3, #20]
 8008570:	4b67      	ldr	r3, [pc, #412]	; (8008710 <LCD_Init+0x3c18>)
 8008572:	2280      	movs	r2, #128	; 0x80
 8008574:	611a      	str	r2, [r3, #16]
 8008576:	4b66      	ldr	r3, [pc, #408]	; (8008710 <LCD_Init+0x3c18>)
 8008578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800857c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 800857e:	4b64      	ldr	r3, [pc, #400]	; (8008710 <LCD_Init+0x3c18>)
 8008580:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008584:	611a      	str	r2, [r3, #16]
 8008586:	4b62      	ldr	r3, [pc, #392]	; (8008710 <LCD_Init+0x3c18>)
 8008588:	f44f 7200 	mov.w	r2, #512	; 0x200
 800858c:	615a      	str	r2, [r3, #20]
 800858e:	4b61      	ldr	r3, [pc, #388]	; (8008714 <LCD_Init+0x3c1c>)
 8008590:	2200      	movs	r2, #0
 8008592:	60da      	str	r2, [r3, #12]
 8008594:	4b5e      	ldr	r3, [pc, #376]	; (8008710 <LCD_Init+0x3c18>)
 8008596:	2280      	movs	r2, #128	; 0x80
 8008598:	615a      	str	r2, [r3, #20]
 800859a:	4b5d      	ldr	r3, [pc, #372]	; (8008710 <LCD_Init+0x3c18>)
 800859c:	2280      	movs	r2, #128	; 0x80
 800859e:	611a      	str	r2, [r3, #16]
 80085a0:	4b5b      	ldr	r3, [pc, #364]	; (8008710 <LCD_Init+0x3c18>)
 80085a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085a6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80085a8:	4b59      	ldr	r3, [pc, #356]	; (8008710 <LCD_Init+0x3c18>)
 80085aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80085ae:	611a      	str	r2, [r3, #16]
 80085b0:	4b57      	ldr	r3, [pc, #348]	; (8008710 <LCD_Init+0x3c18>)
 80085b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085b6:	615a      	str	r2, [r3, #20]
 80085b8:	4b56      	ldr	r3, [pc, #344]	; (8008714 <LCD_Init+0x3c1c>)
 80085ba:	2200      	movs	r2, #0
 80085bc:	60da      	str	r2, [r3, #12]
 80085be:	4b54      	ldr	r3, [pc, #336]	; (8008710 <LCD_Init+0x3c18>)
 80085c0:	2280      	movs	r2, #128	; 0x80
 80085c2:	615a      	str	r2, [r3, #20]
 80085c4:	4b52      	ldr	r3, [pc, #328]	; (8008710 <LCD_Init+0x3c18>)
 80085c6:	2280      	movs	r2, #128	; 0x80
 80085c8:	611a      	str	r2, [r3, #16]
 80085ca:	4b51      	ldr	r3, [pc, #324]	; (8008710 <LCD_Init+0x3c18>)
 80085cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085d0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80085d2:	4b4f      	ldr	r3, [pc, #316]	; (8008710 <LCD_Init+0x3c18>)
 80085d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80085d8:	611a      	str	r2, [r3, #16]
 80085da:	4b4d      	ldr	r3, [pc, #308]	; (8008710 <LCD_Init+0x3c18>)
 80085dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085e0:	615a      	str	r2, [r3, #20]
 80085e2:	4b4c      	ldr	r3, [pc, #304]	; (8008714 <LCD_Init+0x3c1c>)
 80085e4:	2200      	movs	r2, #0
 80085e6:	60da      	str	r2, [r3, #12]
 80085e8:	4b49      	ldr	r3, [pc, #292]	; (8008710 <LCD_Init+0x3c18>)
 80085ea:	2280      	movs	r2, #128	; 0x80
 80085ec:	615a      	str	r2, [r3, #20]
 80085ee:	4b48      	ldr	r3, [pc, #288]	; (8008710 <LCD_Init+0x3c18>)
 80085f0:	2280      	movs	r2, #128	; 0x80
 80085f2:	611a      	str	r2, [r3, #16]
 80085f4:	4b46      	ldr	r3, [pc, #280]	; (8008710 <LCD_Init+0x3c18>)
 80085f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085fa:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 80085fc:	20b6      	movs	r0, #182	; 0xb6
 80085fe:	f7fa ff55 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8008602:	4b43      	ldr	r3, [pc, #268]	; (8008710 <LCD_Init+0x3c18>)
 8008604:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008608:	611a      	str	r2, [r3, #16]
 800860a:	4b41      	ldr	r3, [pc, #260]	; (8008710 <LCD_Init+0x3c18>)
 800860c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008610:	615a      	str	r2, [r3, #20]
 8008612:	4b40      	ldr	r3, [pc, #256]	; (8008714 <LCD_Init+0x3c1c>)
 8008614:	2202      	movs	r2, #2
 8008616:	60da      	str	r2, [r3, #12]
 8008618:	4b3d      	ldr	r3, [pc, #244]	; (8008710 <LCD_Init+0x3c18>)
 800861a:	2280      	movs	r2, #128	; 0x80
 800861c:	615a      	str	r2, [r3, #20]
 800861e:	4b3c      	ldr	r3, [pc, #240]	; (8008710 <LCD_Init+0x3c18>)
 8008620:	2280      	movs	r2, #128	; 0x80
 8008622:	611a      	str	r2, [r3, #16]
 8008624:	4b3a      	ldr	r3, [pc, #232]	; (8008710 <LCD_Init+0x3c18>)
 8008626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800862a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 800862c:	4b38      	ldr	r3, [pc, #224]	; (8008710 <LCD_Init+0x3c18>)
 800862e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008632:	611a      	str	r2, [r3, #16]
 8008634:	4b36      	ldr	r3, [pc, #216]	; (8008710 <LCD_Init+0x3c18>)
 8008636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800863a:	615a      	str	r2, [r3, #20]
 800863c:	4b35      	ldr	r3, [pc, #212]	; (8008714 <LCD_Init+0x3c1c>)
 800863e:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8008642:	60da      	str	r2, [r3, #12]
 8008644:	4b32      	ldr	r3, [pc, #200]	; (8008710 <LCD_Init+0x3c18>)
 8008646:	2280      	movs	r2, #128	; 0x80
 8008648:	615a      	str	r2, [r3, #20]
 800864a:	4b31      	ldr	r3, [pc, #196]	; (8008710 <LCD_Init+0x3c18>)
 800864c:	2280      	movs	r2, #128	; 0x80
 800864e:	611a      	str	r2, [r3, #16]
 8008650:	4b2f      	ldr	r3, [pc, #188]	; (8008710 <LCD_Init+0x3c18>)
 8008652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008656:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8008658:	4b2d      	ldr	r3, [pc, #180]	; (8008710 <LCD_Init+0x3c18>)
 800865a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800865e:	611a      	str	r2, [r3, #16]
 8008660:	4b2b      	ldr	r3, [pc, #172]	; (8008710 <LCD_Init+0x3c18>)
 8008662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008666:	615a      	str	r2, [r3, #20]
 8008668:	4b2a      	ldr	r3, [pc, #168]	; (8008714 <LCD_Init+0x3c1c>)
 800866a:	2200      	movs	r2, #0
 800866c:	60da      	str	r2, [r3, #12]
 800866e:	4b28      	ldr	r3, [pc, #160]	; (8008710 <LCD_Init+0x3c18>)
 8008670:	2280      	movs	r2, #128	; 0x80
 8008672:	615a      	str	r2, [r3, #20]
 8008674:	4b26      	ldr	r3, [pc, #152]	; (8008710 <LCD_Init+0x3c18>)
 8008676:	2280      	movs	r2, #128	; 0x80
 8008678:	611a      	str	r2, [r3, #16]
 800867a:	4b25      	ldr	r3, [pc, #148]	; (8008710 <LCD_Init+0x3c18>)
 800867c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008680:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8008682:	4b23      	ldr	r3, [pc, #140]	; (8008710 <LCD_Init+0x3c18>)
 8008684:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008688:	611a      	str	r2, [r3, #16]
 800868a:	4b21      	ldr	r3, [pc, #132]	; (8008710 <LCD_Init+0x3c18>)
 800868c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008690:	615a      	str	r2, [r3, #20]
 8008692:	4b20      	ldr	r3, [pc, #128]	; (8008714 <LCD_Init+0x3c1c>)
 8008694:	2217      	movs	r2, #23
 8008696:	60da      	str	r2, [r3, #12]
 8008698:	4b1d      	ldr	r3, [pc, #116]	; (8008710 <LCD_Init+0x3c18>)
 800869a:	2280      	movs	r2, #128	; 0x80
 800869c:	615a      	str	r2, [r3, #20]
 800869e:	4b1c      	ldr	r3, [pc, #112]	; (8008710 <LCD_Init+0x3c18>)
 80086a0:	2280      	movs	r2, #128	; 0x80
 80086a2:	611a      	str	r2, [r3, #16]
 80086a4:	4b1a      	ldr	r3, [pc, #104]	; (8008710 <LCD_Init+0x3c18>)
 80086a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086aa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 80086ac:	4b18      	ldr	r3, [pc, #96]	; (8008710 <LCD_Init+0x3c18>)
 80086ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086b2:	611a      	str	r2, [r3, #16]
 80086b4:	4b16      	ldr	r3, [pc, #88]	; (8008710 <LCD_Init+0x3c18>)
 80086b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086ba:	615a      	str	r2, [r3, #20]
 80086bc:	4b15      	ldr	r3, [pc, #84]	; (8008714 <LCD_Init+0x3c1c>)
 80086be:	2215      	movs	r2, #21
 80086c0:	60da      	str	r2, [r3, #12]
 80086c2:	4b13      	ldr	r3, [pc, #76]	; (8008710 <LCD_Init+0x3c18>)
 80086c4:	2280      	movs	r2, #128	; 0x80
 80086c6:	615a      	str	r2, [r3, #20]
 80086c8:	4b11      	ldr	r3, [pc, #68]	; (8008710 <LCD_Init+0x3c18>)
 80086ca:	2280      	movs	r2, #128	; 0x80
 80086cc:	611a      	str	r2, [r3, #16]
 80086ce:	4b10      	ldr	r3, [pc, #64]	; (8008710 <LCD_Init+0x3c18>)
 80086d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086d4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80086d6:	4b0e      	ldr	r3, [pc, #56]	; (8008710 <LCD_Init+0x3c18>)
 80086d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086dc:	611a      	str	r2, [r3, #16]
 80086de:	4b0c      	ldr	r3, [pc, #48]	; (8008710 <LCD_Init+0x3c18>)
 80086e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086e4:	615a      	str	r2, [r3, #20]
 80086e6:	4b0b      	ldr	r3, [pc, #44]	; (8008714 <LCD_Init+0x3c1c>)
 80086e8:	2200      	movs	r2, #0
 80086ea:	60da      	str	r2, [r3, #12]
 80086ec:	4b08      	ldr	r3, [pc, #32]	; (8008710 <LCD_Init+0x3c18>)
 80086ee:	2280      	movs	r2, #128	; 0x80
 80086f0:	615a      	str	r2, [r3, #20]
 80086f2:	4b07      	ldr	r3, [pc, #28]	; (8008710 <LCD_Init+0x3c18>)
 80086f4:	2280      	movs	r2, #128	; 0x80
 80086f6:	611a      	str	r2, [r3, #16]
 80086f8:	4b05      	ldr	r3, [pc, #20]	; (8008710 <LCD_Init+0x3c18>)
 80086fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086fe:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8008700:	4b03      	ldr	r3, [pc, #12]	; (8008710 <LCD_Init+0x3c18>)
 8008702:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008706:	611a      	str	r2, [r3, #16]
 8008708:	4b01      	ldr	r3, [pc, #4]	; (8008710 <LCD_Init+0x3c18>)
 800870a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800870e:	e003      	b.n	8008718 <LCD_Init+0x3c20>
 8008710:	40011000 	.word	0x40011000
 8008714:	40010c00 	.word	0x40010c00
 8008718:	615a      	str	r2, [r3, #20]
 800871a:	4b8b      	ldr	r3, [pc, #556]	; (8008948 <LCD_Init+0x3e50>)
 800871c:	2200      	movs	r2, #0
 800871e:	60da      	str	r2, [r3, #12]
 8008720:	4b8a      	ldr	r3, [pc, #552]	; (800894c <LCD_Init+0x3e54>)
 8008722:	2280      	movs	r2, #128	; 0x80
 8008724:	615a      	str	r2, [r3, #20]
 8008726:	4b89      	ldr	r3, [pc, #548]	; (800894c <LCD_Init+0x3e54>)
 8008728:	2280      	movs	r2, #128	; 0x80
 800872a:	611a      	str	r2, [r3, #16]
 800872c:	4b87      	ldr	r3, [pc, #540]	; (800894c <LCD_Init+0x3e54>)
 800872e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008732:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8008734:	20f0      	movs	r0, #240	; 0xf0
 8008736:	f7fa feb9 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 800873a:	4b84      	ldr	r3, [pc, #528]	; (800894c <LCD_Init+0x3e54>)
 800873c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008740:	611a      	str	r2, [r3, #16]
 8008742:	4b82      	ldr	r3, [pc, #520]	; (800894c <LCD_Init+0x3e54>)
 8008744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008748:	615a      	str	r2, [r3, #20]
 800874a:	4b7f      	ldr	r3, [pc, #508]	; (8008948 <LCD_Init+0x3e50>)
 800874c:	2203      	movs	r2, #3
 800874e:	60da      	str	r2, [r3, #12]
 8008750:	4b7e      	ldr	r3, [pc, #504]	; (800894c <LCD_Init+0x3e54>)
 8008752:	2280      	movs	r2, #128	; 0x80
 8008754:	615a      	str	r2, [r3, #20]
 8008756:	4b7d      	ldr	r3, [pc, #500]	; (800894c <LCD_Init+0x3e54>)
 8008758:	2280      	movs	r2, #128	; 0x80
 800875a:	611a      	str	r2, [r3, #16]
 800875c:	4b7b      	ldr	r3, [pc, #492]	; (800894c <LCD_Init+0x3e54>)
 800875e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008762:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8008764:	2029      	movs	r0, #41	; 0x29
 8008766:	f7fa fea1 	bl	80034ac <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 800876a:	20d0      	movs	r0, #208	; 0xd0
 800876c:	f7fa fe9e 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8008770:	4b76      	ldr	r3, [pc, #472]	; (800894c <LCD_Init+0x3e54>)
 8008772:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008776:	611a      	str	r2, [r3, #16]
 8008778:	4b74      	ldr	r3, [pc, #464]	; (800894c <LCD_Init+0x3e54>)
 800877a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800877e:	615a      	str	r2, [r3, #20]
 8008780:	4b71      	ldr	r3, [pc, #452]	; (8008948 <LCD_Init+0x3e50>)
 8008782:	2200      	movs	r2, #0
 8008784:	60da      	str	r2, [r3, #12]
 8008786:	4b71      	ldr	r3, [pc, #452]	; (800894c <LCD_Init+0x3e54>)
 8008788:	2280      	movs	r2, #128	; 0x80
 800878a:	615a      	str	r2, [r3, #20]
 800878c:	4b6f      	ldr	r3, [pc, #444]	; (800894c <LCD_Init+0x3e54>)
 800878e:	2280      	movs	r2, #128	; 0x80
 8008790:	611a      	str	r2, [r3, #16]
 8008792:	4b6e      	ldr	r3, [pc, #440]	; (800894c <LCD_Init+0x3e54>)
 8008794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008798:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 800879a:	20be      	movs	r0, #190	; 0xbe
 800879c:	f7fa fe86 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 80087a0:	4b6a      	ldr	r3, [pc, #424]	; (800894c <LCD_Init+0x3e54>)
 80087a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087a6:	611a      	str	r2, [r3, #16]
 80087a8:	4b68      	ldr	r3, [pc, #416]	; (800894c <LCD_Init+0x3e54>)
 80087aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087ae:	615a      	str	r2, [r3, #20]
 80087b0:	4b65      	ldr	r3, [pc, #404]	; (8008948 <LCD_Init+0x3e50>)
 80087b2:	2205      	movs	r2, #5
 80087b4:	60da      	str	r2, [r3, #12]
 80087b6:	4b65      	ldr	r3, [pc, #404]	; (800894c <LCD_Init+0x3e54>)
 80087b8:	2280      	movs	r2, #128	; 0x80
 80087ba:	615a      	str	r2, [r3, #20]
 80087bc:	4b63      	ldr	r3, [pc, #396]	; (800894c <LCD_Init+0x3e54>)
 80087be:	2280      	movs	r2, #128	; 0x80
 80087c0:	611a      	str	r2, [r3, #16]
 80087c2:	4b62      	ldr	r3, [pc, #392]	; (800894c <LCD_Init+0x3e54>)
 80087c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087c8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 80087ca:	4b60      	ldr	r3, [pc, #384]	; (800894c <LCD_Init+0x3e54>)
 80087cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087d0:	611a      	str	r2, [r3, #16]
 80087d2:	4b5e      	ldr	r3, [pc, #376]	; (800894c <LCD_Init+0x3e54>)
 80087d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087d8:	615a      	str	r2, [r3, #20]
 80087da:	4b5b      	ldr	r3, [pc, #364]	; (8008948 <LCD_Init+0x3e50>)
 80087dc:	22fe      	movs	r2, #254	; 0xfe
 80087de:	60da      	str	r2, [r3, #12]
 80087e0:	4b5a      	ldr	r3, [pc, #360]	; (800894c <LCD_Init+0x3e54>)
 80087e2:	2280      	movs	r2, #128	; 0x80
 80087e4:	615a      	str	r2, [r3, #20]
 80087e6:	4b59      	ldr	r3, [pc, #356]	; (800894c <LCD_Init+0x3e54>)
 80087e8:	2280      	movs	r2, #128	; 0x80
 80087ea:	611a      	str	r2, [r3, #16]
 80087ec:	4b57      	ldr	r3, [pc, #348]	; (800894c <LCD_Init+0x3e54>)
 80087ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087f2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 80087f4:	4b55      	ldr	r3, [pc, #340]	; (800894c <LCD_Init+0x3e54>)
 80087f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80087fa:	611a      	str	r2, [r3, #16]
 80087fc:	4b53      	ldr	r3, [pc, #332]	; (800894c <LCD_Init+0x3e54>)
 80087fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008802:	615a      	str	r2, [r3, #20]
 8008804:	4b50      	ldr	r3, [pc, #320]	; (8008948 <LCD_Init+0x3e50>)
 8008806:	2201      	movs	r2, #1
 8008808:	60da      	str	r2, [r3, #12]
 800880a:	4b50      	ldr	r3, [pc, #320]	; (800894c <LCD_Init+0x3e54>)
 800880c:	2280      	movs	r2, #128	; 0x80
 800880e:	615a      	str	r2, [r3, #20]
 8008810:	4b4e      	ldr	r3, [pc, #312]	; (800894c <LCD_Init+0x3e54>)
 8008812:	2280      	movs	r2, #128	; 0x80
 8008814:	611a      	str	r2, [r3, #16]
 8008816:	4b4d      	ldr	r3, [pc, #308]	; (800894c <LCD_Init+0x3e54>)
 8008818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800881c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 800881e:	4b4b      	ldr	r3, [pc, #300]	; (800894c <LCD_Init+0x3e54>)
 8008820:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008824:	611a      	str	r2, [r3, #16]
 8008826:	4b49      	ldr	r3, [pc, #292]	; (800894c <LCD_Init+0x3e54>)
 8008828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800882c:	615a      	str	r2, [r3, #20]
 800882e:	4b46      	ldr	r3, [pc, #280]	; (8008948 <LCD_Init+0x3e50>)
 8008830:	2200      	movs	r2, #0
 8008832:	60da      	str	r2, [r3, #12]
 8008834:	4b45      	ldr	r3, [pc, #276]	; (800894c <LCD_Init+0x3e54>)
 8008836:	2280      	movs	r2, #128	; 0x80
 8008838:	615a      	str	r2, [r3, #20]
 800883a:	4b44      	ldr	r3, [pc, #272]	; (800894c <LCD_Init+0x3e54>)
 800883c:	2280      	movs	r2, #128	; 0x80
 800883e:	611a      	str	r2, [r3, #16]
 8008840:	4b42      	ldr	r3, [pc, #264]	; (800894c <LCD_Init+0x3e54>)
 8008842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008846:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8008848:	4b40      	ldr	r3, [pc, #256]	; (800894c <LCD_Init+0x3e54>)
 800884a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800884e:	611a      	str	r2, [r3, #16]
 8008850:	4b3e      	ldr	r3, [pc, #248]	; (800894c <LCD_Init+0x3e54>)
 8008852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008856:	615a      	str	r2, [r3, #20]
 8008858:	4b3b      	ldr	r3, [pc, #236]	; (8008948 <LCD_Init+0x3e50>)
 800885a:	2200      	movs	r2, #0
 800885c:	60da      	str	r2, [r3, #12]
 800885e:	4b3b      	ldr	r3, [pc, #236]	; (800894c <LCD_Init+0x3e54>)
 8008860:	2280      	movs	r2, #128	; 0x80
 8008862:	615a      	str	r2, [r3, #20]
 8008864:	4b39      	ldr	r3, [pc, #228]	; (800894c <LCD_Init+0x3e54>)
 8008866:	2280      	movs	r2, #128	; 0x80
 8008868:	611a      	str	r2, [r3, #16]
 800886a:	4b38      	ldr	r3, [pc, #224]	; (800894c <LCD_Init+0x3e54>)
 800886c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008870:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8008872:	4b36      	ldr	r3, [pc, #216]	; (800894c <LCD_Init+0x3e54>)
 8008874:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008878:	611a      	str	r2, [r3, #16]
 800887a:	4b34      	ldr	r3, [pc, #208]	; (800894c <LCD_Init+0x3e54>)
 800887c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008880:	615a      	str	r2, [r3, #20]
 8008882:	4b31      	ldr	r3, [pc, #196]	; (8008948 <LCD_Init+0x3e50>)
 8008884:	2200      	movs	r2, #0
 8008886:	60da      	str	r2, [r3, #12]
 8008888:	4b30      	ldr	r3, [pc, #192]	; (800894c <LCD_Init+0x3e54>)
 800888a:	2280      	movs	r2, #128	; 0x80
 800888c:	615a      	str	r2, [r3, #20]
 800888e:	4b2f      	ldr	r3, [pc, #188]	; (800894c <LCD_Init+0x3e54>)
 8008890:	2280      	movs	r2, #128	; 0x80
 8008892:	611a      	str	r2, [r3, #16]
 8008894:	4b2d      	ldr	r3, [pc, #180]	; (800894c <LCD_Init+0x3e54>)
 8008896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800889a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 800889c:	20b8      	movs	r0, #184	; 0xb8
 800889e:	f7fa fe05 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 80088a2:	4b2a      	ldr	r3, [pc, #168]	; (800894c <LCD_Init+0x3e54>)
 80088a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088a8:	611a      	str	r2, [r3, #16]
 80088aa:	4b28      	ldr	r3, [pc, #160]	; (800894c <LCD_Init+0x3e54>)
 80088ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088b0:	615a      	str	r2, [r3, #20]
 80088b2:	4b25      	ldr	r3, [pc, #148]	; (8008948 <LCD_Init+0x3e50>)
 80088b4:	2203      	movs	r2, #3
 80088b6:	60da      	str	r2, [r3, #12]
 80088b8:	4b24      	ldr	r3, [pc, #144]	; (800894c <LCD_Init+0x3e54>)
 80088ba:	2280      	movs	r2, #128	; 0x80
 80088bc:	615a      	str	r2, [r3, #20]
 80088be:	4b23      	ldr	r3, [pc, #140]	; (800894c <LCD_Init+0x3e54>)
 80088c0:	2280      	movs	r2, #128	; 0x80
 80088c2:	611a      	str	r2, [r3, #16]
 80088c4:	4b21      	ldr	r3, [pc, #132]	; (800894c <LCD_Init+0x3e54>)
 80088c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088ca:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 80088cc:	4b1f      	ldr	r3, [pc, #124]	; (800894c <LCD_Init+0x3e54>)
 80088ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088d2:	611a      	str	r2, [r3, #16]
 80088d4:	4b1d      	ldr	r3, [pc, #116]	; (800894c <LCD_Init+0x3e54>)
 80088d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088da:	615a      	str	r2, [r3, #20]
 80088dc:	4b1a      	ldr	r3, [pc, #104]	; (8008948 <LCD_Init+0x3e50>)
 80088de:	2201      	movs	r2, #1
 80088e0:	60da      	str	r2, [r3, #12]
 80088e2:	4b1a      	ldr	r3, [pc, #104]	; (800894c <LCD_Init+0x3e54>)
 80088e4:	2280      	movs	r2, #128	; 0x80
 80088e6:	615a      	str	r2, [r3, #20]
 80088e8:	4b18      	ldr	r3, [pc, #96]	; (800894c <LCD_Init+0x3e54>)
 80088ea:	2280      	movs	r2, #128	; 0x80
 80088ec:	611a      	str	r2, [r3, #16]
 80088ee:	4b17      	ldr	r3, [pc, #92]	; (800894c <LCD_Init+0x3e54>)
 80088f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088f4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 80088f6:	20ba      	movs	r0, #186	; 0xba
 80088f8:	f7fa fdd8 	bl	80034ac <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 80088fc:	4b13      	ldr	r3, [pc, #76]	; (800894c <LCD_Init+0x3e54>)
 80088fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008902:	611a      	str	r2, [r3, #16]
 8008904:	4b11      	ldr	r3, [pc, #68]	; (800894c <LCD_Init+0x3e54>)
 8008906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800890a:	615a      	str	r2, [r3, #20]
 800890c:	4b0e      	ldr	r3, [pc, #56]	; (8008948 <LCD_Init+0x3e50>)
 800890e:	2201      	movs	r2, #1
 8008910:	60da      	str	r2, [r3, #12]
 8008912:	4b0e      	ldr	r3, [pc, #56]	; (800894c <LCD_Init+0x3e54>)
 8008914:	2280      	movs	r2, #128	; 0x80
 8008916:	615a      	str	r2, [r3, #20]
 8008918:	4b0c      	ldr	r3, [pc, #48]	; (800894c <LCD_Init+0x3e54>)
 800891a:	2280      	movs	r2, #128	; 0x80
 800891c:	611a      	str	r2, [r3, #16]
 800891e:	4b0b      	ldr	r3, [pc, #44]	; (800894c <LCD_Init+0x3e54>)
 8008920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008924:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8008926:	2064      	movs	r0, #100	; 0x64
 8008928:	f7fb ff36 	bl	8004798 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 800892c:	2000      	movs	r0, #0
 800892e:	f7fb ffd7 	bl	80048e0 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8008932:	4b07      	ldr	r3, [pc, #28]	; (8008950 <LCD_Init+0x3e58>)
 8008934:	2201      	movs	r2, #1
 8008936:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8008938:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800893c:	f000 f80a 	bl	8008954 <LCD_Clear>
}
 8008940:	bf00      	nop
 8008942:	3718      	adds	r7, #24
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	40010c00 	.word	0x40010c00
 800894c:	40011000 	.word	0x40011000
 8008950:	422201a8 	.word	0x422201a8

08008954 <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	4603      	mov	r3, r0
 800895c:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 800895e:	2300      	movs	r3, #0
 8008960:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8008962:	4b2a      	ldr	r3, [pc, #168]	; (8008a0c <LCD_Clear+0xb8>)
 8008964:	881b      	ldrh	r3, [r3, #0]
 8008966:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8008968:	4b28      	ldr	r3, [pc, #160]	; (8008a0c <LCD_Clear+0xb8>)
 800896a:	885b      	ldrh	r3, [r3, #2]
 800896c:	461a      	mov	r2, r3
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	fb02 f303 	mul.w	r3, r2, r3
 8008974:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8008976:	4b25      	ldr	r3, [pc, #148]	; (8008a0c <LCD_Clear+0xb8>)
 8008978:	889b      	ldrh	r3, [r3, #4]
 800897a:	f646 0204 	movw	r2, #26628	; 0x6804
 800897e:	4293      	cmp	r3, r2
 8008980:	d11a      	bne.n	80089b8 <LCD_Clear+0x64>
 8008982:	4b22      	ldr	r3, [pc, #136]	; (8008a0c <LCD_Clear+0xb8>)
 8008984:	799b      	ldrb	r3, [r3, #6]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d116      	bne.n	80089b8 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 800898a:	4b20      	ldr	r3, [pc, #128]	; (8008a0c <LCD_Clear+0xb8>)
 800898c:	2200      	movs	r2, #0
 800898e:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8008990:	4b1e      	ldr	r3, [pc, #120]	; (8008a0c <LCD_Clear+0xb8>)
 8008992:	222a      	movs	r2, #42	; 0x2a
 8008994:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8008996:	4b1d      	ldr	r3, [pc, #116]	; (8008a0c <LCD_Clear+0xb8>)
 8008998:	222b      	movs	r2, #43	; 0x2b
 800899a:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 800899c:	2100      	movs	r1, #0
 800899e:	2000      	movs	r0, #0
 80089a0:	f7fa fe56 	bl	8003650 <LCD_SetCursor>
		lcddev.dir = 1;
 80089a4:	4b19      	ldr	r3, [pc, #100]	; (8008a0c <LCD_Clear+0xb8>)
 80089a6:	2201      	movs	r2, #1
 80089a8:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 80089aa:	4b18      	ldr	r3, [pc, #96]	; (8008a0c <LCD_Clear+0xb8>)
 80089ac:	222b      	movs	r2, #43	; 0x2b
 80089ae:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 80089b0:	4b16      	ldr	r3, [pc, #88]	; (8008a0c <LCD_Clear+0xb8>)
 80089b2:	222a      	movs	r2, #42	; 0x2a
 80089b4:	819a      	strh	r2, [r3, #12]
 80089b6:	e003      	b.n	80089c0 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 80089b8:	2100      	movs	r1, #0
 80089ba:	2000      	movs	r0, #0
 80089bc:	f7fa fe48 	bl	8003650 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 80089c0:	f7fa fe3a 	bl	8003638 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 80089c4:	2300      	movs	r3, #0
 80089c6:	60fb      	str	r3, [r7, #12]
 80089c8:	e017      	b.n	80089fa <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 80089ca:	4b11      	ldr	r3, [pc, #68]	; (8008a10 <LCD_Clear+0xbc>)
 80089cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089d0:	611a      	str	r2, [r3, #16]
 80089d2:	4b0f      	ldr	r3, [pc, #60]	; (8008a10 <LCD_Clear+0xbc>)
 80089d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089d8:	615a      	str	r2, [r3, #20]
 80089da:	4a0e      	ldr	r2, [pc, #56]	; (8008a14 <LCD_Clear+0xc0>)
 80089dc:	88fb      	ldrh	r3, [r7, #6]
 80089de:	60d3      	str	r3, [r2, #12]
 80089e0:	4b0b      	ldr	r3, [pc, #44]	; (8008a10 <LCD_Clear+0xbc>)
 80089e2:	2280      	movs	r2, #128	; 0x80
 80089e4:	615a      	str	r2, [r3, #20]
 80089e6:	4b0a      	ldr	r3, [pc, #40]	; (8008a10 <LCD_Clear+0xbc>)
 80089e8:	2280      	movs	r2, #128	; 0x80
 80089ea:	611a      	str	r2, [r3, #16]
 80089ec:	4b08      	ldr	r3, [pc, #32]	; (8008a10 <LCD_Clear+0xbc>)
 80089ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089f2:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	3301      	adds	r3, #1
 80089f8:	60fb      	str	r3, [r7, #12]
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d3e3      	bcc.n	80089ca <LCD_Clear+0x76>
}
 8008a02:	bf00      	nop
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	20000e18 	.word	0x20000e18
 8008a10:	40011000 	.word	0x40011000
 8008a14:	40010c00 	.word	0x40010c00

08008a18 <LCD_Fill>:
// Fill the area with color
// :(xend-xsta+1)*(yend-ysta+1)
void LCD_Fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey,
		uint16_t color) {
 8008a18:	b590      	push	{r4, r7, lr}
 8008a1a:	b087      	sub	sp, #28
 8008a1c:	af02      	add	r7, sp, #8
 8008a1e:	4604      	mov	r4, r0
 8008a20:	4608      	mov	r0, r1
 8008a22:	4611      	mov	r1, r2
 8008a24:	461a      	mov	r2, r3
 8008a26:	4623      	mov	r3, r4
 8008a28:	80fb      	strh	r3, [r7, #6]
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	80bb      	strh	r3, [r7, #4]
 8008a2e:	460b      	mov	r3, r1
 8008a30:	807b      	strh	r3, [r7, #2]
 8008a32:	4613      	mov	r3, r2
 8008a34:	803b      	strh	r3, [r7, #0]
	uint16_t i, j;
	uint16_t xlen = 0;
 8008a36:	2300      	movs	r3, #0
 8008a38:	817b      	strh	r3, [r7, #10]
	uint16_t temp;
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1))	//6804横屏的时候特殊处理
 8008a3a:	4b3a      	ldr	r3, [pc, #232]	; (8008b24 <LCD_Fill+0x10c>)
 8008a3c:	889b      	ldrh	r3, [r3, #4]
 8008a3e:	f646 0204 	movw	r2, #26628	; 0x6804
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d133      	bne.n	8008aae <LCD_Fill+0x96>
 8008a46:	4b37      	ldr	r3, [pc, #220]	; (8008b24 <LCD_Fill+0x10c>)
 8008a48:	799b      	ldrb	r3, [r3, #6]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d12f      	bne.n	8008aae <LCD_Fill+0x96>
			{
		temp = sx;
 8008a4e:	88fb      	ldrh	r3, [r7, #6]
 8008a50:	813b      	strh	r3, [r7, #8]
		sx = sy;
 8008a52:	88bb      	ldrh	r3, [r7, #4]
 8008a54:	80fb      	strh	r3, [r7, #6]
		sy = lcddev.width - ex - 1;
 8008a56:	4b33      	ldr	r3, [pc, #204]	; (8008b24 <LCD_Fill+0x10c>)
 8008a58:	881a      	ldrh	r2, [r3, #0]
 8008a5a:	887b      	ldrh	r3, [r7, #2]
 8008a5c:	1ad3      	subs	r3, r2, r3
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	3b01      	subs	r3, #1
 8008a62:	80bb      	strh	r3, [r7, #4]
		ex = ey;
 8008a64:	883b      	ldrh	r3, [r7, #0]
 8008a66:	807b      	strh	r3, [r7, #2]
		ey = lcddev.width - temp - 1;
 8008a68:	4b2e      	ldr	r3, [pc, #184]	; (8008b24 <LCD_Fill+0x10c>)
 8008a6a:	881a      	ldrh	r2, [r3, #0]
 8008a6c:	893b      	ldrh	r3, [r7, #8]
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	3b01      	subs	r3, #1
 8008a74:	803b      	strh	r3, [r7, #0]
		lcddev.dir = 0;
 8008a76:	4b2b      	ldr	r3, [pc, #172]	; (8008b24 <LCD_Fill+0x10c>)
 8008a78:	2200      	movs	r2, #0
 8008a7a:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8008a7c:	4b29      	ldr	r3, [pc, #164]	; (8008b24 <LCD_Fill+0x10c>)
 8008a7e:	222a      	movs	r2, #42	; 0x2a
 8008a80:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8008a82:	4b28      	ldr	r3, [pc, #160]	; (8008b24 <LCD_Fill+0x10c>)
 8008a84:	222b      	movs	r2, #43	; 0x2b
 8008a86:	819a      	strh	r2, [r3, #12]
		LCD_Fill(sx, sy, ex, ey, color);
 8008a88:	883c      	ldrh	r4, [r7, #0]
 8008a8a:	887a      	ldrh	r2, [r7, #2]
 8008a8c:	88b9      	ldrh	r1, [r7, #4]
 8008a8e:	88f8      	ldrh	r0, [r7, #6]
 8008a90:	8c3b      	ldrh	r3, [r7, #32]
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	4623      	mov	r3, r4
 8008a96:	f7ff ffbf 	bl	8008a18 <LCD_Fill>
		lcddev.dir = 1;
 8008a9a:	4b22      	ldr	r3, [pc, #136]	; (8008b24 <LCD_Fill+0x10c>)
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8008aa0:	4b20      	ldr	r3, [pc, #128]	; (8008b24 <LCD_Fill+0x10c>)
 8008aa2:	222b      	movs	r2, #43	; 0x2b
 8008aa4:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8008aa6:	4b1f      	ldr	r3, [pc, #124]	; (8008b24 <LCD_Fill+0x10c>)
 8008aa8:	222a      	movs	r2, #42	; 0x2a
 8008aaa:	819a      	strh	r2, [r3, #12]
 8008aac:	e036      	b.n	8008b1c <LCD_Fill+0x104>
	} else {
		xlen = ex - sx + 1;
 8008aae:	887a      	ldrh	r2, [r7, #2]
 8008ab0:	88fb      	ldrh	r3, [r7, #6]
 8008ab2:	1ad3      	subs	r3, r2, r3
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	817b      	strh	r3, [r7, #10]
		for (i = sy; i <= ey; i++) {
 8008aba:	88bb      	ldrh	r3, [r7, #4]
 8008abc:	81fb      	strh	r3, [r7, #14]
 8008abe:	e029      	b.n	8008b14 <LCD_Fill+0xfc>
			LCD_SetCursor(sx, i);      				//设置光标位置
 8008ac0:	89fa      	ldrh	r2, [r7, #14]
 8008ac2:	88fb      	ldrh	r3, [r7, #6]
 8008ac4:	4611      	mov	r1, r2
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7fa fdc2 	bl	8003650 <LCD_SetCursor>
			LCD_WriteRAM_Prepare();     			//开始写入GRAM	  
 8008acc:	f7fa fdb4 	bl	8003638 <LCD_WriteRAM_Prepare>
			for (j = 0; j < xlen; j++)
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	81bb      	strh	r3, [r7, #12]
 8008ad4:	e017      	b.n	8008b06 <LCD_Fill+0xee>
				LCD_WR_DATA(color);	//设置光标位置
 8008ad6:	4b14      	ldr	r3, [pc, #80]	; (8008b28 <LCD_Fill+0x110>)
 8008ad8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008adc:	611a      	str	r2, [r3, #16]
 8008ade:	4b12      	ldr	r3, [pc, #72]	; (8008b28 <LCD_Fill+0x110>)
 8008ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ae4:	615a      	str	r2, [r3, #20]
 8008ae6:	4a11      	ldr	r2, [pc, #68]	; (8008b2c <LCD_Fill+0x114>)
 8008ae8:	8c3b      	ldrh	r3, [r7, #32]
 8008aea:	60d3      	str	r3, [r2, #12]
 8008aec:	4b0e      	ldr	r3, [pc, #56]	; (8008b28 <LCD_Fill+0x110>)
 8008aee:	2280      	movs	r2, #128	; 0x80
 8008af0:	615a      	str	r2, [r3, #20]
 8008af2:	4b0d      	ldr	r3, [pc, #52]	; (8008b28 <LCD_Fill+0x110>)
 8008af4:	2280      	movs	r2, #128	; 0x80
 8008af6:	611a      	str	r2, [r3, #16]
 8008af8:	4b0b      	ldr	r3, [pc, #44]	; (8008b28 <LCD_Fill+0x110>)
 8008afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008afe:	611a      	str	r2, [r3, #16]
			for (j = 0; j < xlen; j++)
 8008b00:	89bb      	ldrh	r3, [r7, #12]
 8008b02:	3301      	adds	r3, #1
 8008b04:	81bb      	strh	r3, [r7, #12]
 8008b06:	89ba      	ldrh	r2, [r7, #12]
 8008b08:	897b      	ldrh	r3, [r7, #10]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d3e3      	bcc.n	8008ad6 <LCD_Fill+0xbe>
		for (i = sy; i <= ey; i++) {
 8008b0e:	89fb      	ldrh	r3, [r7, #14]
 8008b10:	3301      	adds	r3, #1
 8008b12:	81fb      	strh	r3, [r7, #14]
 8008b14:	89fa      	ldrh	r2, [r7, #14]
 8008b16:	883b      	ldrh	r3, [r7, #0]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d9d1      	bls.n	8008ac0 <LCD_Fill+0xa8>
		}
	}
}
 8008b1c:	bf00      	nop
 8008b1e:	3714      	adds	r7, #20
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd90      	pop	{r4, r7, pc}
 8008b24:	20000e18 	.word	0x20000e18
 8008b28:	40011000 	.word	0x40011000
 8008b2c:	40010c00 	.word	0x40010c00

08008b30 <LCD_DrawLine>:
	}
}
// Draw a line
//x1,y1: coordinate of starting point
//x2,y2: coordinate of terminal point
void LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8008b30:	b590      	push	{r4, r7, lr}
 8008b32:	b08d      	sub	sp, #52	; 0x34
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	4604      	mov	r4, r0
 8008b38:	4608      	mov	r0, r1
 8008b3a:	4611      	mov	r1, r2
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	4623      	mov	r3, r4
 8008b40:	80fb      	strh	r3, [r7, #6]
 8008b42:	4603      	mov	r3, r0
 8008b44:	80bb      	strh	r3, [r7, #4]
 8008b46:	460b      	mov	r3, r1
 8008b48:	807b      	strh	r3, [r7, #2]
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b52:	2300      	movs	r3, #0
 8008b54:	627b      	str	r3, [r7, #36]	; 0x24
	int incx, incy, uRow, uCol;
	delta_x = x2 - x1; //计算坐标增量
 8008b56:	887a      	ldrh	r2, [r7, #2]
 8008b58:	88fb      	ldrh	r3, [r7, #6]
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 8008b5e:	883a      	ldrh	r2, [r7, #0]
 8008b60:	88bb      	ldrh	r3, [r7, #4]
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 8008b66:	88fb      	ldrh	r3, [r7, #6]
 8008b68:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 8008b6a:	88bb      	ldrh	r3, [r7, #4]
 8008b6c:	60bb      	str	r3, [r7, #8]
	if (delta_x > 0)
 8008b6e:	6a3b      	ldr	r3, [r7, #32]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	dd02      	ble.n	8008b7a <LCD_DrawLine+0x4a>
		incx = 1; //设置单步方向
 8008b74:	2301      	movs	r3, #1
 8008b76:	617b      	str	r3, [r7, #20]
 8008b78:	e00b      	b.n	8008b92 <LCD_DrawLine+0x62>
	else if (delta_x == 0)
 8008b7a:	6a3b      	ldr	r3, [r7, #32]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d102      	bne.n	8008b86 <LCD_DrawLine+0x56>
		incx = 0; //垂直线
 8008b80:	2300      	movs	r3, #0
 8008b82:	617b      	str	r3, [r7, #20]
 8008b84:	e005      	b.n	8008b92 <LCD_DrawLine+0x62>
	else {
		incx = -1;
 8008b86:	f04f 33ff 	mov.w	r3, #4294967295
 8008b8a:	617b      	str	r3, [r7, #20]
		delta_x = -delta_x;
 8008b8c:	6a3b      	ldr	r3, [r7, #32]
 8008b8e:	425b      	negs	r3, r3
 8008b90:	623b      	str	r3, [r7, #32]
	}
	if (delta_y > 0)
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	dd02      	ble.n	8008b9e <LCD_DrawLine+0x6e>
		incy = 1;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	613b      	str	r3, [r7, #16]
 8008b9c:	e00b      	b.n	8008bb6 <LCD_DrawLine+0x86>
	else if (delta_y == 0)
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d102      	bne.n	8008baa <LCD_DrawLine+0x7a>
		incy = 0; //水平线
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	613b      	str	r3, [r7, #16]
 8008ba8:	e005      	b.n	8008bb6 <LCD_DrawLine+0x86>
	else {
		incy = -1;
 8008baa:	f04f 33ff 	mov.w	r3, #4294967295
 8008bae:	613b      	str	r3, [r7, #16]
		delta_y = -delta_y;
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	425b      	negs	r3, r3
 8008bb4:	61fb      	str	r3, [r7, #28]
	}
	if (delta_x > delta_y)
 8008bb6:	6a3a      	ldr	r2, [r7, #32]
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	dd02      	ble.n	8008bc4 <LCD_DrawLine+0x94>
		distance = delta_x; //选取基本增量坐标轴
 8008bbe:	6a3b      	ldr	r3, [r7, #32]
 8008bc0:	61bb      	str	r3, [r7, #24]
 8008bc2:	e001      	b.n	8008bc8 <LCD_DrawLine+0x98>
	else
		distance = delta_y;
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	61bb      	str	r3, [r7, #24]
	for (t = 0; t <= distance + 1; t++) //画线输出
 8008bc8:	2300      	movs	r3, #0
 8008bca:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008bcc:	e02a      	b.n	8008c24 <LCD_DrawLine+0xf4>
			{
		LCD_DrawPoint(uRow, uCol); //画点
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	b292      	uxth	r2, r2
 8008bd6:	4611      	mov	r1, r2
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7fb fb17 	bl	800420c <LCD_DrawPoint>
		xerr += delta_x;
 8008bde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008be0:	6a3b      	ldr	r3, [r7, #32]
 8008be2:	4413      	add	r3, r2
 8008be4:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr += delta_y;
 8008be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	4413      	add	r3, r2
 8008bec:	627b      	str	r3, [r7, #36]	; 0x24
		if (xerr > distance) {
 8008bee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	dd07      	ble.n	8008c06 <LCD_DrawLine+0xd6>
			xerr -= distance;
 8008bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	1ad3      	subs	r3, r2, r3
 8008bfc:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow += incx;
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	4413      	add	r3, r2
 8008c04:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance) {
 8008c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	dd07      	ble.n	8008c1e <LCD_DrawLine+0xee>
			yerr -= distance;
 8008c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	1ad3      	subs	r3, r2, r3
 8008c14:	627b      	str	r3, [r7, #36]	; 0x24
			uCol += incy;
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	60bb      	str	r3, [r7, #8]
	for (t = 0; t <= distance + 1; t++) //画线输出
 8008c1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008c20:	3301      	adds	r3, #1
 8008c22:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008c24:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	ddcf      	ble.n	8008bce <LCD_DrawLine+0x9e>
		}
	}
}
 8008c2e:	bf00      	nop
 8008c30:	3734      	adds	r7, #52	; 0x34
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd90      	pop	{r4, r7, pc}

08008c36 <LCD_DrawRectangle>:
//Draw a rectangle
//(x1,y1),(x2,y2): coordinates of the upper left point and bottom right point of a rectangle
void LCD_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8008c36:	b590      	push	{r4, r7, lr}
 8008c38:	b083      	sub	sp, #12
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	4604      	mov	r4, r0
 8008c3e:	4608      	mov	r0, r1
 8008c40:	4611      	mov	r1, r2
 8008c42:	461a      	mov	r2, r3
 8008c44:	4623      	mov	r3, r4
 8008c46:	80fb      	strh	r3, [r7, #6]
 8008c48:	4603      	mov	r3, r0
 8008c4a:	80bb      	strh	r3, [r7, #4]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	807b      	strh	r3, [r7, #2]
 8008c50:	4613      	mov	r3, r2
 8008c52:	803b      	strh	r3, [r7, #0]
	LCD_DrawLine(x1, y1, x2, y1);
 8008c54:	88bb      	ldrh	r3, [r7, #4]
 8008c56:	887a      	ldrh	r2, [r7, #2]
 8008c58:	88b9      	ldrh	r1, [r7, #4]
 8008c5a:	88f8      	ldrh	r0, [r7, #6]
 8008c5c:	f7ff ff68 	bl	8008b30 <LCD_DrawLine>
	LCD_DrawLine(x1, y1, x1, y2);
 8008c60:	883b      	ldrh	r3, [r7, #0]
 8008c62:	88fa      	ldrh	r2, [r7, #6]
 8008c64:	88b9      	ldrh	r1, [r7, #4]
 8008c66:	88f8      	ldrh	r0, [r7, #6]
 8008c68:	f7ff ff62 	bl	8008b30 <LCD_DrawLine>
	LCD_DrawLine(x1, y2, x2, y2);
 8008c6c:	883b      	ldrh	r3, [r7, #0]
 8008c6e:	887a      	ldrh	r2, [r7, #2]
 8008c70:	8839      	ldrh	r1, [r7, #0]
 8008c72:	88f8      	ldrh	r0, [r7, #6]
 8008c74:	f7ff ff5c 	bl	8008b30 <LCD_DrawLine>
	LCD_DrawLine(x2, y1, x2, y2);
 8008c78:	883b      	ldrh	r3, [r7, #0]
 8008c7a:	887a      	ldrh	r2, [r7, #2]
 8008c7c:	88b9      	ldrh	r1, [r7, #4]
 8008c7e:	8878      	ldrh	r0, [r7, #2]
 8008c80:	f7ff ff56 	bl	8008b30 <LCD_DrawLine>
}
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd90      	pop	{r4, r7, pc}

08008c8c <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 8008c8c:	b590      	push	{r4, r7, lr}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	4604      	mov	r4, r0
 8008c94:	4608      	mov	r0, r1
 8008c96:	4611      	mov	r1, r2
 8008c98:	461a      	mov	r2, r3
 8008c9a:	4623      	mov	r3, r4
 8008c9c:	80fb      	strh	r3, [r7, #6]
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	80bb      	strh	r3, [r7, #4]
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	70fb      	strb	r3, [r7, #3]
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 8008caa:	88bb      	ldrh	r3, [r7, #4]
 8008cac:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 8008cae:	78bb      	ldrb	r3, [r7, #2]
 8008cb0:	08db      	lsrs	r3, r3, #3
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	78bb      	ldrb	r3, [r7, #2]
 8008cb8:	f003 0307 	and.w	r3, r3, #7
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	bf14      	ite	ne
 8008cc2:	2301      	movne	r3, #1
 8008cc4:	2300      	moveq	r3, #0
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	4413      	add	r3, r2
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	78ba      	ldrb	r2, [r7, #2]
 8008cce:	0852      	lsrs	r2, r2, #1
 8008cd0:	b2d2      	uxtb	r2, r2
 8008cd2:	fb02 f303 	mul.w	r3, r2, r3
 8008cd6:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8008cd8:	78fb      	ldrb	r3, [r7, #3]
 8008cda:	3b20      	subs	r3, #32
 8008cdc:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 8008cde:	2300      	movs	r3, #0
 8008ce0:	737b      	strb	r3, [r7, #13]
 8008ce2:	e069      	b.n	8008db8 <LCD_ShowChar+0x12c>
		if (size == 12)
 8008ce4:	78bb      	ldrb	r3, [r7, #2]
 8008ce6:	2b0c      	cmp	r3, #12
 8008ce8:	d10b      	bne.n	8008d02 <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 8008cea:	78fa      	ldrb	r2, [r7, #3]
 8008cec:	7b79      	ldrb	r1, [r7, #13]
 8008cee:	4838      	ldr	r0, [pc, #224]	; (8008dd0 <LCD_ShowChar+0x144>)
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	005b      	lsls	r3, r3, #1
 8008cf4:	4413      	add	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	4403      	add	r3, r0
 8008cfa:	440b      	add	r3, r1
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	73fb      	strb	r3, [r7, #15]
 8008d00:	e019      	b.n	8008d36 <LCD_ShowChar+0xaa>
		else if (size == 16)
 8008d02:	78bb      	ldrb	r3, [r7, #2]
 8008d04:	2b10      	cmp	r3, #16
 8008d06:	d108      	bne.n	8008d1a <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 8008d08:	78fa      	ldrb	r2, [r7, #3]
 8008d0a:	7b7b      	ldrb	r3, [r7, #13]
 8008d0c:	4931      	ldr	r1, [pc, #196]	; (8008dd4 <LCD_ShowChar+0x148>)
 8008d0e:	0112      	lsls	r2, r2, #4
 8008d10:	440a      	add	r2, r1
 8008d12:	4413      	add	r3, r2
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	73fb      	strb	r3, [r7, #15]
 8008d18:	e00d      	b.n	8008d36 <LCD_ShowChar+0xaa>
		else if (size == 24)
 8008d1a:	78bb      	ldrb	r3, [r7, #2]
 8008d1c:	2b18      	cmp	r3, #24
 8008d1e:	d150      	bne.n	8008dc2 <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 8008d20:	78fa      	ldrb	r2, [r7, #3]
 8008d22:	7b79      	ldrb	r1, [r7, #13]
 8008d24:	482c      	ldr	r0, [pc, #176]	; (8008dd8 <LCD_ShowChar+0x14c>)
 8008d26:	4613      	mov	r3, r2
 8008d28:	00db      	lsls	r3, r3, #3
 8008d2a:	4413      	add	r3, r2
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4403      	add	r3, r0
 8008d30:	440b      	add	r3, r1
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 8008d36:	2300      	movs	r3, #0
 8008d38:	73bb      	strb	r3, [r7, #14]
 8008d3a:	e035      	b.n	8008da8 <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 8008d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	da07      	bge.n	8008d54 <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8008d44:	4b25      	ldr	r3, [pc, #148]	; (8008ddc <LCD_ShowChar+0x150>)
 8008d46:	881a      	ldrh	r2, [r3, #0]
 8008d48:	88b9      	ldrh	r1, [r7, #4]
 8008d4a:	88fb      	ldrh	r3, [r7, #6]
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7fb fa8d 	bl	800426c <LCD_Fast_DrawPoint>
 8008d52:	e00a      	b.n	8008d6a <LCD_ShowChar+0xde>
			else if (mode == 0)
 8008d54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d106      	bne.n	8008d6a <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 8008d5c:	4b20      	ldr	r3, [pc, #128]	; (8008de0 <LCD_ShowChar+0x154>)
 8008d5e:	881a      	ldrh	r2, [r3, #0]
 8008d60:	88b9      	ldrh	r1, [r7, #4]
 8008d62:	88fb      	ldrh	r3, [r7, #6]
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7fb fa81 	bl	800426c <LCD_Fast_DrawPoint>
			temp <<= 1;
 8008d6a:	7bfb      	ldrb	r3, [r7, #15]
 8008d6c:	005b      	lsls	r3, r3, #1
 8008d6e:	73fb      	strb	r3, [r7, #15]
			y++;
 8008d70:	88bb      	ldrh	r3, [r7, #4]
 8008d72:	3301      	adds	r3, #1
 8008d74:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 8008d76:	4b1b      	ldr	r3, [pc, #108]	; (8008de4 <LCD_ShowChar+0x158>)
 8008d78:	885b      	ldrh	r3, [r3, #2]
 8008d7a:	88ba      	ldrh	r2, [r7, #4]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d222      	bcs.n	8008dc6 <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 8008d80:	88ba      	ldrh	r2, [r7, #4]
 8008d82:	897b      	ldrh	r3, [r7, #10]
 8008d84:	1ad2      	subs	r2, r2, r3
 8008d86:	78bb      	ldrb	r3, [r7, #2]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d10a      	bne.n	8008da2 <LCD_ShowChar+0x116>
				y = y0;
 8008d8c:	897b      	ldrh	r3, [r7, #10]
 8008d8e:	80bb      	strh	r3, [r7, #4]
				x++;
 8008d90:	88fb      	ldrh	r3, [r7, #6]
 8008d92:	3301      	adds	r3, #1
 8008d94:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 8008d96:	4b13      	ldr	r3, [pc, #76]	; (8008de4 <LCD_ShowChar+0x158>)
 8008d98:	881b      	ldrh	r3, [r3, #0]
 8008d9a:	88fa      	ldrh	r2, [r7, #6]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d307      	bcc.n	8008db0 <LCD_ShowChar+0x124>
					return;	//超区域了
 8008da0:	e012      	b.n	8008dc8 <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 8008da2:	7bbb      	ldrb	r3, [r7, #14]
 8008da4:	3301      	adds	r3, #1
 8008da6:	73bb      	strb	r3, [r7, #14]
 8008da8:	7bbb      	ldrb	r3, [r7, #14]
 8008daa:	2b07      	cmp	r3, #7
 8008dac:	d9c6      	bls.n	8008d3c <LCD_ShowChar+0xb0>
 8008dae:	e000      	b.n	8008db2 <LCD_ShowChar+0x126>
				break;
 8008db0:	bf00      	nop
	for (t = 0; t < csize; t++) {
 8008db2:	7b7b      	ldrb	r3, [r7, #13]
 8008db4:	3301      	adds	r3, #1
 8008db6:	737b      	strb	r3, [r7, #13]
 8008db8:	7b7a      	ldrb	r2, [r7, #13]
 8008dba:	7a7b      	ldrb	r3, [r7, #9]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d391      	bcc.n	8008ce4 <LCD_ShowChar+0x58>
 8008dc0:	e002      	b.n	8008dc8 <LCD_ShowChar+0x13c>
			return;								//没有的字库
 8008dc2:	bf00      	nop
 8008dc4:	e000      	b.n	8008dc8 <LCD_ShowChar+0x13c>
				return;		//超区域了
 8008dc6:	bf00      	nop
			}
		}
	}
}
 8008dc8:	3714      	adds	r7, #20
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd90      	pop	{r4, r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	0800a308 	.word	0x0800a308
 8008dd4:	0800a77c 	.word	0x0800a77c
 8008dd8:	0800ad6c 	.word	0x0800ad6c
 8008ddc:	20000dec 	.word	0x20000dec
 8008de0:	2000000c 	.word	0x2000000c
 8008de4:	20000e18 	.word	0x20000e18

08008de8 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 8008de8:	b590      	push	{r4, r7, lr}
 8008dea:	b087      	sub	sp, #28
 8008dec:	af02      	add	r7, sp, #8
 8008dee:	4604      	mov	r4, r0
 8008df0:	4608      	mov	r0, r1
 8008df2:	4611      	mov	r1, r2
 8008df4:	461a      	mov	r2, r3
 8008df6:	4623      	mov	r3, r4
 8008df8:	80fb      	strh	r3, [r7, #6]
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	80bb      	strh	r3, [r7, #4]
 8008dfe:	460b      	mov	r3, r1
 8008e00:	807b      	strh	r3, [r7, #2]
 8008e02:	4613      	mov	r3, r2
 8008e04:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 8008e06:	88fb      	ldrh	r3, [r7, #6]
 8008e08:	73fb      	strb	r3, [r7, #15]
	width += x;
 8008e0a:	887a      	ldrh	r2, [r7, #2]
 8008e0c:	88fb      	ldrh	r3, [r7, #6]
 8008e0e:	4413      	add	r3, r2
 8008e10:	807b      	strh	r3, [r7, #2]
	height += y;
 8008e12:	883a      	ldrh	r2, [r7, #0]
 8008e14:	88bb      	ldrh	r3, [r7, #4]
 8008e16:	4413      	add	r3, r2
 8008e18:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8008e1a:	e025      	b.n	8008e68 <LCD_ShowString+0x80>
	{
		if (x >= width) {
 8008e1c:	88fa      	ldrh	r2, [r7, #6]
 8008e1e:	887b      	ldrh	r3, [r7, #2]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d307      	bcc.n	8008e34 <LCD_ShowString+0x4c>
			x = x0;
 8008e24:	7bfb      	ldrb	r3, [r7, #15]
 8008e26:	80fb      	strh	r3, [r7, #6]
			y += size;
 8008e28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008e2c:	b29a      	uxth	r2, r3
 8008e2e:	88bb      	ldrh	r3, [r7, #4]
 8008e30:	4413      	add	r3, r2
 8008e32:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 8008e34:	88ba      	ldrh	r2, [r7, #4]
 8008e36:	883b      	ldrh	r3, [r7, #0]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d21e      	bcs.n	8008e7a <LCD_ShowString+0x92>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3e:	781a      	ldrb	r2, [r3, #0]
 8008e40:	f897 4020 	ldrb.w	r4, [r7, #32]
 8008e44:	88b9      	ldrh	r1, [r7, #4]
 8008e46:	88f8      	ldrh	r0, [r7, #6]
 8008e48:	2300      	movs	r3, #0
 8008e4a:	9300      	str	r3, [sp, #0]
 8008e4c:	4623      	mov	r3, r4
 8008e4e:	f7ff ff1d 	bl	8008c8c <LCD_ShowChar>
		x += size / 2;
 8008e52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008e56:	085b      	lsrs	r3, r3, #1
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	88fb      	ldrh	r3, [r7, #6]
 8008e5e:	4413      	add	r3, r2
 8008e60:	80fb      	strh	r3, [r7, #6]
		p++;
 8008e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e64:	3301      	adds	r3, #1
 8008e66:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8008e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	2b7e      	cmp	r3, #126	; 0x7e
 8008e6e:	d805      	bhi.n	8008e7c <LCD_ShowString+0x94>
 8008e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	2b1f      	cmp	r3, #31
 8008e76:	d8d1      	bhi.n	8008e1c <LCD_ShowString+0x34>
	}
}
 8008e78:	e000      	b.n	8008e7c <LCD_ShowString+0x94>
			break;	//退出
 8008e7a:	bf00      	nop
}
 8008e7c:	bf00      	nop
 8008e7e:	3714      	adds	r7, #20
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd90      	pop	{r4, r7, pc}

08008e84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008e88:	f7f7 fdc8 	bl	8000a1c <HAL_Init>

  /* USER CODE BEGIN Init */
  LCD_Init();
 8008e8c:	f7fb fe34 	bl	8004af8 <LCD_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008e90:	f000 f809 	bl	8008ea6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008e94:	f7fa fa8e 	bl	80033b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8008e98:	f000 fc4e 	bl	8009738 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8008e9c:	f7fa f9f2 	bl	8003284 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8008ea0:	f7f9 f907 	bl	80020b2 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008ea4:	e7fe      	b.n	8008ea4 <main+0x20>

08008ea6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b090      	sub	sp, #64	; 0x40
 8008eaa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008eac:	f107 0318 	add.w	r3, r7, #24
 8008eb0:	2228      	movs	r2, #40	; 0x28
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f000 fd30 	bl	800991a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008eba:	1d3b      	adds	r3, r7, #4
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	601a      	str	r2, [r3, #0]
 8008ec0:	605a      	str	r2, [r3, #4]
 8008ec2:	609a      	str	r2, [r3, #8]
 8008ec4:	60da      	str	r2, [r3, #12]
 8008ec6:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008ecc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ed0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008eda:	2302      	movs	r3, #2
 8008edc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008ede:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ee2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008ee4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008eea:	f107 0318 	add.w	r3, r7, #24
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7f8 f862 	bl	8000fb8 <HAL_RCC_OscConfig>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d001      	beq.n	8008efe <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008efa:	f000 f82b 	bl	8008f54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008efe:	230f      	movs	r3, #15
 8008f00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008f02:	2302      	movs	r3, #2
 8008f04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008f06:	2300      	movs	r3, #0
 8008f08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008f10:	2300      	movs	r3, #0
 8008f12:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008f14:	1d3b      	adds	r3, r7, #4
 8008f16:	2102      	movs	r1, #2
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7f8 facd 	bl	80014b8 <HAL_RCC_ClockConfig>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d001      	beq.n	8008f28 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008f24:	f000 f816 	bl	8008f54 <Error_Handler>
  }
}
 8008f28:	bf00      	nop
 8008f2a:	3740      	adds	r7, #64	; 0x40
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a04      	ldr	r2, [pc, #16]	; (8008f50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d101      	bne.n	8008f46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8008f42:	f7f7 fd81 	bl	8000a48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008f46:	bf00      	nop
 8008f48:	3708      	adds	r7, #8
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	40000400 	.word	0x40000400

08008f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008f54:	b480      	push	{r7}
 8008f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008f58:	bf00      	nop
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bc80      	pop	{r7}
 8008f5e:	4770      	bx	lr

08008f60 <snake_init>:
unsigned time_bean;
unsigned time_stone;
unsigned time_snake;

/* Initializing the snake with specific length and color */
void snake_init(int init_len, uint16_t color) {
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b090      	sub	sp, #64	; 0x40
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	460b      	mov	r3, r1
 8008f6a:	807b      	strh	r3, [r7, #2]
	snake snk_t;
	snk = &snk_t;
 8008f6c:	4a2a      	ldr	r2, [pc, #168]	; (8009018 <snake_init+0xb8>)
 8008f6e:	f107 0320 	add.w	r3, r7, #32
 8008f72:	6013      	str	r3, [r2, #0]

	snk->color = color;
 8008f74:	4b28      	ldr	r3, [pc, #160]	; (8009018 <snake_init+0xb8>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	887a      	ldrh	r2, [r7, #2]
 8008f7a:	819a      	strh	r2, [r3, #12]
	snk->length = 0;
 8008f7c:	4b26      	ldr	r3, [pc, #152]	; (8009018 <snake_init+0xb8>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2200      	movs	r2, #0
 8008f82:	609a      	str	r2, [r3, #8]
	snk->dir->ver = 0;
 8008f84:	4b24      	ldr	r3, [pc, #144]	; (8009018 <snake_init+0xb8>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	801a      	strh	r2, [r3, #0]
	snk->dir->hor = -1;
 8008f8e:	4b22      	ldr	r3, [pc, #136]	; (8009018 <snake_init+0xb8>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f98:	805a      	strh	r2, [r3, #2]

	while (snk->length < init_len) {
 8008f9a:	e02d      	b.n	8008ff8 <snake_init+0x98>
		if (snk->length == 0) {
 8008f9c:	4b1e      	ldr	r3, [pc, #120]	; (8009018 <snake_init+0xb8>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d117      	bne.n	8008fd6 <snake_init+0x76>
			occupied_grid temp_og;
			position temp_p;
			occupied_grid *original_grid = &temp_og;
 8008fa6:	f107 0314 	add.w	r3, r7, #20
 8008faa:	63bb      	str	r3, [r7, #56]	; 0x38
			position *original_pos = &temp_p;
 8008fac:	f107 030c 	add.w	r3, r7, #12
 8008fb0:	637b      	str	r3, [r7, #52]	; 0x34
			original_pos->x = HORIZONTAL_GRID_NUMBER / 2;
 8008fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb4:	220c      	movs	r2, #12
 8008fb6:	601a      	str	r2, [r3, #0]
			original_pos->y = VERTICAL_GRID_NUMBER / 2;
 8008fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fba:	220e      	movs	r2, #14
 8008fbc:	605a      	str	r2, [r3, #4]
			original_grid->pos = original_pos;
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fc2:	609a      	str	r2, [r3, #8]
			snk->head = snk->tail = original_grid;
 8008fc4:	4b14      	ldr	r3, [pc, #80]	; (8009018 <snake_init+0xb8>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fca:	605a      	str	r2, [r3, #4]
 8008fcc:	4a12      	ldr	r2, [pc, #72]	; (8009018 <snake_init+0xb8>)
 8008fce:	6812      	ldr	r2, [r2, #0]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	6013      	str	r3, [r2, #0]
 8008fd4:	e00b      	b.n	8008fee <snake_init+0x8e>
		} else {
			direction temp_d;
			direction *dir = &temp_d;
 8008fd6:	f107 0308 	add.w	r3, r7, #8
 8008fda:	63fb      	str	r3, [r7, #60]	; 0x3c
			dir->ver = 0;
 8008fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fde:	2200      	movs	r2, #0
 8008fe0:	801a      	strh	r2, [r3, #0]
			dir->hor = 1;
 8008fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	805a      	strh	r2, [r3, #2]
			snake_tail_lengthen(dir);
 8008fe8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008fea:	f000 f81b 	bl	8009024 <snake_tail_lengthen>
		}
		snk->length++;
 8008fee:	4b0a      	ldr	r3, [pc, #40]	; (8009018 <snake_init+0xb8>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	689a      	ldr	r2, [r3, #8]
 8008ff4:	3201      	adds	r2, #1
 8008ff6:	609a      	str	r2, [r3, #8]
	while (snk->length < init_len) {
 8008ff8:	4b07      	ldr	r3, [pc, #28]	; (8009018 <snake_init+0xb8>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	429a      	cmp	r2, r3
 8009002:	dccb      	bgt.n	8008f9c <snake_init+0x3c>
	}
	time_snake = milisecond;
 8009004:	4b05      	ldr	r3, [pc, #20]	; (800901c <snake_init+0xbc>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	461a      	mov	r2, r3
 800900a:	4b05      	ldr	r3, [pc, #20]	; (8009020 <snake_init+0xc0>)
 800900c:	601a      	str	r2, [r3, #0]
}
 800900e:	bf00      	nop
 8009010:	3740      	adds	r7, #64	; 0x40
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	20000e2c 	.word	0x20000e2c
 800901c:	20000df4 	.word	0x20000df4
 8009020:	20000e38 	.word	0x20000e38

08009024 <snake_tail_lengthen>:
		free(temp);
	}
}

/* Lengthen the snake by adding a segment to the tail */
void snake_tail_lengthen(direction *dir) {
 8009024:	b480      	push	{r7}
 8009026:	b08b      	sub	sp, #44	; 0x2c
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
	occupied_grid temp_og;
	position temp_p;
	occupied_grid *temp = &temp_og;
 800902c:	f107 0314 	add.w	r3, r7, #20
 8009030:	627b      	str	r3, [r7, #36]	; 0x24
	position *temp_pos = &temp_p;
 8009032:	f107 030c 	add.w	r3, r7, #12
 8009036:	623b      	str	r3, [r7, #32]
	temp_pos->x = snk->tail->pos->x + dir->hor;
 8009038:	4b17      	ldr	r3, [pc, #92]	; (8009098 <snake_tail_lengthen+0x74>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8009048:	441a      	add	r2, r3
 800904a:	6a3b      	ldr	r3, [r7, #32]
 800904c:	601a      	str	r2, [r3, #0]
	temp_pos->y = snk->tail->pos->y + dir->ver;
 800904e:	4b12      	ldr	r3, [pc, #72]	; (8009098 <snake_tail_lengthen+0x74>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800905e:	441a      	add	r2, r3
 8009060:	6a3b      	ldr	r3, [r7, #32]
 8009062:	605a      	str	r2, [r3, #4]
	temp->pos = temp_pos;
 8009064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009066:	6a3a      	ldr	r2, [r7, #32]
 8009068:	609a      	str	r2, [r3, #8]
	snk->tail->next = temp;
 800906a:	4b0b      	ldr	r3, [pc, #44]	; (8009098 <snake_tail_lengthen+0x74>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009072:	605a      	str	r2, [r3, #4]
	temp->prev = snk->tail;
 8009074:	4b08      	ldr	r3, [pc, #32]	; (8009098 <snake_tail_lengthen+0x74>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	685a      	ldr	r2, [r3, #4]
 800907a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907c:	601a      	str	r2, [r3, #0]
	temp->next = NULL;
 800907e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009080:	2200      	movs	r2, #0
 8009082:	605a      	str	r2, [r3, #4]
	snk->tail = temp;
 8009084:	4b04      	ldr	r3, [pc, #16]	; (8009098 <snake_tail_lengthen+0x74>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800908a:	605a      	str	r2, [r3, #4]
}
 800908c:	bf00      	nop
 800908e:	372c      	adds	r7, #44	; 0x2c
 8009090:	46bd      	mov	sp, r7
 8009092:	bc80      	pop	{r7}
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop
 8009098:	20000e2c 	.word	0x20000e2c

0800909c <random_pos>:
	position *head_pos = snk->head->pos;
	return head_pos->x == stone->x && head_pos->y == stone->y;
}

/* Get a random position out of snake's body */
position* random_pos() {
 800909c:	b580      	push	{r7, lr}
 800909e:	b08a      	sub	sp, #40	; 0x28
 80090a0:	af00      	add	r7, sp, #0
	position temp_p;
	position * temp_pos = &temp_p;
 80090a2:	f107 0314 	add.w	r3, r7, #20
 80090a6:	623b      	str	r3, [r7, #32]
	uint16_t x, y;
	occupied_grid *body;

	char msg[20];
	sprintf(msg, "%d\r\n", milisecond);
 80090a8:	4b59      	ldr	r3, [pc, #356]	; (8009210 <random_pos+0x174>)
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	463b      	mov	r3, r7
 80090ae:	4959      	ldr	r1, [pc, #356]	; (8009214 <random_pos+0x178>)
 80090b0:	4618      	mov	r0, r3
 80090b2:	f000 fd49 	bl	8009b48 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80090b6:	463b      	mov	r3, r7
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7f7 f8b9 	bl	8000230 <strlen>
 80090be:	4603      	mov	r3, r0
 80090c0:	b29a      	uxth	r2, r3
 80090c2:	4639      	mov	r1, r7
 80090c4:	f04f 33ff 	mov.w	r3, #4294967295
 80090c8:	4853      	ldr	r0, [pc, #332]	; (8009218 <random_pos+0x17c>)
 80090ca:	f7f8 fe1e 	bl	8001d0a <HAL_UART_Transmit>

	srand(milisecond);
 80090ce:	4b50      	ldr	r3, [pc, #320]	; (8009210 <random_pos+0x174>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 fcd0 	bl	8009a78 <srand>
	do {
		x = rand() % HORIZONTAL_GRID_NUMBER;
 80090d8:	f000 fcf2 	bl	8009ac0 <rand>
 80090dc:	4601      	mov	r1, r0
 80090de:	4b4f      	ldr	r3, [pc, #316]	; (800921c <random_pos+0x180>)
 80090e0:	fb83 2301 	smull	r2, r3, r3, r1
 80090e4:	109a      	asrs	r2, r3, #2
 80090e6:	17cb      	asrs	r3, r1, #31
 80090e8:	1ad2      	subs	r2, r2, r3
 80090ea:	4613      	mov	r3, r2
 80090ec:	005b      	lsls	r3, r3, #1
 80090ee:	4413      	add	r3, r2
 80090f0:	00db      	lsls	r3, r3, #3
 80090f2:	1aca      	subs	r2, r1, r3
 80090f4:	4613      	mov	r3, r2
 80090f6:	83fb      	strh	r3, [r7, #30]
		y = rand() % VERTICAL_GRID_NUMBER;
 80090f8:	f000 fce2 	bl	8009ac0 <rand>
 80090fc:	4602      	mov	r2, r0
 80090fe:	4b48      	ldr	r3, [pc, #288]	; (8009220 <random_pos+0x184>)
 8009100:	fb83 1302 	smull	r1, r3, r3, r2
 8009104:	4413      	add	r3, r2
 8009106:	1119      	asrs	r1, r3, #4
 8009108:	17d3      	asrs	r3, r2, #31
 800910a:	1ac9      	subs	r1, r1, r3
 800910c:	460b      	mov	r3, r1
 800910e:	00db      	lsls	r3, r3, #3
 8009110:	1a5b      	subs	r3, r3, r1
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	1ad1      	subs	r1, r2, r3
 8009116:	460b      	mov	r3, r1
 8009118:	83bb      	strh	r3, [r7, #28]
		body = snk->head;
 800911a:	4b42      	ldr	r3, [pc, #264]	; (8009224 <random_pos+0x188>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	627b      	str	r3, [r7, #36]	; 0x24
		while (body != NULL) {
 8009122:	e00e      	b.n	8009142 <random_pos+0xa6>
			if (body->pos->x == x && body->pos->y == y) {
 8009124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	8bfb      	ldrh	r3, [r7, #30]
 800912c:	429a      	cmp	r2, r3
 800912e:	d105      	bne.n	800913c <random_pos+0xa0>
 8009130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	685a      	ldr	r2, [r3, #4]
 8009136:	8bbb      	ldrh	r3, [r7, #28]
 8009138:	429a      	cmp	r2, r3
 800913a:	d006      	beq.n	800914a <random_pos+0xae>
				break;
			}
			body = body->next;
 800913c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	627b      	str	r3, [r7, #36]	; 0x24
		while (body != NULL) {
 8009142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1ed      	bne.n	8009124 <random_pos+0x88>
 8009148:	e000      	b.n	800914c <random_pos+0xb0>
				break;
 800914a:	bf00      	nop
		}
		if (b != NULL && stone != NULL && x != b->pos->x && x != stone->x
 800914c:	4b36      	ldr	r3, [pc, #216]	; (8009228 <random_pos+0x18c>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d01d      	beq.n	8009190 <random_pos+0xf4>
 8009154:	4b35      	ldr	r3, [pc, #212]	; (800922c <random_pos+0x190>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d019      	beq.n	8009190 <random_pos+0xf4>
 800915c:	8bfa      	ldrh	r2, [r7, #30]
 800915e:	4b32      	ldr	r3, [pc, #200]	; (8009228 <random_pos+0x18c>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	429a      	cmp	r2, r3
 8009168:	d012      	beq.n	8009190 <random_pos+0xf4>
 800916a:	8bfa      	ldrh	r2, [r7, #30]
 800916c:	4b2f      	ldr	r3, [pc, #188]	; (800922c <random_pos+0x190>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	429a      	cmp	r2, r3
 8009174:	d00c      	beq.n	8009190 <random_pos+0xf4>
				&& y != b->pos->y && y != stone->y) {
 8009176:	8bba      	ldrh	r2, [r7, #28]
 8009178:	4b2b      	ldr	r3, [pc, #172]	; (8009228 <random_pos+0x18c>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	429a      	cmp	r2, r3
 8009182:	d005      	beq.n	8009190 <random_pos+0xf4>
 8009184:	8bba      	ldrh	r2, [r7, #28]
 8009186:	4b29      	ldr	r3, [pc, #164]	; (800922c <random_pos+0x190>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	429a      	cmp	r2, r3
 800918e:	d134      	bne.n	80091fa <random_pos+0x15e>
			break;
		} else if (b != NULL && stone == NULL && x != b->pos->x
 8009190:	4b25      	ldr	r3, [pc, #148]	; (8009228 <random_pos+0x18c>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d011      	beq.n	80091bc <random_pos+0x120>
 8009198:	4b24      	ldr	r3, [pc, #144]	; (800922c <random_pos+0x190>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d10d      	bne.n	80091bc <random_pos+0x120>
 80091a0:	8bfa      	ldrh	r2, [r7, #30]
 80091a2:	4b21      	ldr	r3, [pc, #132]	; (8009228 <random_pos+0x18c>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d006      	beq.n	80091bc <random_pos+0x120>
				&& y != b->pos->y) {
 80091ae:	8bba      	ldrh	r2, [r7, #28]
 80091b0:	4b1d      	ldr	r3, [pc, #116]	; (8009228 <random_pos+0x18c>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d11e      	bne.n	80091fa <random_pos+0x15e>
			break;
		} else if (b == NULL && stone != NULL && x != stone->x
 80091bc:	4b1a      	ldr	r3, [pc, #104]	; (8009228 <random_pos+0x18c>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d10f      	bne.n	80091e4 <random_pos+0x148>
 80091c4:	4b19      	ldr	r3, [pc, #100]	; (800922c <random_pos+0x190>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d00b      	beq.n	80091e4 <random_pos+0x148>
 80091cc:	8bfa      	ldrh	r2, [r7, #30]
 80091ce:	4b17      	ldr	r3, [pc, #92]	; (800922c <random_pos+0x190>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d005      	beq.n	80091e4 <random_pos+0x148>
				&& y != stone->y) {
 80091d8:	8bba      	ldrh	r2, [r7, #28]
 80091da:	4b14      	ldr	r3, [pc, #80]	; (800922c <random_pos+0x190>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d10a      	bne.n	80091fa <random_pos+0x15e>
			break;
		} else if (b == NULL && stone == NULL) {
 80091e4:	4b10      	ldr	r3, [pc, #64]	; (8009228 <random_pos+0x18c>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f47f af75 	bne.w	80090d8 <random_pos+0x3c>
 80091ee:	4b0f      	ldr	r3, [pc, #60]	; (800922c <random_pos+0x190>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d000      	beq.n	80091f8 <random_pos+0x15c>
		x = rand() % HORIZONTAL_GRID_NUMBER;
 80091f6:	e76f      	b.n	80090d8 <random_pos+0x3c>
			break;
 80091f8:	bf00      	nop
		}

	} while (1);
	temp_pos->x = x;
 80091fa:	8bfa      	ldrh	r2, [r7, #30]
 80091fc:	6a3b      	ldr	r3, [r7, #32]
 80091fe:	601a      	str	r2, [r3, #0]
	temp_pos->y = y;
 8009200:	8bba      	ldrh	r2, [r7, #28]
 8009202:	6a3b      	ldr	r3, [r7, #32]
 8009204:	605a      	str	r2, [r3, #4]
	return temp_pos;
 8009206:	6a3b      	ldr	r3, [r7, #32]
}
 8009208:	4618      	mov	r0, r3
 800920a:	3728      	adds	r7, #40	; 0x28
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	20000df4 	.word	0x20000df4
 8009214:	0800a2f8 	.word	0x0800a2f8
 8009218:	20000e84 	.word	0x20000e84
 800921c:	2aaaaaab 	.word	0x2aaaaaab
 8009220:	92492493 	.word	0x92492493
 8009224:	20000e2c 	.word	0x20000e2c
 8009228:	20000e28 	.word	0x20000e28
 800922c:	20000e3c 	.word	0x20000e3c

08009230 <generate_bean>:

/* Generate a bean */
void generate_bean() {
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
	uint8_t color_idx;
	position * temp_pos = random_pos();
 8009236:	f7ff ff31 	bl	800909c <random_pos>
 800923a:	6078      	str	r0, [r7, #4]
	b->pos = temp_pos;
 800923c:	4b46      	ldr	r3, [pc, #280]	; (8009358 <generate_bean+0x128>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	605a      	str	r2, [r3, #4]
	color_idx = rand() % 13 + 1;	// color_idx is in [1,14]
 8009244:	f000 fc3c 	bl	8009ac0 <rand>
 8009248:	4601      	mov	r1, r0
 800924a:	4b44      	ldr	r3, [pc, #272]	; (800935c <generate_bean+0x12c>)
 800924c:	fb83 2301 	smull	r2, r3, r3, r1
 8009250:	109a      	asrs	r2, r3, #2
 8009252:	17cb      	asrs	r3, r1, #31
 8009254:	1ad2      	subs	r2, r2, r3
 8009256:	4613      	mov	r3, r2
 8009258:	005b      	lsls	r3, r3, #1
 800925a:	4413      	add	r3, r2
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	4413      	add	r3, r2
 8009260:	1aca      	subs	r2, r1, r3
 8009262:	b2d3      	uxtb	r3, r2
 8009264:	3301      	adds	r3, #1
 8009266:	70fb      	strb	r3, [r7, #3]
	switch (color_idx) {
 8009268:	78fb      	ldrb	r3, [r7, #3]
 800926a:	3b01      	subs	r3, #1
 800926c:	2b0c      	cmp	r3, #12
 800926e:	d869      	bhi.n	8009344 <generate_bean+0x114>
 8009270:	a201      	add	r2, pc, #4	; (adr r2, 8009278 <generate_bean+0x48>)
 8009272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009276:	bf00      	nop
 8009278:	080092ad 	.word	0x080092ad
 800927c:	080092b9 	.word	0x080092b9
 8009280:	080092c3 	.word	0x080092c3
 8009284:	080092cd 	.word	0x080092cd
 8009288:	080092d9 	.word	0x080092d9
 800928c:	080092e5 	.word	0x080092e5
 8009290:	080092f1 	.word	0x080092f1
 8009294:	080092fd 	.word	0x080092fd
 8009298:	08009309 	.word	0x08009309
 800929c:	08009315 	.word	0x08009315
 80092a0:	08009321 	.word	0x08009321
 80092a4:	0800932d 	.word	0x0800932d
 80092a8:	08009339 	.word	0x08009339
	case 1:
		b->color = WHITE;
 80092ac:	4b2a      	ldr	r3, [pc, #168]	; (8009358 <generate_bean+0x128>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80092b4:	801a      	strh	r2, [r3, #0]
		break;
 80092b6:	e046      	b.n	8009346 <generate_bean+0x116>
	case 2:
		b->color = BLACK;
 80092b8:	4b27      	ldr	r3, [pc, #156]	; (8009358 <generate_bean+0x128>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2200      	movs	r2, #0
 80092be:	801a      	strh	r2, [r3, #0]
		break;
 80092c0:	e041      	b.n	8009346 <generate_bean+0x116>
	case 3:
		b->color = BLUE;
 80092c2:	4b25      	ldr	r3, [pc, #148]	; (8009358 <generate_bean+0x128>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	221f      	movs	r2, #31
 80092c8:	801a      	strh	r2, [r3, #0]
		break;
 80092ca:	e03c      	b.n	8009346 <generate_bean+0x116>
	case 4:
		b->color = BRED;
 80092cc:	4b22      	ldr	r3, [pc, #136]	; (8009358 <generate_bean+0x128>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80092d4:	801a      	strh	r2, [r3, #0]
		break;
 80092d6:	e036      	b.n	8009346 <generate_bean+0x116>
	case 5:
		b->color = GRED;
 80092d8:	4b1f      	ldr	r3, [pc, #124]	; (8009358 <generate_bean+0x128>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80092e0:	801a      	strh	r2, [r3, #0]
		break;
 80092e2:	e030      	b.n	8009346 <generate_bean+0x116>
	case 6:
		b->color = GBLUE;
 80092e4:	4b1c      	ldr	r3, [pc, #112]	; (8009358 <generate_bean+0x128>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80092ec:	801a      	strh	r2, [r3, #0]
		break;
 80092ee:	e02a      	b.n	8009346 <generate_bean+0x116>
	case 7:
		b->color = RED;
 80092f0:	4b19      	ldr	r3, [pc, #100]	; (8009358 <generate_bean+0x128>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80092f8:	801a      	strh	r2, [r3, #0]
		break;
 80092fa:	e024      	b.n	8009346 <generate_bean+0x116>
	case 8:
		b->color = MAGENTA;
 80092fc:	4b16      	ldr	r3, [pc, #88]	; (8009358 <generate_bean+0x128>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8009304:	801a      	strh	r2, [r3, #0]
		break;
 8009306:	e01e      	b.n	8009346 <generate_bean+0x116>
	case 9:
		b->color = CYAN;
 8009308:	4b13      	ldr	r3, [pc, #76]	; (8009358 <generate_bean+0x128>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009310:	801a      	strh	r2, [r3, #0]
		break;
 8009312:	e018      	b.n	8009346 <generate_bean+0x116>
	case 10:
		b->color = YELLOW;
 8009314:	4b10      	ldr	r3, [pc, #64]	; (8009358 <generate_bean+0x128>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800931c:	801a      	strh	r2, [r3, #0]
		break;
 800931e:	e012      	b.n	8009346 <generate_bean+0x116>
	case 11:
		b->color = BROWN;
 8009320:	4b0d      	ldr	r3, [pc, #52]	; (8009358 <generate_bean+0x128>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f64b 4240 	movw	r2, #48192	; 0xbc40
 8009328:	801a      	strh	r2, [r3, #0]
		break;
 800932a:	e00c      	b.n	8009346 <generate_bean+0x116>
	case 12:
		b->color = BRRED;
 800932c:	4b0a      	ldr	r3, [pc, #40]	; (8009358 <generate_bean+0x128>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f64f 4207 	movw	r2, #64519	; 0xfc07
 8009334:	801a      	strh	r2, [r3, #0]
		break;
 8009336:	e006      	b.n	8009346 <generate_bean+0x116>
	case 13:
		b->color = GRAY;
 8009338:	4b07      	ldr	r3, [pc, #28]	; (8009358 <generate_bean+0x128>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f248 4230 	movw	r2, #33840	; 0x8430
 8009340:	801a      	strh	r2, [r3, #0]
		break;
 8009342:	e000      	b.n	8009346 <generate_bean+0x116>
	default:
		break;
 8009344:	bf00      	nop
	}
	time_bean = milisecond;
 8009346:	4b06      	ldr	r3, [pc, #24]	; (8009360 <generate_bean+0x130>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	461a      	mov	r2, r3
 800934c:	4b05      	ldr	r3, [pc, #20]	; (8009364 <generate_bean+0x134>)
 800934e:	601a      	str	r2, [r3, #0]
}
 8009350:	bf00      	nop
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	20000e28 	.word	0x20000e28
 800935c:	4ec4ec4f 	.word	0x4ec4ec4f
 8009360:	20000df4 	.word	0x20000df4
 8009364:	20000e40 	.word	0x20000e40

08009368 <draw_background>:
	}

}

/* Draw the back ground */
void draw_background() {
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af02      	add	r7, sp, #8
	LCD_Clear(0X2722);
 800936e:	f242 7022 	movw	r0, #10018	; 0x2722
 8009372:	f7ff faef 	bl	8008954 <LCD_Clear>
	BACK_COLOR = LIGHTBLUE;
 8009376:	4b0e      	ldr	r3, [pc, #56]	; (80093b0 <draw_background+0x48>)
 8009378:	f647 527c 	movw	r2, #32124	; 0x7d7c
 800937c:	801a      	strh	r2, [r3, #0]
	LCD_Fill(0, 280, 240, 320, LIGHTBLUE);
 800937e:	f647 537c 	movw	r3, #32124	; 0x7d7c
 8009382:	9300      	str	r3, [sp, #0]
 8009384:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8009388:	22f0      	movs	r2, #240	; 0xf0
 800938a:	f44f 718c 	mov.w	r1, #280	; 0x118
 800938e:	2000      	movs	r0, #0
 8009390:	f7ff fb42 	bl	8008a18 <LCD_Fill>

	POINT_COLOR = BLACK;
 8009394:	4b07      	ldr	r3, [pc, #28]	; (80093b4 <draw_background+0x4c>)
 8009396:	2200      	movs	r2, #0
 8009398:	801a      	strh	r2, [r3, #0]
	LCD_DrawRectangle(0, 320, 240, 280);
 800939a:	f44f 738c 	mov.w	r3, #280	; 0x118
 800939e:	22f0      	movs	r2, #240	; 0xf0
 80093a0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80093a4:	2000      	movs	r0, #0
 80093a6:	f7ff fc46 	bl	8008c36 <LCD_DrawRectangle>
}
 80093aa:	bf00      	nop
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	2000000c 	.word	0x2000000c
 80093b4:	20000dec 	.word	0x20000dec

080093b8 <draw_score>:

/* Draw the score */
void draw_score() {
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af02      	add	r7, sp, #8
	char num[8];
	char *content = "SCORE: ";
 80093be:	4b13      	ldr	r3, [pc, #76]	; (800940c <draw_score+0x54>)
 80093c0:	60fb      	str	r3, [r7, #12]
	itoa(score, num, 10);
 80093c2:	4b13      	ldr	r3, [pc, #76]	; (8009410 <draw_score+0x58>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	1d39      	adds	r1, r7, #4
 80093c8:	220a      	movs	r2, #10
 80093ca:	4618      	mov	r0, r3
 80093cc:	f000 fa90 	bl	80098f0 <itoa>
	POINT_COLOR = RED;
 80093d0:	4b10      	ldr	r3, [pc, #64]	; (8009414 <draw_score+0x5c>)
 80093d2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80093d6:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(20, 290, 200, 30, 24, (uint8_t*) content);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	9301      	str	r3, [sp, #4]
 80093dc:	2318      	movs	r3, #24
 80093de:	9300      	str	r3, [sp, #0]
 80093e0:	231e      	movs	r3, #30
 80093e2:	22c8      	movs	r2, #200	; 0xc8
 80093e4:	f44f 7191 	mov.w	r1, #290	; 0x122
 80093e8:	2014      	movs	r0, #20
 80093ea:	f7ff fcfd 	bl	8008de8 <LCD_ShowString>
	LCD_ShowString(120, 290, 200, 30, 24, (uint8_t*) num);
 80093ee:	1d3b      	adds	r3, r7, #4
 80093f0:	9301      	str	r3, [sp, #4]
 80093f2:	2318      	movs	r3, #24
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	231e      	movs	r3, #30
 80093f8:	22c8      	movs	r2, #200	; 0xc8
 80093fa:	f44f 7191 	mov.w	r1, #290	; 0x122
 80093fe:	2078      	movs	r0, #120	; 0x78
 8009400:	f7ff fcf2 	bl	8008de8 <LCD_ShowString>
}
 8009404:	bf00      	nop
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	0800a300 	.word	0x0800a300
 8009410:	20000df0 	.word	0x20000df0
 8009414:	20000dec 	.word	0x20000dec

08009418 <draw_snake_body>:

/* Draw one grid of snake body */
void draw_snake_body(occupied_grid *og) {
 8009418:	b590      	push	{r4, r7, lr}
 800941a:	b085      	sub	sp, #20
 800941c:	af02      	add	r7, sp, #8
 800941e:	6078      	str	r0, [r7, #4]
	POINT_COLOR = snk->color;
 8009420:	4b1a      	ldr	r3, [pc, #104]	; (800948c <draw_snake_body+0x74>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	899a      	ldrh	r2, [r3, #12]
 8009426:	4b1a      	ldr	r3, [pc, #104]	; (8009490 <draw_snake_body+0x78>)
 8009428:	801a      	strh	r2, [r3, #0]
	LCD_Fill(10 * (og->pos->x), 10 * (og->pos->y), 10 * (og->pos->x) + 10,
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	b29b      	uxth	r3, r3
 8009432:	461a      	mov	r2, r3
 8009434:	0092      	lsls	r2, r2, #2
 8009436:	4413      	add	r3, r2
 8009438:	005b      	lsls	r3, r3, #1
 800943a:	b298      	uxth	r0, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	b29b      	uxth	r3, r3
 8009444:	461a      	mov	r2, r3
 8009446:	0092      	lsls	r2, r2, #2
 8009448:	4413      	add	r3, r2
 800944a:	005b      	lsls	r3, r3, #1
 800944c:	b299      	uxth	r1, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	3301      	adds	r3, #1
 8009456:	b29b      	uxth	r3, r3
 8009458:	461a      	mov	r2, r3
 800945a:	0092      	lsls	r2, r2, #2
 800945c:	4413      	add	r3, r2
 800945e:	005b      	lsls	r3, r3, #1
 8009460:	b29a      	uxth	r2, r3
			10 * (og->pos->y) + 10, POINT_COLOR);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	3301      	adds	r3, #1
	LCD_Fill(10 * (og->pos->x), 10 * (og->pos->y), 10 * (og->pos->x) + 10,
 800946a:	b29b      	uxth	r3, r3
 800946c:	461c      	mov	r4, r3
 800946e:	00a4      	lsls	r4, r4, #2
 8009470:	4423      	add	r3, r4
 8009472:	005b      	lsls	r3, r3, #1
 8009474:	b29c      	uxth	r4, r3
 8009476:	4b06      	ldr	r3, [pc, #24]	; (8009490 <draw_snake_body+0x78>)
 8009478:	881b      	ldrh	r3, [r3, #0]
 800947a:	9300      	str	r3, [sp, #0]
 800947c:	4623      	mov	r3, r4
 800947e:	f7ff facb 	bl	8008a18 <LCD_Fill>
}
 8009482:	bf00      	nop
 8009484:	370c      	adds	r7, #12
 8009486:	46bd      	mov	sp, r7
 8009488:	bd90      	pop	{r4, r7, pc}
 800948a:	bf00      	nop
 800948c:	20000e2c 	.word	0x20000e2c
 8009490:	20000dec 	.word	0x20000dec

08009494 <draw_snake>:
;

/* Draw the snake */
void draw_snake() {
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
	occupied_grid *tmp = snk->head;
 800949a:	4b0c      	ldr	r3, [pc, #48]	; (80094cc <draw_snake+0x38>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	607b      	str	r3, [r7, #4]
	score = 3;
 80094a2:	4b0b      	ldr	r3, [pc, #44]	; (80094d0 <draw_snake+0x3c>)
 80094a4:	2203      	movs	r2, #3
 80094a6:	601a      	str	r2, [r3, #0]
	draw_score();
 80094a8:	f7ff ff86 	bl	80093b8 <draw_score>
	while (tmp->next != NULL) {
 80094ac:	e005      	b.n	80094ba <draw_snake+0x26>
		draw_snake_body(tmp);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f7ff ffb2 	bl	8009418 <draw_snake_body>
		tmp = tmp->next;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	607b      	str	r3, [r7, #4]
	while (tmp->next != NULL) {
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d1f5      	bne.n	80094ae <draw_snake+0x1a>
	}
}
 80094c2:	bf00      	nop
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	20000e2c 	.word	0x20000e2c
 80094d0:	20000df0 	.word	0x20000df0

080094d4 <launch>:
	LCD_DrawRectangle(10 * (stone->x), 10 * (stone->y), 10 * (stone->x) + 10,
			10 * (stone->y) + 10);
}

/* Launch game */
void launch() {
 80094d4:	b580      	push	{r7, lr}
 80094d6:	af00      	add	r7, sp, #0
	// TODO: Need to be implemented.
	draw_background();
 80094d8:	f7ff ff46 	bl	8009368 <draw_background>
	score = 1;
 80094dc:	4b0b      	ldr	r3, [pc, #44]	; (800950c <launch+0x38>)
 80094de:	2201      	movs	r2, #1
 80094e0:	601a      	str	r2, [r3, #0]
	draw_score();
 80094e2:	f7ff ff69 	bl	80093b8 <draw_score>

	snake_init(3, WHITE);
 80094e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80094ea:	2003      	movs	r0, #3
 80094ec:	f7ff fd38 	bl	8008f60 <snake_init>
	draw_snake();
 80094f0:	f7ff ffd0 	bl	8009494 <draw_snake>
	score = 2;
 80094f4:	4b05      	ldr	r3, [pc, #20]	; (800950c <launch+0x38>)
 80094f6:	2202      	movs	r2, #2
 80094f8:	601a      	str	r2, [r3, #0]
draw_score();
 80094fa:	f7ff ff5d 	bl	80093b8 <draw_score>

	generate_bean();
 80094fe:	f7ff fe97 	bl	8009230 <generate_bean>
//		}
//		draw_stone();
//
//		move();
//	}
	red_blink = 1;
 8009502:	4b03      	ldr	r3, [pc, #12]	; (8009510 <launch+0x3c>)
 8009504:	2201      	movs	r2, #1
 8009506:	601a      	str	r2, [r3, #0]
}
 8009508:	bf00      	nop
 800950a:	bd80      	pop	{r7, pc}
 800950c:	20000df0 	.word	0x20000df0
 8009510:	20000df8 	.word	0x20000df8

08009514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800951a:	4b18      	ldr	r3, [pc, #96]	; (800957c <HAL_MspInit+0x68>)
 800951c:	699b      	ldr	r3, [r3, #24]
 800951e:	4a17      	ldr	r2, [pc, #92]	; (800957c <HAL_MspInit+0x68>)
 8009520:	f043 0301 	orr.w	r3, r3, #1
 8009524:	6193      	str	r3, [r2, #24]
 8009526:	4b15      	ldr	r3, [pc, #84]	; (800957c <HAL_MspInit+0x68>)
 8009528:	699b      	ldr	r3, [r3, #24]
 800952a:	f003 0301 	and.w	r3, r3, #1
 800952e:	60bb      	str	r3, [r7, #8]
 8009530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009532:	4b12      	ldr	r3, [pc, #72]	; (800957c <HAL_MspInit+0x68>)
 8009534:	69db      	ldr	r3, [r3, #28]
 8009536:	4a11      	ldr	r2, [pc, #68]	; (800957c <HAL_MspInit+0x68>)
 8009538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800953c:	61d3      	str	r3, [r2, #28]
 800953e:	4b0f      	ldr	r3, [pc, #60]	; (800957c <HAL_MspInit+0x68>)
 8009540:	69db      	ldr	r3, [r3, #28]
 8009542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009546:	607b      	str	r3, [r7, #4]
 8009548:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800954a:	2200      	movs	r2, #0
 800954c:	210f      	movs	r1, #15
 800954e:	f06f 0001 	mvn.w	r0, #1
 8009552:	f7f7 fb6c 	bl	8000c2e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8009556:	4b0a      	ldr	r3, [pc, #40]	; (8009580 <HAL_MspInit+0x6c>)
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	60fb      	str	r3, [r7, #12]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8009562:	60fb      	str	r3, [r7, #12]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800956a:	60fb      	str	r3, [r7, #12]
 800956c:	4a04      	ldr	r2, [pc, #16]	; (8009580 <HAL_MspInit+0x6c>)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009572:	bf00      	nop
 8009574:	3710      	adds	r7, #16
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	40021000 	.word	0x40021000
 8009580:	40010000 	.word	0x40010000

08009584 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b08c      	sub	sp, #48	; 0x30
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800958c:	2300      	movs	r3, #0
 800958e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8009590:	2300      	movs	r3, #0
 8009592:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8009594:	2200      	movs	r2, #0
 8009596:	6879      	ldr	r1, [r7, #4]
 8009598:	201d      	movs	r0, #29
 800959a:	f7f7 fb48 	bl	8000c2e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 800959e:	201d      	movs	r0, #29
 80095a0:	f7f7 fb61 	bl	8000c66 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80095a4:	4b1f      	ldr	r3, [pc, #124]	; (8009624 <HAL_InitTick+0xa0>)
 80095a6:	69db      	ldr	r3, [r3, #28]
 80095a8:	4a1e      	ldr	r2, [pc, #120]	; (8009624 <HAL_InitTick+0xa0>)
 80095aa:	f043 0302 	orr.w	r3, r3, #2
 80095ae:	61d3      	str	r3, [r2, #28]
 80095b0:	4b1c      	ldr	r3, [pc, #112]	; (8009624 <HAL_InitTick+0xa0>)
 80095b2:	69db      	ldr	r3, [r3, #28]
 80095b4:	f003 0302 	and.w	r3, r3, #2
 80095b8:	60fb      	str	r3, [r7, #12]
 80095ba:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80095bc:	f107 0210 	add.w	r2, r7, #16
 80095c0:	f107 0314 	add.w	r3, r7, #20
 80095c4:	4611      	mov	r1, r2
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7f8 f8f4 	bl	80017b4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80095cc:	f7f8 f8ca 	bl	8001764 <HAL_RCC_GetPCLK1Freq>
 80095d0:	4603      	mov	r3, r0
 80095d2:	005b      	lsls	r3, r3, #1
 80095d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80095d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d8:	4a13      	ldr	r2, [pc, #76]	; (8009628 <HAL_InitTick+0xa4>)
 80095da:	fba2 2303 	umull	r2, r3, r2, r3
 80095de:	0c9b      	lsrs	r3, r3, #18
 80095e0:	3b01      	subs	r3, #1
 80095e2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80095e4:	4b11      	ldr	r3, [pc, #68]	; (800962c <HAL_InitTick+0xa8>)
 80095e6:	4a12      	ldr	r2, [pc, #72]	; (8009630 <HAL_InitTick+0xac>)
 80095e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 80095ea:	4b10      	ldr	r3, [pc, #64]	; (800962c <HAL_InitTick+0xa8>)
 80095ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80095f0:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80095f2:	4a0e      	ldr	r2, [pc, #56]	; (800962c <HAL_InitTick+0xa8>)
 80095f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f6:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80095f8:	4b0c      	ldr	r3, [pc, #48]	; (800962c <HAL_InitTick+0xa8>)
 80095fa:	2200      	movs	r2, #0
 80095fc:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80095fe:	4b0b      	ldr	r3, [pc, #44]	; (800962c <HAL_InitTick+0xa8>)
 8009600:	2200      	movs	r2, #0
 8009602:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8009604:	4809      	ldr	r0, [pc, #36]	; (800962c <HAL_InitTick+0xa8>)
 8009606:	f7f8 f923 	bl	8001850 <HAL_TIM_Base_Init>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d104      	bne.n	800961a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8009610:	4806      	ldr	r0, [pc, #24]	; (800962c <HAL_InitTick+0xa8>)
 8009612:	f7f8 f951 	bl	80018b8 <HAL_TIM_Base_Start_IT>
 8009616:	4603      	mov	r3, r0
 8009618:	e000      	b.n	800961c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800961a:	2301      	movs	r3, #1
}
 800961c:	4618      	mov	r0, r3
 800961e:	3730      	adds	r7, #48	; 0x30
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	40021000 	.word	0x40021000
 8009628:	431bde83 	.word	0x431bde83
 800962c:	20000e44 	.word	0x20000e44
 8009630:	40000400 	.word	0x40000400

08009634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009634:	b480      	push	{r7}
 8009636:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009638:	bf00      	nop
 800963a:	46bd      	mov	sp, r7
 800963c:	bc80      	pop	{r7}
 800963e:	4770      	bx	lr

08009640 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009640:	b480      	push	{r7}
 8009642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009644:	e7fe      	b.n	8009644 <HardFault_Handler+0x4>

08009646 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009646:	b480      	push	{r7}
 8009648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800964a:	e7fe      	b.n	800964a <MemManage_Handler+0x4>

0800964c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800964c:	b480      	push	{r7}
 800964e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009650:	e7fe      	b.n	8009650 <BusFault_Handler+0x4>

08009652 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009652:	b480      	push	{r7}
 8009654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009656:	e7fe      	b.n	8009656 <UsageFault_Handler+0x4>

08009658 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009658:	b480      	push	{r7}
 800965a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800965c:	bf00      	nop
 800965e:	46bd      	mov	sp, r7
 8009660:	bc80      	pop	{r7}
 8009662:	4770      	bx	lr

08009664 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8009668:	4802      	ldr	r0, [pc, #8]	; (8009674 <TIM3_IRQHandler+0x10>)
 800966a:	f7f8 f948 	bl	80018fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800966e:	bf00      	nop
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	20000e44 	.word	0x20000e44

08009678 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009680:	4b11      	ldr	r3, [pc, #68]	; (80096c8 <_sbrk+0x50>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d102      	bne.n	800968e <_sbrk+0x16>
		heap_end = &end;
 8009688:	4b0f      	ldr	r3, [pc, #60]	; (80096c8 <_sbrk+0x50>)
 800968a:	4a10      	ldr	r2, [pc, #64]	; (80096cc <_sbrk+0x54>)
 800968c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800968e:	4b0e      	ldr	r3, [pc, #56]	; (80096c8 <_sbrk+0x50>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009694:	4b0c      	ldr	r3, [pc, #48]	; (80096c8 <_sbrk+0x50>)
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4413      	add	r3, r2
 800969c:	466a      	mov	r2, sp
 800969e:	4293      	cmp	r3, r2
 80096a0:	d907      	bls.n	80096b2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80096a2:	f000 f8e3 	bl	800986c <__errno>
 80096a6:	4602      	mov	r2, r0
 80096a8:	230c      	movs	r3, #12
 80096aa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80096ac:	f04f 33ff 	mov.w	r3, #4294967295
 80096b0:	e006      	b.n	80096c0 <_sbrk+0x48>
	}

	heap_end += incr;
 80096b2:	4b05      	ldr	r3, [pc, #20]	; (80096c8 <_sbrk+0x50>)
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4413      	add	r3, r2
 80096ba:	4a03      	ldr	r2, [pc, #12]	; (80096c8 <_sbrk+0x50>)
 80096bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80096be:	68fb      	ldr	r3, [r7, #12]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	20000dfc 	.word	0x20000dfc
 80096cc:	20000ec8 	.word	0x20000ec8

080096d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80096d0:	b480      	push	{r7}
 80096d2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80096d4:	4b15      	ldr	r3, [pc, #84]	; (800972c <SystemInit+0x5c>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a14      	ldr	r2, [pc, #80]	; (800972c <SystemInit+0x5c>)
 80096da:	f043 0301 	orr.w	r3, r3, #1
 80096de:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80096e0:	4b12      	ldr	r3, [pc, #72]	; (800972c <SystemInit+0x5c>)
 80096e2:	685a      	ldr	r2, [r3, #4]
 80096e4:	4911      	ldr	r1, [pc, #68]	; (800972c <SystemInit+0x5c>)
 80096e6:	4b12      	ldr	r3, [pc, #72]	; (8009730 <SystemInit+0x60>)
 80096e8:	4013      	ands	r3, r2
 80096ea:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80096ec:	4b0f      	ldr	r3, [pc, #60]	; (800972c <SystemInit+0x5c>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a0e      	ldr	r2, [pc, #56]	; (800972c <SystemInit+0x5c>)
 80096f2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80096f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096fa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80096fc:	4b0b      	ldr	r3, [pc, #44]	; (800972c <SystemInit+0x5c>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a0a      	ldr	r2, [pc, #40]	; (800972c <SystemInit+0x5c>)
 8009702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009706:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8009708:	4b08      	ldr	r3, [pc, #32]	; (800972c <SystemInit+0x5c>)
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	4a07      	ldr	r2, [pc, #28]	; (800972c <SystemInit+0x5c>)
 800970e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8009712:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8009714:	4b05      	ldr	r3, [pc, #20]	; (800972c <SystemInit+0x5c>)
 8009716:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800971a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800971c:	4b05      	ldr	r3, [pc, #20]	; (8009734 <SystemInit+0x64>)
 800971e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009722:	609a      	str	r2, [r3, #8]
#endif 
}
 8009724:	bf00      	nop
 8009726:	46bd      	mov	sp, r7
 8009728:	bc80      	pop	{r7}
 800972a:	4770      	bx	lr
 800972c:	40021000 	.word	0x40021000
 8009730:	f8ff0000 	.word	0xf8ff0000
 8009734:	e000ed00 	.word	0xe000ed00

08009738 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800973c:	4b11      	ldr	r3, [pc, #68]	; (8009784 <MX_USART2_UART_Init+0x4c>)
 800973e:	4a12      	ldr	r2, [pc, #72]	; (8009788 <MX_USART2_UART_Init+0x50>)
 8009740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009742:	4b10      	ldr	r3, [pc, #64]	; (8009784 <MX_USART2_UART_Init+0x4c>)
 8009744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800974a:	4b0e      	ldr	r3, [pc, #56]	; (8009784 <MX_USART2_UART_Init+0x4c>)
 800974c:	2200      	movs	r2, #0
 800974e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009750:	4b0c      	ldr	r3, [pc, #48]	; (8009784 <MX_USART2_UART_Init+0x4c>)
 8009752:	2200      	movs	r2, #0
 8009754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009756:	4b0b      	ldr	r3, [pc, #44]	; (8009784 <MX_USART2_UART_Init+0x4c>)
 8009758:	2200      	movs	r2, #0
 800975a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800975c:	4b09      	ldr	r3, [pc, #36]	; (8009784 <MX_USART2_UART_Init+0x4c>)
 800975e:	220c      	movs	r2, #12
 8009760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009762:	4b08      	ldr	r3, [pc, #32]	; (8009784 <MX_USART2_UART_Init+0x4c>)
 8009764:	2200      	movs	r2, #0
 8009766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009768:	4b06      	ldr	r3, [pc, #24]	; (8009784 <MX_USART2_UART_Init+0x4c>)
 800976a:	2200      	movs	r2, #0
 800976c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800976e:	4805      	ldr	r0, [pc, #20]	; (8009784 <MX_USART2_UART_Init+0x4c>)
 8009770:	f7f8 fa7e 	bl	8001c70 <HAL_UART_Init>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d001      	beq.n	800977e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800977a:	f7ff fbeb 	bl	8008f54 <Error_Handler>
  }

}
 800977e:	bf00      	nop
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	20000e84 	.word	0x20000e84
 8009788:	40004400 	.word	0x40004400

0800978c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b088      	sub	sp, #32
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009794:	f107 0310 	add.w	r3, r7, #16
 8009798:	2200      	movs	r2, #0
 800979a:	601a      	str	r2, [r3, #0]
 800979c:	605a      	str	r2, [r3, #4]
 800979e:	609a      	str	r2, [r3, #8]
 80097a0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a1b      	ldr	r2, [pc, #108]	; (8009814 <HAL_UART_MspInit+0x88>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d12f      	bne.n	800980c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80097ac:	4b1a      	ldr	r3, [pc, #104]	; (8009818 <HAL_UART_MspInit+0x8c>)
 80097ae:	69db      	ldr	r3, [r3, #28]
 80097b0:	4a19      	ldr	r2, [pc, #100]	; (8009818 <HAL_UART_MspInit+0x8c>)
 80097b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097b6:	61d3      	str	r3, [r2, #28]
 80097b8:	4b17      	ldr	r3, [pc, #92]	; (8009818 <HAL_UART_MspInit+0x8c>)
 80097ba:	69db      	ldr	r3, [r3, #28]
 80097bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097c0:	60fb      	str	r3, [r7, #12]
 80097c2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097c4:	4b14      	ldr	r3, [pc, #80]	; (8009818 <HAL_UART_MspInit+0x8c>)
 80097c6:	699b      	ldr	r3, [r3, #24]
 80097c8:	4a13      	ldr	r2, [pc, #76]	; (8009818 <HAL_UART_MspInit+0x8c>)
 80097ca:	f043 0304 	orr.w	r3, r3, #4
 80097ce:	6193      	str	r3, [r2, #24]
 80097d0:	4b11      	ldr	r3, [pc, #68]	; (8009818 <HAL_UART_MspInit+0x8c>)
 80097d2:	699b      	ldr	r3, [r3, #24]
 80097d4:	f003 0304 	and.w	r3, r3, #4
 80097d8:	60bb      	str	r3, [r7, #8]
 80097da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80097dc:	2304      	movs	r3, #4
 80097de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097e0:	2302      	movs	r3, #2
 80097e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80097e4:	2303      	movs	r3, #3
 80097e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097e8:	f107 0310 	add.w	r3, r7, #16
 80097ec:	4619      	mov	r1, r3
 80097ee:	480b      	ldr	r0, [pc, #44]	; (800981c <HAL_UART_MspInit+0x90>)
 80097f0:	f7f7 fa48 	bl	8000c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80097f4:	2308      	movs	r3, #8
 80097f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80097f8:	2300      	movs	r3, #0
 80097fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097fc:	2300      	movs	r3, #0
 80097fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009800:	f107 0310 	add.w	r3, r7, #16
 8009804:	4619      	mov	r1, r3
 8009806:	4805      	ldr	r0, [pc, #20]	; (800981c <HAL_UART_MspInit+0x90>)
 8009808:	f7f7 fa3c 	bl	8000c84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800980c:	bf00      	nop
 800980e:	3720      	adds	r7, #32
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	40004400 	.word	0x40004400
 8009818:	40021000 	.word	0x40021000
 800981c:	40010800 	.word	0x40010800

08009820 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8009820:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8009822:	e003      	b.n	800982c <LoopCopyDataInit>

08009824 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8009824:	4b0b      	ldr	r3, [pc, #44]	; (8009854 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8009826:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8009828:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800982a:	3104      	adds	r1, #4

0800982c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800982c:	480a      	ldr	r0, [pc, #40]	; (8009858 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800982e:	4b0b      	ldr	r3, [pc, #44]	; (800985c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8009830:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8009832:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8009834:	d3f6      	bcc.n	8009824 <CopyDataInit>
  ldr r2, =_sbss
 8009836:	4a0a      	ldr	r2, [pc, #40]	; (8009860 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8009838:	e002      	b.n	8009840 <LoopFillZerobss>

0800983a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800983a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800983c:	f842 3b04 	str.w	r3, [r2], #4

08009840 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8009840:	4b08      	ldr	r3, [pc, #32]	; (8009864 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8009842:	429a      	cmp	r2, r3
  bcc FillZerobss
 8009844:	d3f9      	bcc.n	800983a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009846:	f7ff ff43 	bl	80096d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800984a:	f000 f815 	bl	8009878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800984e:	f7ff fb19 	bl	8008e84 <main>
  bx lr
 8009852:	4770      	bx	lr
  ldr r3, =_sidata
 8009854:	0800bb40 	.word	0x0800bb40
  ldr r0, =_sdata
 8009858:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800985c:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8009860:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8009864:	20000ec8 	.word	0x20000ec8

08009868 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009868:	e7fe      	b.n	8009868 <ADC1_2_IRQHandler>
	...

0800986c <__errno>:
 800986c:	4b01      	ldr	r3, [pc, #4]	; (8009874 <__errno+0x8>)
 800986e:	6818      	ldr	r0, [r3, #0]
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	20000014 	.word	0x20000014

08009878 <__libc_init_array>:
 8009878:	b570      	push	{r4, r5, r6, lr}
 800987a:	2500      	movs	r5, #0
 800987c:	4e0c      	ldr	r6, [pc, #48]	; (80098b0 <__libc_init_array+0x38>)
 800987e:	4c0d      	ldr	r4, [pc, #52]	; (80098b4 <__libc_init_array+0x3c>)
 8009880:	1ba4      	subs	r4, r4, r6
 8009882:	10a4      	asrs	r4, r4, #2
 8009884:	42a5      	cmp	r5, r4
 8009886:	d109      	bne.n	800989c <__libc_init_array+0x24>
 8009888:	f000 fcee 	bl	800a268 <_init>
 800988c:	2500      	movs	r5, #0
 800988e:	4e0a      	ldr	r6, [pc, #40]	; (80098b8 <__libc_init_array+0x40>)
 8009890:	4c0a      	ldr	r4, [pc, #40]	; (80098bc <__libc_init_array+0x44>)
 8009892:	1ba4      	subs	r4, r4, r6
 8009894:	10a4      	asrs	r4, r4, #2
 8009896:	42a5      	cmp	r5, r4
 8009898:	d105      	bne.n	80098a6 <__libc_init_array+0x2e>
 800989a:	bd70      	pop	{r4, r5, r6, pc}
 800989c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80098a0:	4798      	blx	r3
 80098a2:	3501      	adds	r5, #1
 80098a4:	e7ee      	b.n	8009884 <__libc_init_array+0xc>
 80098a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80098aa:	4798      	blx	r3
 80098ac:	3501      	adds	r5, #1
 80098ae:	e7f2      	b.n	8009896 <__libc_init_array+0x1e>
 80098b0:	0800bb38 	.word	0x0800bb38
 80098b4:	0800bb38 	.word	0x0800bb38
 80098b8:	0800bb38 	.word	0x0800bb38
 80098bc:	0800bb3c 	.word	0x0800bb3c

080098c0 <__itoa>:
 80098c0:	1e93      	subs	r3, r2, #2
 80098c2:	2b22      	cmp	r3, #34	; 0x22
 80098c4:	b510      	push	{r4, lr}
 80098c6:	460c      	mov	r4, r1
 80098c8:	d904      	bls.n	80098d4 <__itoa+0x14>
 80098ca:	2300      	movs	r3, #0
 80098cc:	461c      	mov	r4, r3
 80098ce:	700b      	strb	r3, [r1, #0]
 80098d0:	4620      	mov	r0, r4
 80098d2:	bd10      	pop	{r4, pc}
 80098d4:	2a0a      	cmp	r2, #10
 80098d6:	d109      	bne.n	80098ec <__itoa+0x2c>
 80098d8:	2800      	cmp	r0, #0
 80098da:	da07      	bge.n	80098ec <__itoa+0x2c>
 80098dc:	232d      	movs	r3, #45	; 0x2d
 80098de:	700b      	strb	r3, [r1, #0]
 80098e0:	2101      	movs	r1, #1
 80098e2:	4240      	negs	r0, r0
 80098e4:	4421      	add	r1, r4
 80098e6:	f000 f94f 	bl	8009b88 <__utoa>
 80098ea:	e7f1      	b.n	80098d0 <__itoa+0x10>
 80098ec:	2100      	movs	r1, #0
 80098ee:	e7f9      	b.n	80098e4 <__itoa+0x24>

080098f0 <itoa>:
 80098f0:	f7ff bfe6 	b.w	80098c0 <__itoa>

080098f4 <malloc>:
 80098f4:	4b02      	ldr	r3, [pc, #8]	; (8009900 <malloc+0xc>)
 80098f6:	4601      	mov	r1, r0
 80098f8:	6818      	ldr	r0, [r3, #0]
 80098fa:	f000 b863 	b.w	80099c4 <_malloc_r>
 80098fe:	bf00      	nop
 8009900:	20000014 	.word	0x20000014

08009904 <memcpy>:
 8009904:	b510      	push	{r4, lr}
 8009906:	1e43      	subs	r3, r0, #1
 8009908:	440a      	add	r2, r1
 800990a:	4291      	cmp	r1, r2
 800990c:	d100      	bne.n	8009910 <memcpy+0xc>
 800990e:	bd10      	pop	{r4, pc}
 8009910:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009914:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009918:	e7f7      	b.n	800990a <memcpy+0x6>

0800991a <memset>:
 800991a:	4603      	mov	r3, r0
 800991c:	4402      	add	r2, r0
 800991e:	4293      	cmp	r3, r2
 8009920:	d100      	bne.n	8009924 <memset+0xa>
 8009922:	4770      	bx	lr
 8009924:	f803 1b01 	strb.w	r1, [r3], #1
 8009928:	e7f9      	b.n	800991e <memset+0x4>
	...

0800992c <_free_r>:
 800992c:	b538      	push	{r3, r4, r5, lr}
 800992e:	4605      	mov	r5, r0
 8009930:	2900      	cmp	r1, #0
 8009932:	d043      	beq.n	80099bc <_free_r+0x90>
 8009934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009938:	1f0c      	subs	r4, r1, #4
 800993a:	2b00      	cmp	r3, #0
 800993c:	bfb8      	it	lt
 800993e:	18e4      	addlt	r4, r4, r3
 8009940:	f000 f960 	bl	8009c04 <__malloc_lock>
 8009944:	4a1e      	ldr	r2, [pc, #120]	; (80099c0 <_free_r+0x94>)
 8009946:	6813      	ldr	r3, [r2, #0]
 8009948:	4610      	mov	r0, r2
 800994a:	b933      	cbnz	r3, 800995a <_free_r+0x2e>
 800994c:	6063      	str	r3, [r4, #4]
 800994e:	6014      	str	r4, [r2, #0]
 8009950:	4628      	mov	r0, r5
 8009952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009956:	f000 b956 	b.w	8009c06 <__malloc_unlock>
 800995a:	42a3      	cmp	r3, r4
 800995c:	d90b      	bls.n	8009976 <_free_r+0x4a>
 800995e:	6821      	ldr	r1, [r4, #0]
 8009960:	1862      	adds	r2, r4, r1
 8009962:	4293      	cmp	r3, r2
 8009964:	bf01      	itttt	eq
 8009966:	681a      	ldreq	r2, [r3, #0]
 8009968:	685b      	ldreq	r3, [r3, #4]
 800996a:	1852      	addeq	r2, r2, r1
 800996c:	6022      	streq	r2, [r4, #0]
 800996e:	6063      	str	r3, [r4, #4]
 8009970:	6004      	str	r4, [r0, #0]
 8009972:	e7ed      	b.n	8009950 <_free_r+0x24>
 8009974:	4613      	mov	r3, r2
 8009976:	685a      	ldr	r2, [r3, #4]
 8009978:	b10a      	cbz	r2, 800997e <_free_r+0x52>
 800997a:	42a2      	cmp	r2, r4
 800997c:	d9fa      	bls.n	8009974 <_free_r+0x48>
 800997e:	6819      	ldr	r1, [r3, #0]
 8009980:	1858      	adds	r0, r3, r1
 8009982:	42a0      	cmp	r0, r4
 8009984:	d10b      	bne.n	800999e <_free_r+0x72>
 8009986:	6820      	ldr	r0, [r4, #0]
 8009988:	4401      	add	r1, r0
 800998a:	1858      	adds	r0, r3, r1
 800998c:	4282      	cmp	r2, r0
 800998e:	6019      	str	r1, [r3, #0]
 8009990:	d1de      	bne.n	8009950 <_free_r+0x24>
 8009992:	6810      	ldr	r0, [r2, #0]
 8009994:	6852      	ldr	r2, [r2, #4]
 8009996:	4401      	add	r1, r0
 8009998:	6019      	str	r1, [r3, #0]
 800999a:	605a      	str	r2, [r3, #4]
 800999c:	e7d8      	b.n	8009950 <_free_r+0x24>
 800999e:	d902      	bls.n	80099a6 <_free_r+0x7a>
 80099a0:	230c      	movs	r3, #12
 80099a2:	602b      	str	r3, [r5, #0]
 80099a4:	e7d4      	b.n	8009950 <_free_r+0x24>
 80099a6:	6820      	ldr	r0, [r4, #0]
 80099a8:	1821      	adds	r1, r4, r0
 80099aa:	428a      	cmp	r2, r1
 80099ac:	bf01      	itttt	eq
 80099ae:	6811      	ldreq	r1, [r2, #0]
 80099b0:	6852      	ldreq	r2, [r2, #4]
 80099b2:	1809      	addeq	r1, r1, r0
 80099b4:	6021      	streq	r1, [r4, #0]
 80099b6:	6062      	str	r2, [r4, #4]
 80099b8:	605c      	str	r4, [r3, #4]
 80099ba:	e7c9      	b.n	8009950 <_free_r+0x24>
 80099bc:	bd38      	pop	{r3, r4, r5, pc}
 80099be:	bf00      	nop
 80099c0:	20000e00 	.word	0x20000e00

080099c4 <_malloc_r>:
 80099c4:	b570      	push	{r4, r5, r6, lr}
 80099c6:	1ccd      	adds	r5, r1, #3
 80099c8:	f025 0503 	bic.w	r5, r5, #3
 80099cc:	3508      	adds	r5, #8
 80099ce:	2d0c      	cmp	r5, #12
 80099d0:	bf38      	it	cc
 80099d2:	250c      	movcc	r5, #12
 80099d4:	2d00      	cmp	r5, #0
 80099d6:	4606      	mov	r6, r0
 80099d8:	db01      	blt.n	80099de <_malloc_r+0x1a>
 80099da:	42a9      	cmp	r1, r5
 80099dc:	d903      	bls.n	80099e6 <_malloc_r+0x22>
 80099de:	230c      	movs	r3, #12
 80099e0:	6033      	str	r3, [r6, #0]
 80099e2:	2000      	movs	r0, #0
 80099e4:	bd70      	pop	{r4, r5, r6, pc}
 80099e6:	f000 f90d 	bl	8009c04 <__malloc_lock>
 80099ea:	4a21      	ldr	r2, [pc, #132]	; (8009a70 <_malloc_r+0xac>)
 80099ec:	6814      	ldr	r4, [r2, #0]
 80099ee:	4621      	mov	r1, r4
 80099f0:	b991      	cbnz	r1, 8009a18 <_malloc_r+0x54>
 80099f2:	4c20      	ldr	r4, [pc, #128]	; (8009a74 <_malloc_r+0xb0>)
 80099f4:	6823      	ldr	r3, [r4, #0]
 80099f6:	b91b      	cbnz	r3, 8009a00 <_malloc_r+0x3c>
 80099f8:	4630      	mov	r0, r6
 80099fa:	f000 f895 	bl	8009b28 <_sbrk_r>
 80099fe:	6020      	str	r0, [r4, #0]
 8009a00:	4629      	mov	r1, r5
 8009a02:	4630      	mov	r0, r6
 8009a04:	f000 f890 	bl	8009b28 <_sbrk_r>
 8009a08:	1c43      	adds	r3, r0, #1
 8009a0a:	d124      	bne.n	8009a56 <_malloc_r+0x92>
 8009a0c:	230c      	movs	r3, #12
 8009a0e:	4630      	mov	r0, r6
 8009a10:	6033      	str	r3, [r6, #0]
 8009a12:	f000 f8f8 	bl	8009c06 <__malloc_unlock>
 8009a16:	e7e4      	b.n	80099e2 <_malloc_r+0x1e>
 8009a18:	680b      	ldr	r3, [r1, #0]
 8009a1a:	1b5b      	subs	r3, r3, r5
 8009a1c:	d418      	bmi.n	8009a50 <_malloc_r+0x8c>
 8009a1e:	2b0b      	cmp	r3, #11
 8009a20:	d90f      	bls.n	8009a42 <_malloc_r+0x7e>
 8009a22:	600b      	str	r3, [r1, #0]
 8009a24:	18cc      	adds	r4, r1, r3
 8009a26:	50cd      	str	r5, [r1, r3]
 8009a28:	4630      	mov	r0, r6
 8009a2a:	f000 f8ec 	bl	8009c06 <__malloc_unlock>
 8009a2e:	f104 000b 	add.w	r0, r4, #11
 8009a32:	1d23      	adds	r3, r4, #4
 8009a34:	f020 0007 	bic.w	r0, r0, #7
 8009a38:	1ac3      	subs	r3, r0, r3
 8009a3a:	d0d3      	beq.n	80099e4 <_malloc_r+0x20>
 8009a3c:	425a      	negs	r2, r3
 8009a3e:	50e2      	str	r2, [r4, r3]
 8009a40:	e7d0      	b.n	80099e4 <_malloc_r+0x20>
 8009a42:	684b      	ldr	r3, [r1, #4]
 8009a44:	428c      	cmp	r4, r1
 8009a46:	bf16      	itet	ne
 8009a48:	6063      	strne	r3, [r4, #4]
 8009a4a:	6013      	streq	r3, [r2, #0]
 8009a4c:	460c      	movne	r4, r1
 8009a4e:	e7eb      	b.n	8009a28 <_malloc_r+0x64>
 8009a50:	460c      	mov	r4, r1
 8009a52:	6849      	ldr	r1, [r1, #4]
 8009a54:	e7cc      	b.n	80099f0 <_malloc_r+0x2c>
 8009a56:	1cc4      	adds	r4, r0, #3
 8009a58:	f024 0403 	bic.w	r4, r4, #3
 8009a5c:	42a0      	cmp	r0, r4
 8009a5e:	d005      	beq.n	8009a6c <_malloc_r+0xa8>
 8009a60:	1a21      	subs	r1, r4, r0
 8009a62:	4630      	mov	r0, r6
 8009a64:	f000 f860 	bl	8009b28 <_sbrk_r>
 8009a68:	3001      	adds	r0, #1
 8009a6a:	d0cf      	beq.n	8009a0c <_malloc_r+0x48>
 8009a6c:	6025      	str	r5, [r4, #0]
 8009a6e:	e7db      	b.n	8009a28 <_malloc_r+0x64>
 8009a70:	20000e00 	.word	0x20000e00
 8009a74:	20000e04 	.word	0x20000e04

08009a78 <srand>:
 8009a78:	b538      	push	{r3, r4, r5, lr}
 8009a7a:	4b0d      	ldr	r3, [pc, #52]	; (8009ab0 <srand+0x38>)
 8009a7c:	4605      	mov	r5, r0
 8009a7e:	681c      	ldr	r4, [r3, #0]
 8009a80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009a82:	b97b      	cbnz	r3, 8009aa4 <srand+0x2c>
 8009a84:	2018      	movs	r0, #24
 8009a86:	f7ff ff35 	bl	80098f4 <malloc>
 8009a8a:	4a0a      	ldr	r2, [pc, #40]	; (8009ab4 <srand+0x3c>)
 8009a8c:	4b0a      	ldr	r3, [pc, #40]	; (8009ab8 <srand+0x40>)
 8009a8e:	63a0      	str	r0, [r4, #56]	; 0x38
 8009a90:	e9c0 2300 	strd	r2, r3, [r0]
 8009a94:	4b09      	ldr	r3, [pc, #36]	; (8009abc <srand+0x44>)
 8009a96:	2201      	movs	r2, #1
 8009a98:	6083      	str	r3, [r0, #8]
 8009a9a:	230b      	movs	r3, #11
 8009a9c:	8183      	strh	r3, [r0, #12]
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009aa8:	611d      	str	r5, [r3, #16]
 8009aaa:	615a      	str	r2, [r3, #20]
 8009aac:	bd38      	pop	{r3, r4, r5, pc}
 8009aae:	bf00      	nop
 8009ab0:	20000014 	.word	0x20000014
 8009ab4:	abcd330e 	.word	0xabcd330e
 8009ab8:	e66d1234 	.word	0xe66d1234
 8009abc:	0005deec 	.word	0x0005deec

08009ac0 <rand>:
 8009ac0:	b538      	push	{r3, r4, r5, lr}
 8009ac2:	4b13      	ldr	r3, [pc, #76]	; (8009b10 <rand+0x50>)
 8009ac4:	681c      	ldr	r4, [r3, #0]
 8009ac6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009ac8:	b97b      	cbnz	r3, 8009aea <rand+0x2a>
 8009aca:	2018      	movs	r0, #24
 8009acc:	f7ff ff12 	bl	80098f4 <malloc>
 8009ad0:	4a10      	ldr	r2, [pc, #64]	; (8009b14 <rand+0x54>)
 8009ad2:	4b11      	ldr	r3, [pc, #68]	; (8009b18 <rand+0x58>)
 8009ad4:	63a0      	str	r0, [r4, #56]	; 0x38
 8009ad6:	e9c0 2300 	strd	r2, r3, [r0]
 8009ada:	4b10      	ldr	r3, [pc, #64]	; (8009b1c <rand+0x5c>)
 8009adc:	2201      	movs	r2, #1
 8009ade:	6083      	str	r3, [r0, #8]
 8009ae0:	230b      	movs	r3, #11
 8009ae2:	8183      	strh	r3, [r0, #12]
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009aea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009aec:	480c      	ldr	r0, [pc, #48]	; (8009b20 <rand+0x60>)
 8009aee:	690a      	ldr	r2, [r1, #16]
 8009af0:	694b      	ldr	r3, [r1, #20]
 8009af2:	4350      	muls	r0, r2
 8009af4:	4c0b      	ldr	r4, [pc, #44]	; (8009b24 <rand+0x64>)
 8009af6:	fb04 0003 	mla	r0, r4, r3, r0
 8009afa:	fba2 2304 	umull	r2, r3, r2, r4
 8009afe:	4403      	add	r3, r0
 8009b00:	1c54      	adds	r4, r2, #1
 8009b02:	f143 0500 	adc.w	r5, r3, #0
 8009b06:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8009b0a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8009b0e:	bd38      	pop	{r3, r4, r5, pc}
 8009b10:	20000014 	.word	0x20000014
 8009b14:	abcd330e 	.word	0xabcd330e
 8009b18:	e66d1234 	.word	0xe66d1234
 8009b1c:	0005deec 	.word	0x0005deec
 8009b20:	5851f42d 	.word	0x5851f42d
 8009b24:	4c957f2d 	.word	0x4c957f2d

08009b28 <_sbrk_r>:
 8009b28:	b538      	push	{r3, r4, r5, lr}
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	4c05      	ldr	r4, [pc, #20]	; (8009b44 <_sbrk_r+0x1c>)
 8009b2e:	4605      	mov	r5, r0
 8009b30:	4608      	mov	r0, r1
 8009b32:	6023      	str	r3, [r4, #0]
 8009b34:	f7ff fda0 	bl	8009678 <_sbrk>
 8009b38:	1c43      	adds	r3, r0, #1
 8009b3a:	d102      	bne.n	8009b42 <_sbrk_r+0x1a>
 8009b3c:	6823      	ldr	r3, [r4, #0]
 8009b3e:	b103      	cbz	r3, 8009b42 <_sbrk_r+0x1a>
 8009b40:	602b      	str	r3, [r5, #0]
 8009b42:	bd38      	pop	{r3, r4, r5, pc}
 8009b44:	20000ec4 	.word	0x20000ec4

08009b48 <siprintf>:
 8009b48:	b40e      	push	{r1, r2, r3}
 8009b4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b4e:	b500      	push	{lr}
 8009b50:	b09c      	sub	sp, #112	; 0x70
 8009b52:	ab1d      	add	r3, sp, #116	; 0x74
 8009b54:	9002      	str	r0, [sp, #8]
 8009b56:	9006      	str	r0, [sp, #24]
 8009b58:	9107      	str	r1, [sp, #28]
 8009b5a:	9104      	str	r1, [sp, #16]
 8009b5c:	4808      	ldr	r0, [pc, #32]	; (8009b80 <siprintf+0x38>)
 8009b5e:	4909      	ldr	r1, [pc, #36]	; (8009b84 <siprintf+0x3c>)
 8009b60:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b64:	9105      	str	r1, [sp, #20]
 8009b66:	6800      	ldr	r0, [r0, #0]
 8009b68:	a902      	add	r1, sp, #8
 8009b6a:	9301      	str	r3, [sp, #4]
 8009b6c:	f000 f8a6 	bl	8009cbc <_svfiprintf_r>
 8009b70:	2200      	movs	r2, #0
 8009b72:	9b02      	ldr	r3, [sp, #8]
 8009b74:	701a      	strb	r2, [r3, #0]
 8009b76:	b01c      	add	sp, #112	; 0x70
 8009b78:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b7c:	b003      	add	sp, #12
 8009b7e:	4770      	bx	lr
 8009b80:	20000014 	.word	0x20000014
 8009b84:	ffff0208 	.word	0xffff0208

08009b88 <__utoa>:
 8009b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b8a:	b08b      	sub	sp, #44	; 0x2c
 8009b8c:	4605      	mov	r5, r0
 8009b8e:	460c      	mov	r4, r1
 8009b90:	466e      	mov	r6, sp
 8009b92:	4b1b      	ldr	r3, [pc, #108]	; (8009c00 <__utoa+0x78>)
 8009b94:	f103 0c20 	add.w	ip, r3, #32
 8009b98:	4637      	mov	r7, r6
 8009b9a:	6818      	ldr	r0, [r3, #0]
 8009b9c:	6859      	ldr	r1, [r3, #4]
 8009b9e:	3308      	adds	r3, #8
 8009ba0:	c703      	stmia	r7!, {r0, r1}
 8009ba2:	4563      	cmp	r3, ip
 8009ba4:	463e      	mov	r6, r7
 8009ba6:	d1f7      	bne.n	8009b98 <__utoa+0x10>
 8009ba8:	6818      	ldr	r0, [r3, #0]
 8009baa:	791b      	ldrb	r3, [r3, #4]
 8009bac:	6038      	str	r0, [r7, #0]
 8009bae:	713b      	strb	r3, [r7, #4]
 8009bb0:	1e93      	subs	r3, r2, #2
 8009bb2:	2b22      	cmp	r3, #34	; 0x22
 8009bb4:	f04f 0300 	mov.w	r3, #0
 8009bb8:	d904      	bls.n	8009bc4 <__utoa+0x3c>
 8009bba:	7023      	strb	r3, [r4, #0]
 8009bbc:	461c      	mov	r4, r3
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	b00b      	add	sp, #44	; 0x2c
 8009bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bc4:	1e66      	subs	r6, r4, #1
 8009bc6:	fbb5 f0f2 	udiv	r0, r5, r2
 8009bca:	fb02 5510 	mls	r5, r2, r0, r5
 8009bce:	af0a      	add	r7, sp, #40	; 0x28
 8009bd0:	443d      	add	r5, r7
 8009bd2:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8009bd6:	1c59      	adds	r1, r3, #1
 8009bd8:	f806 5f01 	strb.w	r5, [r6, #1]!
 8009bdc:	4605      	mov	r5, r0
 8009bde:	b968      	cbnz	r0, 8009bfc <__utoa+0x74>
 8009be0:	4622      	mov	r2, r4
 8009be2:	5460      	strb	r0, [r4, r1]
 8009be4:	4423      	add	r3, r4
 8009be6:	1b19      	subs	r1, r3, r4
 8009be8:	1b10      	subs	r0, r2, r4
 8009bea:	4281      	cmp	r1, r0
 8009bec:	dde7      	ble.n	8009bbe <__utoa+0x36>
 8009bee:	7811      	ldrb	r1, [r2, #0]
 8009bf0:	7818      	ldrb	r0, [r3, #0]
 8009bf2:	f802 0b01 	strb.w	r0, [r2], #1
 8009bf6:	f803 1901 	strb.w	r1, [r3], #-1
 8009bfa:	e7f4      	b.n	8009be6 <__utoa+0x5e>
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	e7e2      	b.n	8009bc6 <__utoa+0x3e>
 8009c00:	0800bae0 	.word	0x0800bae0

08009c04 <__malloc_lock>:
 8009c04:	4770      	bx	lr

08009c06 <__malloc_unlock>:
 8009c06:	4770      	bx	lr

08009c08 <__ssputs_r>:
 8009c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c0c:	688e      	ldr	r6, [r1, #8]
 8009c0e:	4682      	mov	sl, r0
 8009c10:	429e      	cmp	r6, r3
 8009c12:	460c      	mov	r4, r1
 8009c14:	4690      	mov	r8, r2
 8009c16:	4699      	mov	r9, r3
 8009c18:	d837      	bhi.n	8009c8a <__ssputs_r+0x82>
 8009c1a:	898a      	ldrh	r2, [r1, #12]
 8009c1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c20:	d031      	beq.n	8009c86 <__ssputs_r+0x7e>
 8009c22:	2302      	movs	r3, #2
 8009c24:	6825      	ldr	r5, [r4, #0]
 8009c26:	6909      	ldr	r1, [r1, #16]
 8009c28:	1a6f      	subs	r7, r5, r1
 8009c2a:	6965      	ldr	r5, [r4, #20]
 8009c2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c30:	fb95 f5f3 	sdiv	r5, r5, r3
 8009c34:	f109 0301 	add.w	r3, r9, #1
 8009c38:	443b      	add	r3, r7
 8009c3a:	429d      	cmp	r5, r3
 8009c3c:	bf38      	it	cc
 8009c3e:	461d      	movcc	r5, r3
 8009c40:	0553      	lsls	r3, r2, #21
 8009c42:	d530      	bpl.n	8009ca6 <__ssputs_r+0x9e>
 8009c44:	4629      	mov	r1, r5
 8009c46:	f7ff febd 	bl	80099c4 <_malloc_r>
 8009c4a:	4606      	mov	r6, r0
 8009c4c:	b950      	cbnz	r0, 8009c64 <__ssputs_r+0x5c>
 8009c4e:	230c      	movs	r3, #12
 8009c50:	f04f 30ff 	mov.w	r0, #4294967295
 8009c54:	f8ca 3000 	str.w	r3, [sl]
 8009c58:	89a3      	ldrh	r3, [r4, #12]
 8009c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c5e:	81a3      	strh	r3, [r4, #12]
 8009c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c64:	463a      	mov	r2, r7
 8009c66:	6921      	ldr	r1, [r4, #16]
 8009c68:	f7ff fe4c 	bl	8009904 <memcpy>
 8009c6c:	89a3      	ldrh	r3, [r4, #12]
 8009c6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c76:	81a3      	strh	r3, [r4, #12]
 8009c78:	6126      	str	r6, [r4, #16]
 8009c7a:	443e      	add	r6, r7
 8009c7c:	6026      	str	r6, [r4, #0]
 8009c7e:	464e      	mov	r6, r9
 8009c80:	6165      	str	r5, [r4, #20]
 8009c82:	1bed      	subs	r5, r5, r7
 8009c84:	60a5      	str	r5, [r4, #8]
 8009c86:	454e      	cmp	r6, r9
 8009c88:	d900      	bls.n	8009c8c <__ssputs_r+0x84>
 8009c8a:	464e      	mov	r6, r9
 8009c8c:	4632      	mov	r2, r6
 8009c8e:	4641      	mov	r1, r8
 8009c90:	6820      	ldr	r0, [r4, #0]
 8009c92:	f000 faa1 	bl	800a1d8 <memmove>
 8009c96:	68a3      	ldr	r3, [r4, #8]
 8009c98:	2000      	movs	r0, #0
 8009c9a:	1b9b      	subs	r3, r3, r6
 8009c9c:	60a3      	str	r3, [r4, #8]
 8009c9e:	6823      	ldr	r3, [r4, #0]
 8009ca0:	441e      	add	r6, r3
 8009ca2:	6026      	str	r6, [r4, #0]
 8009ca4:	e7dc      	b.n	8009c60 <__ssputs_r+0x58>
 8009ca6:	462a      	mov	r2, r5
 8009ca8:	f000 faaf 	bl	800a20a <_realloc_r>
 8009cac:	4606      	mov	r6, r0
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	d1e2      	bne.n	8009c78 <__ssputs_r+0x70>
 8009cb2:	6921      	ldr	r1, [r4, #16]
 8009cb4:	4650      	mov	r0, sl
 8009cb6:	f7ff fe39 	bl	800992c <_free_r>
 8009cba:	e7c8      	b.n	8009c4e <__ssputs_r+0x46>

08009cbc <_svfiprintf_r>:
 8009cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc0:	461d      	mov	r5, r3
 8009cc2:	898b      	ldrh	r3, [r1, #12]
 8009cc4:	b09d      	sub	sp, #116	; 0x74
 8009cc6:	061f      	lsls	r7, r3, #24
 8009cc8:	4680      	mov	r8, r0
 8009cca:	460c      	mov	r4, r1
 8009ccc:	4616      	mov	r6, r2
 8009cce:	d50f      	bpl.n	8009cf0 <_svfiprintf_r+0x34>
 8009cd0:	690b      	ldr	r3, [r1, #16]
 8009cd2:	b96b      	cbnz	r3, 8009cf0 <_svfiprintf_r+0x34>
 8009cd4:	2140      	movs	r1, #64	; 0x40
 8009cd6:	f7ff fe75 	bl	80099c4 <_malloc_r>
 8009cda:	6020      	str	r0, [r4, #0]
 8009cdc:	6120      	str	r0, [r4, #16]
 8009cde:	b928      	cbnz	r0, 8009cec <_svfiprintf_r+0x30>
 8009ce0:	230c      	movs	r3, #12
 8009ce2:	f8c8 3000 	str.w	r3, [r8]
 8009ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8009cea:	e0c8      	b.n	8009e7e <_svfiprintf_r+0x1c2>
 8009cec:	2340      	movs	r3, #64	; 0x40
 8009cee:	6163      	str	r3, [r4, #20]
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8009cf4:	2320      	movs	r3, #32
 8009cf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cfa:	2330      	movs	r3, #48	; 0x30
 8009cfc:	f04f 0b01 	mov.w	fp, #1
 8009d00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d04:	9503      	str	r5, [sp, #12]
 8009d06:	4637      	mov	r7, r6
 8009d08:	463d      	mov	r5, r7
 8009d0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009d0e:	b10b      	cbz	r3, 8009d14 <_svfiprintf_r+0x58>
 8009d10:	2b25      	cmp	r3, #37	; 0x25
 8009d12:	d13e      	bne.n	8009d92 <_svfiprintf_r+0xd6>
 8009d14:	ebb7 0a06 	subs.w	sl, r7, r6
 8009d18:	d00b      	beq.n	8009d32 <_svfiprintf_r+0x76>
 8009d1a:	4653      	mov	r3, sl
 8009d1c:	4632      	mov	r2, r6
 8009d1e:	4621      	mov	r1, r4
 8009d20:	4640      	mov	r0, r8
 8009d22:	f7ff ff71 	bl	8009c08 <__ssputs_r>
 8009d26:	3001      	adds	r0, #1
 8009d28:	f000 80a4 	beq.w	8009e74 <_svfiprintf_r+0x1b8>
 8009d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d2e:	4453      	add	r3, sl
 8009d30:	9309      	str	r3, [sp, #36]	; 0x24
 8009d32:	783b      	ldrb	r3, [r7, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f000 809d 	beq.w	8009e74 <_svfiprintf_r+0x1b8>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d44:	9304      	str	r3, [sp, #16]
 8009d46:	9307      	str	r3, [sp, #28]
 8009d48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d4c:	931a      	str	r3, [sp, #104]	; 0x68
 8009d4e:	462f      	mov	r7, r5
 8009d50:	2205      	movs	r2, #5
 8009d52:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009d56:	4850      	ldr	r0, [pc, #320]	; (8009e98 <_svfiprintf_r+0x1dc>)
 8009d58:	f000 fa30 	bl	800a1bc <memchr>
 8009d5c:	9b04      	ldr	r3, [sp, #16]
 8009d5e:	b9d0      	cbnz	r0, 8009d96 <_svfiprintf_r+0xda>
 8009d60:	06d9      	lsls	r1, r3, #27
 8009d62:	bf44      	itt	mi
 8009d64:	2220      	movmi	r2, #32
 8009d66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d6a:	071a      	lsls	r2, r3, #28
 8009d6c:	bf44      	itt	mi
 8009d6e:	222b      	movmi	r2, #43	; 0x2b
 8009d70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d74:	782a      	ldrb	r2, [r5, #0]
 8009d76:	2a2a      	cmp	r2, #42	; 0x2a
 8009d78:	d015      	beq.n	8009da6 <_svfiprintf_r+0xea>
 8009d7a:	462f      	mov	r7, r5
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	250a      	movs	r5, #10
 8009d80:	9a07      	ldr	r2, [sp, #28]
 8009d82:	4639      	mov	r1, r7
 8009d84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d88:	3b30      	subs	r3, #48	; 0x30
 8009d8a:	2b09      	cmp	r3, #9
 8009d8c:	d94d      	bls.n	8009e2a <_svfiprintf_r+0x16e>
 8009d8e:	b1b8      	cbz	r0, 8009dc0 <_svfiprintf_r+0x104>
 8009d90:	e00f      	b.n	8009db2 <_svfiprintf_r+0xf6>
 8009d92:	462f      	mov	r7, r5
 8009d94:	e7b8      	b.n	8009d08 <_svfiprintf_r+0x4c>
 8009d96:	4a40      	ldr	r2, [pc, #256]	; (8009e98 <_svfiprintf_r+0x1dc>)
 8009d98:	463d      	mov	r5, r7
 8009d9a:	1a80      	subs	r0, r0, r2
 8009d9c:	fa0b f000 	lsl.w	r0, fp, r0
 8009da0:	4318      	orrs	r0, r3
 8009da2:	9004      	str	r0, [sp, #16]
 8009da4:	e7d3      	b.n	8009d4e <_svfiprintf_r+0x92>
 8009da6:	9a03      	ldr	r2, [sp, #12]
 8009da8:	1d11      	adds	r1, r2, #4
 8009daa:	6812      	ldr	r2, [r2, #0]
 8009dac:	9103      	str	r1, [sp, #12]
 8009dae:	2a00      	cmp	r2, #0
 8009db0:	db01      	blt.n	8009db6 <_svfiprintf_r+0xfa>
 8009db2:	9207      	str	r2, [sp, #28]
 8009db4:	e004      	b.n	8009dc0 <_svfiprintf_r+0x104>
 8009db6:	4252      	negs	r2, r2
 8009db8:	f043 0302 	orr.w	r3, r3, #2
 8009dbc:	9207      	str	r2, [sp, #28]
 8009dbe:	9304      	str	r3, [sp, #16]
 8009dc0:	783b      	ldrb	r3, [r7, #0]
 8009dc2:	2b2e      	cmp	r3, #46	; 0x2e
 8009dc4:	d10c      	bne.n	8009de0 <_svfiprintf_r+0x124>
 8009dc6:	787b      	ldrb	r3, [r7, #1]
 8009dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8009dca:	d133      	bne.n	8009e34 <_svfiprintf_r+0x178>
 8009dcc:	9b03      	ldr	r3, [sp, #12]
 8009dce:	3702      	adds	r7, #2
 8009dd0:	1d1a      	adds	r2, r3, #4
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	9203      	str	r2, [sp, #12]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	bfb8      	it	lt
 8009dda:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dde:	9305      	str	r3, [sp, #20]
 8009de0:	4d2e      	ldr	r5, [pc, #184]	; (8009e9c <_svfiprintf_r+0x1e0>)
 8009de2:	2203      	movs	r2, #3
 8009de4:	7839      	ldrb	r1, [r7, #0]
 8009de6:	4628      	mov	r0, r5
 8009de8:	f000 f9e8 	bl	800a1bc <memchr>
 8009dec:	b138      	cbz	r0, 8009dfe <_svfiprintf_r+0x142>
 8009dee:	2340      	movs	r3, #64	; 0x40
 8009df0:	1b40      	subs	r0, r0, r5
 8009df2:	fa03 f000 	lsl.w	r0, r3, r0
 8009df6:	9b04      	ldr	r3, [sp, #16]
 8009df8:	3701      	adds	r7, #1
 8009dfa:	4303      	orrs	r3, r0
 8009dfc:	9304      	str	r3, [sp, #16]
 8009dfe:	7839      	ldrb	r1, [r7, #0]
 8009e00:	2206      	movs	r2, #6
 8009e02:	4827      	ldr	r0, [pc, #156]	; (8009ea0 <_svfiprintf_r+0x1e4>)
 8009e04:	1c7e      	adds	r6, r7, #1
 8009e06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e0a:	f000 f9d7 	bl	800a1bc <memchr>
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	d038      	beq.n	8009e84 <_svfiprintf_r+0x1c8>
 8009e12:	4b24      	ldr	r3, [pc, #144]	; (8009ea4 <_svfiprintf_r+0x1e8>)
 8009e14:	bb13      	cbnz	r3, 8009e5c <_svfiprintf_r+0x1a0>
 8009e16:	9b03      	ldr	r3, [sp, #12]
 8009e18:	3307      	adds	r3, #7
 8009e1a:	f023 0307 	bic.w	r3, r3, #7
 8009e1e:	3308      	adds	r3, #8
 8009e20:	9303      	str	r3, [sp, #12]
 8009e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e24:	444b      	add	r3, r9
 8009e26:	9309      	str	r3, [sp, #36]	; 0x24
 8009e28:	e76d      	b.n	8009d06 <_svfiprintf_r+0x4a>
 8009e2a:	fb05 3202 	mla	r2, r5, r2, r3
 8009e2e:	2001      	movs	r0, #1
 8009e30:	460f      	mov	r7, r1
 8009e32:	e7a6      	b.n	8009d82 <_svfiprintf_r+0xc6>
 8009e34:	2300      	movs	r3, #0
 8009e36:	250a      	movs	r5, #10
 8009e38:	4619      	mov	r1, r3
 8009e3a:	3701      	adds	r7, #1
 8009e3c:	9305      	str	r3, [sp, #20]
 8009e3e:	4638      	mov	r0, r7
 8009e40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e44:	3a30      	subs	r2, #48	; 0x30
 8009e46:	2a09      	cmp	r2, #9
 8009e48:	d903      	bls.n	8009e52 <_svfiprintf_r+0x196>
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d0c8      	beq.n	8009de0 <_svfiprintf_r+0x124>
 8009e4e:	9105      	str	r1, [sp, #20]
 8009e50:	e7c6      	b.n	8009de0 <_svfiprintf_r+0x124>
 8009e52:	fb05 2101 	mla	r1, r5, r1, r2
 8009e56:	2301      	movs	r3, #1
 8009e58:	4607      	mov	r7, r0
 8009e5a:	e7f0      	b.n	8009e3e <_svfiprintf_r+0x182>
 8009e5c:	ab03      	add	r3, sp, #12
 8009e5e:	9300      	str	r3, [sp, #0]
 8009e60:	4622      	mov	r2, r4
 8009e62:	4b11      	ldr	r3, [pc, #68]	; (8009ea8 <_svfiprintf_r+0x1ec>)
 8009e64:	a904      	add	r1, sp, #16
 8009e66:	4640      	mov	r0, r8
 8009e68:	f3af 8000 	nop.w
 8009e6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009e70:	4681      	mov	r9, r0
 8009e72:	d1d6      	bne.n	8009e22 <_svfiprintf_r+0x166>
 8009e74:	89a3      	ldrh	r3, [r4, #12]
 8009e76:	065b      	lsls	r3, r3, #25
 8009e78:	f53f af35 	bmi.w	8009ce6 <_svfiprintf_r+0x2a>
 8009e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e7e:	b01d      	add	sp, #116	; 0x74
 8009e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e84:	ab03      	add	r3, sp, #12
 8009e86:	9300      	str	r3, [sp, #0]
 8009e88:	4622      	mov	r2, r4
 8009e8a:	4b07      	ldr	r3, [pc, #28]	; (8009ea8 <_svfiprintf_r+0x1ec>)
 8009e8c:	a904      	add	r1, sp, #16
 8009e8e:	4640      	mov	r0, r8
 8009e90:	f000 f882 	bl	8009f98 <_printf_i>
 8009e94:	e7ea      	b.n	8009e6c <_svfiprintf_r+0x1b0>
 8009e96:	bf00      	nop
 8009e98:	0800bb05 	.word	0x0800bb05
 8009e9c:	0800bb0b 	.word	0x0800bb0b
 8009ea0:	0800bb0f 	.word	0x0800bb0f
 8009ea4:	00000000 	.word	0x00000000
 8009ea8:	08009c09 	.word	0x08009c09

08009eac <_printf_common>:
 8009eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009eb0:	4691      	mov	r9, r2
 8009eb2:	461f      	mov	r7, r3
 8009eb4:	688a      	ldr	r2, [r1, #8]
 8009eb6:	690b      	ldr	r3, [r1, #16]
 8009eb8:	4606      	mov	r6, r0
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	bfb8      	it	lt
 8009ebe:	4613      	movlt	r3, r2
 8009ec0:	f8c9 3000 	str.w	r3, [r9]
 8009ec4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ec8:	460c      	mov	r4, r1
 8009eca:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ece:	b112      	cbz	r2, 8009ed6 <_printf_common+0x2a>
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	f8c9 3000 	str.w	r3, [r9]
 8009ed6:	6823      	ldr	r3, [r4, #0]
 8009ed8:	0699      	lsls	r1, r3, #26
 8009eda:	bf42      	ittt	mi
 8009edc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009ee0:	3302      	addmi	r3, #2
 8009ee2:	f8c9 3000 	strmi.w	r3, [r9]
 8009ee6:	6825      	ldr	r5, [r4, #0]
 8009ee8:	f015 0506 	ands.w	r5, r5, #6
 8009eec:	d107      	bne.n	8009efe <_printf_common+0x52>
 8009eee:	f104 0a19 	add.w	sl, r4, #25
 8009ef2:	68e3      	ldr	r3, [r4, #12]
 8009ef4:	f8d9 2000 	ldr.w	r2, [r9]
 8009ef8:	1a9b      	subs	r3, r3, r2
 8009efa:	42ab      	cmp	r3, r5
 8009efc:	dc29      	bgt.n	8009f52 <_printf_common+0xa6>
 8009efe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009f02:	6822      	ldr	r2, [r4, #0]
 8009f04:	3300      	adds	r3, #0
 8009f06:	bf18      	it	ne
 8009f08:	2301      	movne	r3, #1
 8009f0a:	0692      	lsls	r2, r2, #26
 8009f0c:	d42e      	bmi.n	8009f6c <_printf_common+0xc0>
 8009f0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f12:	4639      	mov	r1, r7
 8009f14:	4630      	mov	r0, r6
 8009f16:	47c0      	blx	r8
 8009f18:	3001      	adds	r0, #1
 8009f1a:	d021      	beq.n	8009f60 <_printf_common+0xb4>
 8009f1c:	6823      	ldr	r3, [r4, #0]
 8009f1e:	68e5      	ldr	r5, [r4, #12]
 8009f20:	f003 0306 	and.w	r3, r3, #6
 8009f24:	2b04      	cmp	r3, #4
 8009f26:	bf18      	it	ne
 8009f28:	2500      	movne	r5, #0
 8009f2a:	f8d9 2000 	ldr.w	r2, [r9]
 8009f2e:	f04f 0900 	mov.w	r9, #0
 8009f32:	bf08      	it	eq
 8009f34:	1aad      	subeq	r5, r5, r2
 8009f36:	68a3      	ldr	r3, [r4, #8]
 8009f38:	6922      	ldr	r2, [r4, #16]
 8009f3a:	bf08      	it	eq
 8009f3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f40:	4293      	cmp	r3, r2
 8009f42:	bfc4      	itt	gt
 8009f44:	1a9b      	subgt	r3, r3, r2
 8009f46:	18ed      	addgt	r5, r5, r3
 8009f48:	341a      	adds	r4, #26
 8009f4a:	454d      	cmp	r5, r9
 8009f4c:	d11a      	bne.n	8009f84 <_printf_common+0xd8>
 8009f4e:	2000      	movs	r0, #0
 8009f50:	e008      	b.n	8009f64 <_printf_common+0xb8>
 8009f52:	2301      	movs	r3, #1
 8009f54:	4652      	mov	r2, sl
 8009f56:	4639      	mov	r1, r7
 8009f58:	4630      	mov	r0, r6
 8009f5a:	47c0      	blx	r8
 8009f5c:	3001      	adds	r0, #1
 8009f5e:	d103      	bne.n	8009f68 <_printf_common+0xbc>
 8009f60:	f04f 30ff 	mov.w	r0, #4294967295
 8009f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f68:	3501      	adds	r5, #1
 8009f6a:	e7c2      	b.n	8009ef2 <_printf_common+0x46>
 8009f6c:	2030      	movs	r0, #48	; 0x30
 8009f6e:	18e1      	adds	r1, r4, r3
 8009f70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f74:	1c5a      	adds	r2, r3, #1
 8009f76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f7a:	4422      	add	r2, r4
 8009f7c:	3302      	adds	r3, #2
 8009f7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f82:	e7c4      	b.n	8009f0e <_printf_common+0x62>
 8009f84:	2301      	movs	r3, #1
 8009f86:	4622      	mov	r2, r4
 8009f88:	4639      	mov	r1, r7
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	47c0      	blx	r8
 8009f8e:	3001      	adds	r0, #1
 8009f90:	d0e6      	beq.n	8009f60 <_printf_common+0xb4>
 8009f92:	f109 0901 	add.w	r9, r9, #1
 8009f96:	e7d8      	b.n	8009f4a <_printf_common+0x9e>

08009f98 <_printf_i>:
 8009f98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f9c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009fa0:	460c      	mov	r4, r1
 8009fa2:	7e09      	ldrb	r1, [r1, #24]
 8009fa4:	b085      	sub	sp, #20
 8009fa6:	296e      	cmp	r1, #110	; 0x6e
 8009fa8:	4617      	mov	r7, r2
 8009faa:	4606      	mov	r6, r0
 8009fac:	4698      	mov	r8, r3
 8009fae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fb0:	f000 80b3 	beq.w	800a11a <_printf_i+0x182>
 8009fb4:	d822      	bhi.n	8009ffc <_printf_i+0x64>
 8009fb6:	2963      	cmp	r1, #99	; 0x63
 8009fb8:	d036      	beq.n	800a028 <_printf_i+0x90>
 8009fba:	d80a      	bhi.n	8009fd2 <_printf_i+0x3a>
 8009fbc:	2900      	cmp	r1, #0
 8009fbe:	f000 80b9 	beq.w	800a134 <_printf_i+0x19c>
 8009fc2:	2958      	cmp	r1, #88	; 0x58
 8009fc4:	f000 8083 	beq.w	800a0ce <_printf_i+0x136>
 8009fc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fcc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009fd0:	e032      	b.n	800a038 <_printf_i+0xa0>
 8009fd2:	2964      	cmp	r1, #100	; 0x64
 8009fd4:	d001      	beq.n	8009fda <_printf_i+0x42>
 8009fd6:	2969      	cmp	r1, #105	; 0x69
 8009fd8:	d1f6      	bne.n	8009fc8 <_printf_i+0x30>
 8009fda:	6820      	ldr	r0, [r4, #0]
 8009fdc:	6813      	ldr	r3, [r2, #0]
 8009fde:	0605      	lsls	r5, r0, #24
 8009fe0:	f103 0104 	add.w	r1, r3, #4
 8009fe4:	d52a      	bpl.n	800a03c <_printf_i+0xa4>
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	6011      	str	r1, [r2, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	da03      	bge.n	8009ff6 <_printf_i+0x5e>
 8009fee:	222d      	movs	r2, #45	; 0x2d
 8009ff0:	425b      	negs	r3, r3
 8009ff2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009ff6:	486f      	ldr	r0, [pc, #444]	; (800a1b4 <_printf_i+0x21c>)
 8009ff8:	220a      	movs	r2, #10
 8009ffa:	e039      	b.n	800a070 <_printf_i+0xd8>
 8009ffc:	2973      	cmp	r1, #115	; 0x73
 8009ffe:	f000 809d 	beq.w	800a13c <_printf_i+0x1a4>
 800a002:	d808      	bhi.n	800a016 <_printf_i+0x7e>
 800a004:	296f      	cmp	r1, #111	; 0x6f
 800a006:	d020      	beq.n	800a04a <_printf_i+0xb2>
 800a008:	2970      	cmp	r1, #112	; 0x70
 800a00a:	d1dd      	bne.n	8009fc8 <_printf_i+0x30>
 800a00c:	6823      	ldr	r3, [r4, #0]
 800a00e:	f043 0320 	orr.w	r3, r3, #32
 800a012:	6023      	str	r3, [r4, #0]
 800a014:	e003      	b.n	800a01e <_printf_i+0x86>
 800a016:	2975      	cmp	r1, #117	; 0x75
 800a018:	d017      	beq.n	800a04a <_printf_i+0xb2>
 800a01a:	2978      	cmp	r1, #120	; 0x78
 800a01c:	d1d4      	bne.n	8009fc8 <_printf_i+0x30>
 800a01e:	2378      	movs	r3, #120	; 0x78
 800a020:	4865      	ldr	r0, [pc, #404]	; (800a1b8 <_printf_i+0x220>)
 800a022:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a026:	e055      	b.n	800a0d4 <_printf_i+0x13c>
 800a028:	6813      	ldr	r3, [r2, #0]
 800a02a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a02e:	1d19      	adds	r1, r3, #4
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	6011      	str	r1, [r2, #0]
 800a034:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a038:	2301      	movs	r3, #1
 800a03a:	e08c      	b.n	800a156 <_printf_i+0x1be>
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a042:	6011      	str	r1, [r2, #0]
 800a044:	bf18      	it	ne
 800a046:	b21b      	sxthne	r3, r3
 800a048:	e7cf      	b.n	8009fea <_printf_i+0x52>
 800a04a:	6813      	ldr	r3, [r2, #0]
 800a04c:	6825      	ldr	r5, [r4, #0]
 800a04e:	1d18      	adds	r0, r3, #4
 800a050:	6010      	str	r0, [r2, #0]
 800a052:	0628      	lsls	r0, r5, #24
 800a054:	d501      	bpl.n	800a05a <_printf_i+0xc2>
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	e002      	b.n	800a060 <_printf_i+0xc8>
 800a05a:	0668      	lsls	r0, r5, #25
 800a05c:	d5fb      	bpl.n	800a056 <_printf_i+0xbe>
 800a05e:	881b      	ldrh	r3, [r3, #0]
 800a060:	296f      	cmp	r1, #111	; 0x6f
 800a062:	bf14      	ite	ne
 800a064:	220a      	movne	r2, #10
 800a066:	2208      	moveq	r2, #8
 800a068:	4852      	ldr	r0, [pc, #328]	; (800a1b4 <_printf_i+0x21c>)
 800a06a:	2100      	movs	r1, #0
 800a06c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a070:	6865      	ldr	r5, [r4, #4]
 800a072:	2d00      	cmp	r5, #0
 800a074:	60a5      	str	r5, [r4, #8]
 800a076:	f2c0 8095 	blt.w	800a1a4 <_printf_i+0x20c>
 800a07a:	6821      	ldr	r1, [r4, #0]
 800a07c:	f021 0104 	bic.w	r1, r1, #4
 800a080:	6021      	str	r1, [r4, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d13d      	bne.n	800a102 <_printf_i+0x16a>
 800a086:	2d00      	cmp	r5, #0
 800a088:	f040 808e 	bne.w	800a1a8 <_printf_i+0x210>
 800a08c:	4665      	mov	r5, ip
 800a08e:	2a08      	cmp	r2, #8
 800a090:	d10b      	bne.n	800a0aa <_printf_i+0x112>
 800a092:	6823      	ldr	r3, [r4, #0]
 800a094:	07db      	lsls	r3, r3, #31
 800a096:	d508      	bpl.n	800a0aa <_printf_i+0x112>
 800a098:	6923      	ldr	r3, [r4, #16]
 800a09a:	6862      	ldr	r2, [r4, #4]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	bfde      	ittt	le
 800a0a0:	2330      	movle	r3, #48	; 0x30
 800a0a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a0aa:	ebac 0305 	sub.w	r3, ip, r5
 800a0ae:	6123      	str	r3, [r4, #16]
 800a0b0:	f8cd 8000 	str.w	r8, [sp]
 800a0b4:	463b      	mov	r3, r7
 800a0b6:	aa03      	add	r2, sp, #12
 800a0b8:	4621      	mov	r1, r4
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	f7ff fef6 	bl	8009eac <_printf_common>
 800a0c0:	3001      	adds	r0, #1
 800a0c2:	d14d      	bne.n	800a160 <_printf_i+0x1c8>
 800a0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c8:	b005      	add	sp, #20
 800a0ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0ce:	4839      	ldr	r0, [pc, #228]	; (800a1b4 <_printf_i+0x21c>)
 800a0d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a0d4:	6813      	ldr	r3, [r2, #0]
 800a0d6:	6821      	ldr	r1, [r4, #0]
 800a0d8:	1d1d      	adds	r5, r3, #4
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	6015      	str	r5, [r2, #0]
 800a0de:	060a      	lsls	r2, r1, #24
 800a0e0:	d50b      	bpl.n	800a0fa <_printf_i+0x162>
 800a0e2:	07ca      	lsls	r2, r1, #31
 800a0e4:	bf44      	itt	mi
 800a0e6:	f041 0120 	orrmi.w	r1, r1, #32
 800a0ea:	6021      	strmi	r1, [r4, #0]
 800a0ec:	b91b      	cbnz	r3, 800a0f6 <_printf_i+0x15e>
 800a0ee:	6822      	ldr	r2, [r4, #0]
 800a0f0:	f022 0220 	bic.w	r2, r2, #32
 800a0f4:	6022      	str	r2, [r4, #0]
 800a0f6:	2210      	movs	r2, #16
 800a0f8:	e7b7      	b.n	800a06a <_printf_i+0xd2>
 800a0fa:	064d      	lsls	r5, r1, #25
 800a0fc:	bf48      	it	mi
 800a0fe:	b29b      	uxthmi	r3, r3
 800a100:	e7ef      	b.n	800a0e2 <_printf_i+0x14a>
 800a102:	4665      	mov	r5, ip
 800a104:	fbb3 f1f2 	udiv	r1, r3, r2
 800a108:	fb02 3311 	mls	r3, r2, r1, r3
 800a10c:	5cc3      	ldrb	r3, [r0, r3]
 800a10e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a112:	460b      	mov	r3, r1
 800a114:	2900      	cmp	r1, #0
 800a116:	d1f5      	bne.n	800a104 <_printf_i+0x16c>
 800a118:	e7b9      	b.n	800a08e <_printf_i+0xf6>
 800a11a:	6813      	ldr	r3, [r2, #0]
 800a11c:	6825      	ldr	r5, [r4, #0]
 800a11e:	1d18      	adds	r0, r3, #4
 800a120:	6961      	ldr	r1, [r4, #20]
 800a122:	6010      	str	r0, [r2, #0]
 800a124:	0628      	lsls	r0, r5, #24
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	d501      	bpl.n	800a12e <_printf_i+0x196>
 800a12a:	6019      	str	r1, [r3, #0]
 800a12c:	e002      	b.n	800a134 <_printf_i+0x19c>
 800a12e:	066a      	lsls	r2, r5, #25
 800a130:	d5fb      	bpl.n	800a12a <_printf_i+0x192>
 800a132:	8019      	strh	r1, [r3, #0]
 800a134:	2300      	movs	r3, #0
 800a136:	4665      	mov	r5, ip
 800a138:	6123      	str	r3, [r4, #16]
 800a13a:	e7b9      	b.n	800a0b0 <_printf_i+0x118>
 800a13c:	6813      	ldr	r3, [r2, #0]
 800a13e:	1d19      	adds	r1, r3, #4
 800a140:	6011      	str	r1, [r2, #0]
 800a142:	681d      	ldr	r5, [r3, #0]
 800a144:	6862      	ldr	r2, [r4, #4]
 800a146:	2100      	movs	r1, #0
 800a148:	4628      	mov	r0, r5
 800a14a:	f000 f837 	bl	800a1bc <memchr>
 800a14e:	b108      	cbz	r0, 800a154 <_printf_i+0x1bc>
 800a150:	1b40      	subs	r0, r0, r5
 800a152:	6060      	str	r0, [r4, #4]
 800a154:	6863      	ldr	r3, [r4, #4]
 800a156:	6123      	str	r3, [r4, #16]
 800a158:	2300      	movs	r3, #0
 800a15a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a15e:	e7a7      	b.n	800a0b0 <_printf_i+0x118>
 800a160:	6923      	ldr	r3, [r4, #16]
 800a162:	462a      	mov	r2, r5
 800a164:	4639      	mov	r1, r7
 800a166:	4630      	mov	r0, r6
 800a168:	47c0      	blx	r8
 800a16a:	3001      	adds	r0, #1
 800a16c:	d0aa      	beq.n	800a0c4 <_printf_i+0x12c>
 800a16e:	6823      	ldr	r3, [r4, #0]
 800a170:	079b      	lsls	r3, r3, #30
 800a172:	d413      	bmi.n	800a19c <_printf_i+0x204>
 800a174:	68e0      	ldr	r0, [r4, #12]
 800a176:	9b03      	ldr	r3, [sp, #12]
 800a178:	4298      	cmp	r0, r3
 800a17a:	bfb8      	it	lt
 800a17c:	4618      	movlt	r0, r3
 800a17e:	e7a3      	b.n	800a0c8 <_printf_i+0x130>
 800a180:	2301      	movs	r3, #1
 800a182:	464a      	mov	r2, r9
 800a184:	4639      	mov	r1, r7
 800a186:	4630      	mov	r0, r6
 800a188:	47c0      	blx	r8
 800a18a:	3001      	adds	r0, #1
 800a18c:	d09a      	beq.n	800a0c4 <_printf_i+0x12c>
 800a18e:	3501      	adds	r5, #1
 800a190:	68e3      	ldr	r3, [r4, #12]
 800a192:	9a03      	ldr	r2, [sp, #12]
 800a194:	1a9b      	subs	r3, r3, r2
 800a196:	42ab      	cmp	r3, r5
 800a198:	dcf2      	bgt.n	800a180 <_printf_i+0x1e8>
 800a19a:	e7eb      	b.n	800a174 <_printf_i+0x1dc>
 800a19c:	2500      	movs	r5, #0
 800a19e:	f104 0919 	add.w	r9, r4, #25
 800a1a2:	e7f5      	b.n	800a190 <_printf_i+0x1f8>
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d1ac      	bne.n	800a102 <_printf_i+0x16a>
 800a1a8:	7803      	ldrb	r3, [r0, #0]
 800a1aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1b2:	e76c      	b.n	800a08e <_printf_i+0xf6>
 800a1b4:	0800bb16 	.word	0x0800bb16
 800a1b8:	0800bb27 	.word	0x0800bb27

0800a1bc <memchr>:
 800a1bc:	b510      	push	{r4, lr}
 800a1be:	b2c9      	uxtb	r1, r1
 800a1c0:	4402      	add	r2, r0
 800a1c2:	4290      	cmp	r0, r2
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	d101      	bne.n	800a1cc <memchr+0x10>
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	e003      	b.n	800a1d4 <memchr+0x18>
 800a1cc:	781c      	ldrb	r4, [r3, #0]
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	428c      	cmp	r4, r1
 800a1d2:	d1f6      	bne.n	800a1c2 <memchr+0x6>
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	bd10      	pop	{r4, pc}

0800a1d8 <memmove>:
 800a1d8:	4288      	cmp	r0, r1
 800a1da:	b510      	push	{r4, lr}
 800a1dc:	eb01 0302 	add.w	r3, r1, r2
 800a1e0:	d807      	bhi.n	800a1f2 <memmove+0x1a>
 800a1e2:	1e42      	subs	r2, r0, #1
 800a1e4:	4299      	cmp	r1, r3
 800a1e6:	d00a      	beq.n	800a1fe <memmove+0x26>
 800a1e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1ec:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a1f0:	e7f8      	b.n	800a1e4 <memmove+0xc>
 800a1f2:	4283      	cmp	r3, r0
 800a1f4:	d9f5      	bls.n	800a1e2 <memmove+0xa>
 800a1f6:	1881      	adds	r1, r0, r2
 800a1f8:	1ad2      	subs	r2, r2, r3
 800a1fa:	42d3      	cmn	r3, r2
 800a1fc:	d100      	bne.n	800a200 <memmove+0x28>
 800a1fe:	bd10      	pop	{r4, pc}
 800a200:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a204:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a208:	e7f7      	b.n	800a1fa <memmove+0x22>

0800a20a <_realloc_r>:
 800a20a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a20c:	4607      	mov	r7, r0
 800a20e:	4614      	mov	r4, r2
 800a210:	460e      	mov	r6, r1
 800a212:	b921      	cbnz	r1, 800a21e <_realloc_r+0x14>
 800a214:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a218:	4611      	mov	r1, r2
 800a21a:	f7ff bbd3 	b.w	80099c4 <_malloc_r>
 800a21e:	b922      	cbnz	r2, 800a22a <_realloc_r+0x20>
 800a220:	f7ff fb84 	bl	800992c <_free_r>
 800a224:	4625      	mov	r5, r4
 800a226:	4628      	mov	r0, r5
 800a228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a22a:	f000 f814 	bl	800a256 <_malloc_usable_size_r>
 800a22e:	42a0      	cmp	r0, r4
 800a230:	d20f      	bcs.n	800a252 <_realloc_r+0x48>
 800a232:	4621      	mov	r1, r4
 800a234:	4638      	mov	r0, r7
 800a236:	f7ff fbc5 	bl	80099c4 <_malloc_r>
 800a23a:	4605      	mov	r5, r0
 800a23c:	2800      	cmp	r0, #0
 800a23e:	d0f2      	beq.n	800a226 <_realloc_r+0x1c>
 800a240:	4631      	mov	r1, r6
 800a242:	4622      	mov	r2, r4
 800a244:	f7ff fb5e 	bl	8009904 <memcpy>
 800a248:	4631      	mov	r1, r6
 800a24a:	4638      	mov	r0, r7
 800a24c:	f7ff fb6e 	bl	800992c <_free_r>
 800a250:	e7e9      	b.n	800a226 <_realloc_r+0x1c>
 800a252:	4635      	mov	r5, r6
 800a254:	e7e7      	b.n	800a226 <_realloc_r+0x1c>

0800a256 <_malloc_usable_size_r>:
 800a256:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a25a:	1f18      	subs	r0, r3, #4
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	bfbc      	itt	lt
 800a260:	580b      	ldrlt	r3, [r1, r0]
 800a262:	18c0      	addlt	r0, r0, r3
 800a264:	4770      	bx	lr
	...

0800a268 <_init>:
 800a268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a26a:	bf00      	nop
 800a26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a26e:	bc08      	pop	{r3}
 800a270:	469e      	mov	lr, r3
 800a272:	4770      	bx	lr

0800a274 <_fini>:
 800a274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a276:	bf00      	nop
 800a278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a27a:	bc08      	pop	{r3}
 800a27c:	469e      	mov	lr, r3
 800a27e:	4770      	bx	lr
